# HA package version 3.42 built Wed Sep 19 02:54:21 2018
if echo '
' | od -b | grep -q 015 ; then echo dos format script - exiting ; exit 0 ; fi ; true
if [ $(basename $(pwd -P)) != HA ] ; then
mkdir -p HA ; if ! [ -d HA ] ; then echo "no HA directory" ; exit 0 ; fi; echo cd to HA ; cd HA; fi
echo unpacking HA version 3.42
# This is a shell archive.  Save it in a file, remove anything before
# this line, and then unpack it by entering "sh file".  Note, it may
# create directories; files and directories will be owned by you and
# have default permissions.
#
# This archive contains:
#
#	APPD_UPGRADE
#	VERSION
#	README.txt
#	RUNBOOK
#	UPGRADING
#	Release_Notes
#	appdservice.c
#	lib
#	monitors
#	monitors/DiskMonitor
#	monitors/MysqlMonitor
#	monitors/DiskMonitor/monitor.xml
#	monitors/DiskMonitor/disk-stat.sh
#	monitors/MysqlMonitor/monitor.xml
#	monitors/MysqlMonitor/mysql-stat.sh
#	monitors/DiskMonitor/README
#	monitors/MysqlMonitor/README
#	assassin.sh
#	failover.sh
#	watchdog.sh
#	watchdog.settings.template
#	replicate.sh
#	install-init.sh
#	uninstall-init.sh
#	appdservice-pbrun.sh
#	appdservice-root.sh
#	appdservice-noroot.sh
#	appdservice-xuser.sh
#	appdstatus.sh
#	appdynamics-machine-agent.sh
#	mysqlclient.sh
#	getaccess.sh
#	setmonitor.sh
#	appdcontroller.sh
#	appdcontroller-db.sh
#	appdynamics-machine-agent.sysconfig.template
#	appdcontroller.sysconfig.template
#	appdcontroller-db.sysconfig.template
#	numa.settings.template
#	numa-patch-controller.sh
#	userid-patch-controller.sh
#	check_for_root_files.sh
#	save_mysql_passwd.sh
#	rsyncd.conf
#	lib/password.sh
#	lib/ha.sh
#	lib/sql.sh
#	lib/log.sh
#	lib/conf.sh
#	lib/runuser.sh
#	lib/init.sh
#	lib/status.sh
#
echo x - APPD_UPGRADE
sed 's/^X//' >APPD_UPGRADE << 'END-of-APPD_UPGRADE'
X$Id: APPD_UPGRADE 3.32 2018-05-16 21:15:14 cmayer Exp $
X
XThis document describes the best practice workflow for upgrading the
Xcontrollers in an HA cluster.  In the below workflow, the distinction
Xis made between secondary and primary.   primary and secondary are 
Xtransient roles that are switched using failover.  Also note that if you
Xuse a different privilege escalation method, replace the invocations of
X'sudo service' with /sbin/appdservice or the appropriate substitute.
X
X1) check that Load Balancer correctly detects server liveness via calls 
X   to <controller>:<port>/controller/rest/serverstatus that respond with 
X   text containing <available>true - otherwise the following upgrade process
X   that starts Glassfish on the secondary for a time may wrongly be sent agent
X   or UI traffic
X  
X2) begin maintenance window (declare AppD service down)
X
X3) on primary: stop Glassfish 
X   sudo service appdcontroller stop
X
X4) on secondary: stop watchdog and Glassfish:
X  sudo service appdcontroller stop
X
X5) on secondary: monitor HA/appdstatus.sh until it reports 
X   Seconds_Behind_Master: 0
X
X6) on secondary: stop MySQL
X   sudo service appdcontroller-db stop
X
X7) now secondary is unaffected by changes on primary so it is a good backup 
X   in case upgrade fails. Secondary is up to the minute copy of primary.
X
X8) on primary: stop the database
X   the controller installer cannot run with the database running
X
X9) on primary: upgrade controller
X   this updates the database schema and controller binaries only on the
X   primary, since mysql replication is paused by the stopping of the mysql
X   instance on the secondary.
X
X10) on primary: stop controller appserver and database
X    sudo service appdcontroller-db stop
X
X11) on primary: compare pre & post upgraded domain.xml & db.cnf configs and 
X    add in any local changes that were not preserved during upgrade. The
X    secondary will contain the pre-upgrade files.
X
X12) reinstall the enciphered mysql password
X    the installer may remove this, and the HA toolkit must use it to connect
X    to the mysql instance.
X    
X    cd to HA and run ./save_mysql_passwd.s
X
X13) on primary: start the controller
X    sudo service appdcontroller start
X
X14) validate installation
X    Once Glassfish up, login to UI via browser directly to server, 
X    if all looks good logout. Verify that curl 
X       <controller>:<port>/controller/rest/serverstatus returns 
X    updated version and <available>true<available>. 
X
X15) if upgrade is deemed unsuccessful on the primary, proceed to step FAIL 1
X    debug of the upgrade may be profitable if small configuration steps were
X    incorrectly performed; the installer may be run repeatedly to repair the
X    upgrade if needed.
X
X--------- PROCEED HERE ONLY IF UPGRADE GOOD --------------
X
X16) on secondary: start database 
X    sudo service appdcontroller-db start
X
X17) on secondary: wait for database to apply schema and other changes
X    monitor HA/appdstatus.sh until it reports Seconds_Behind_Master: 0
X
X18) on secondary: stop MySQL
X    sudo service appdcontroller-db stop
X
X19) on secondary: upgrade controller
X    since the database is marked passive, no changes are applied to the
X    database
X
X20) on secondary: stop controller and database
X    sudo service appdcontroller-db stop
X
X21) on secondary: apply changes to domain.xml and db.cnf
X    domain.xml may be copied from the primary, db.cnf can but must have a unique server-id value
X
X22) on secondary: start the database and controller
X    sudo service appdcontroller-db start
X    bin/controller.sh start-appserver
X
X23) on secondary: verify appserver startup
X    verify that curl <controller>:<port>/controller/rest/serverstatus 
X    returns updated version and <available>false<available>.
X
X24) on secondary; stop secondary appserver
X    bin/controller.sh stop-appserver
X
X--------- PROCEED HERE ONLY IF UPGRADE BAD --------------
X
XFAIL 1) on the primary:  stop everything
X    sudo appdcontroller-db stop
X
XFAIL 2) on the secondary:  start the database and fail over
X    sudo appdcontroller-db start
X    HA/failover.sh
X
XFAIL 3) replicate over the failed original primary and re-attempt
X    upgrade the after root cause for the failed upgrade is determined.
END-of-APPD_UPGRADE
echo x - VERSION
sed 's/^X//' >VERSION << 'END-of-VERSION'
X3.42
END-of-VERSION
echo x - README.txt
sed 's/^X//' >README.txt << 'END-of-README.txt'
XContents:
X
X	README: this file
X	RUNBOOK:  a list of state descriptions, validations, and remedial actions
X
X
X	replicate.sh:  the all-singing, all-dancing HA (re)activator
X	this installs and sets up the HA function for a controller pair.
X
X	appdcontroller.sh: a file intended to be placed into /etc/init.d to control
X	the controller, watchdog, and assassin
X
X	appdcontroller-db.sh: a file intended to be placed into /etc/init.d to control
X	the mysql database
X
X	appdynamics-machine-agent.sh: a file to start the machine agent
X
X	assassin.sh:  a script run on a failed-over primary to kill the old primary
X
X	failover.sh:  a script run on a secondary to become the new primary
X
X	install-init.sh:  an installer for the appdcontroller.sh
X
X	uninstall-init.sh:  an uninstaller for the appdcontroller.sh
X
X	watchdog.sh:  run on a secondary to watch the primary and maybe failover
X
X	watchdog.settings.template:  copy this to watchdog.settings to override defaults
X
X	appdservice-root.sh:  a null privilege escalation wrapper
X
X	appdservice-pbrun.sh:  a privilege escalation wrapper around pbrun
X
X	appdservice.c:  a privilege escalation c program
X
X	numa.settings.template: a template file containing numa static node assignments
X
X	numa-patch-controller.sh:  a script to edit numa hooks into controller.sh
X
X	appdcontroller-db.sysconfig: source files for system configuration
X	appdcontroller.sysconfig
X	appdynamics-machine-agent.sysconfig
X
X	save_mysql_passwd.sh: a script used to obfuscate and save the mysql root password
X	getaccess.sh:  a script to extract the access key from a database to set
X			up monitoring
X
X	setmonitor.sh:  a script to patch various files to set up controller
X			monitoring
X
X	appdstatus.sh: a script to replace 'service appdcontroller status' on 
X		systemd machines
X
XInstallation notes:
XThis software is intended to connect the appdynamics controller into linux's
Xservice machinery.  This optionally includes a watchdog process running on the
Xsecondary HA node that will initiate a failover if a failure is detected in
Xthe primary controller or database.
X
XPermissions: 
X	If the controller is to be run as a non-root user, part of the 
Xinstallation cannot be directly automated, as it involves installing of a 
Xsystem service into /etc/init.d and ancillary directories using install-init.sh
X
XPrerequisites:
X--------------
X	1) Ssh must be installed in such a way that the user the controller is to 
Xbe run as has symmetrical passwordless ssh access.  This is done by generating 
Xa key pair on each node, and placing the other's public key into the appropriate
Xauthorized_keys file.  in detail, assuming user appduser, node1 and node2
X
X	on node1:
X
X	su - appduser
X	mkdir -p .ssh
X	ssh-keygen -t rsa -N "" -f .ssh/id_rsa
X	scp .ssh/id_rsa.pub node2:/tmp
X
X	on node2:
X
X	su - appduser
X	mkdir -p .ssh
X	ssh-keygen -t rsa -N "" -f .ssh/id_rsa
X	cat /tmp/id_rsa.pub >> .ssh/authorized_keys
X	scp .ssh/id_rsa.pub node1:/tmp
X
X	on node1:
X	cat /tmp/id_rsa.pub >> ~/.ssh/authorized_keys
X
XAll of the above commands may not be needed, and some of them may prompt for a
Xpassword.
X
XPermissions need to be as below:
X
X    chmod 700 .ssh
X    chmod 644 .ssh/id_rsa.pub
X    chmod 600 .ssh/id_rsa
X    chmod 600 .ssh/authorized_keys
X
XTo check if the passwordless ssh succeeds test it with the command below.
X
Xssh -oNumberOfPasswordPrompts=0 other_node "echo success"
X
X	2) reliable symmetrical reverse host lookup must be configured.  the best
Xway is to place the host names into each /etc/hosts file.   reverse DNS adds 
Xan additional point of failure.  
X		a) /etc/nsswitch.conf should have files placed before dns. example:
X			hosts:      files dns
X		b) /etc/hosts:
X			192.168.144.128 host1
X			192.168.144.137 host2
X
X	3) each machine must have the root and data directory writable by the 
Xappropriate appdynamics user:
X
X	ls -lad /opt/AppDynamics/Controller
Xdrwxr-xr-x. 18 appduser users    4096 Jan 26 18:18 /opt/AppDynamics/Controller
X
X	4) the primary controller should be installed as a standalone controller;
Xthe secondary should not be installed at all.
X
XInstallation:
X-------------
XOn the primary, unpack the shar file using bash into a directory HA under the 
Xcontroller root install subdirectory.
X
X	cd /opt/AppDynamics/Controller
X	mkdir -p HA
X	chmod +w *
X	bash HA.shar
X	
XMysql Password:
X---------------
Xnewer controllers remove the db/.rootpw file from the controller installation for
Xsecurity reasons, plaintext passwords in data files being a known vulnerability.
Xas the HA package requires frequent database access, it is impractical to prompt
Xfor the password every time the database is used.   accordingly, we decrypt the
Xpassword at each required access from a data file.  this data file must be written
Xby the save_mysql_passwd.sh script before running any component of the HA toolkit.
X
X	cd HA
X	./save_mysql_passwd.sh
X
X	this will prompt for the mysql root password
X
XActivation:
X-----------
XThe key script to replicate the primary database to the secondary, make all the
Xappropriate state changes, and activate the HA pair is the replicate.sh script.
Xit is run on an active controller.  Attempts to run it on a passive controller 
Xwill be rejected.  it has a few specialized options, but it has reasonable
Xdefaults and is extracts a lot of configuration information from the existing
Xinstallation.  the most simple usage is to activate a HA pair immediately.
Xrun the following as the same user as appdynamics is running as.
Xsince the controller is taken down, the command will prompt for a confirmation message.
X
X	./replicate.sh -s node2 -f -w -e proxy
X
Xwhen it has completed, the HA pair will be running and replicating.
XIf running as non-root, the command asks that some commands manually be run as
Xroot to complete the installation.
X
XIncremental Activation:
X-----------------------
XRuns of the replicate script without the -f option will perform an imperfect 
Xcopy of the primary controller to the secondary without taking the primary down.
XThis can be used to minimize the downtime necessary to do the initial 
Xinstallation.  if the data volume to replicate is large, several runs without
Xthe -f option would approach a perfect copy over a period of days.  the final
Xactivation with -f during a maintenance window would only copy those data filesi
Xthat differ from the last copy.
X
XPrivilege Escalation:
X---------------------
Xthe install-init.sh script is used to install the init scripts, and to set
Xup a controlled privilege escalation.  this can take the form of sudo settings,
Xor one of 3 flavors of /sbin/appdservice. run install-init.sh for usage.
X
XSudo:
X----
Xif sudo is used, the following commands need to be executed by the appd user,
Xand should be added to the sudoers file or LDAP resource.  note that they
Xneed to be executable without entering a password, so the NOPASSWD: flag
Xmust be used.
X
Xservice appdcontroller * 
Xservice appdcontroller-db *
Xservice appdynamics-machine-agent *
Xchkconfig appdcontroller * 
Xchkconfig appdcontroller-db *
Xchkconfig appdynamics-machine-agent *
Xupdate-rc.d appdcontroller * 
Xupdate-rc.d appdcontroller-db *
Xupdate-rc.d appdynamics-machine-agent *
X
XService Control:
X----------------
XAfter activation, the controller service and HA facility can be controlled 
Xusing the linux service command.  these options must be executed as root.
XThe default installation will automatically shut down the controller when
Xthe system is halted, and automatically start it at boot time.
X
X	service appdcontroller start
X	service appdcontroller stop
X
Xan additional service, appdcontroller-db, is used to manage the database.
Xa sensible dependency between the two services is implemented
X
XStatus:
X-------
XOnce installed as a service, the linux service utility can be run on either
Xnode to report the current state of the replication, background processes, and
Xthe controller itself.
X
X	service appdcontroller status
X
XWatchdog:
X---------
XIf enabled, this background process running on the secondary will monitor the
Xprimary controller and database, and if it detects a failure, will initiate a
Xfailover automatically.   The failure mode timings are defined in watchdog.sh.
XThe watchdog is only enabled if the file <controller root>/HA/WATCHDOG_ENABLE
Xexists. Removing the file causes the watchdog to exit.
X
Xto enable the watchdog, as root:
X	touch <controller root>/HA/WATCHDOG_ENABLE
X	chmod 777 <controller root>/HA/WATCHDOG_ENABLE
X	service appdcontroller start
X
Xrunning the replicate.sh script with the -w option at final activation will 
Xcreate the watchdog control file automatically.
X
XAssassin:
X---------
XAfter a failover, it is possible that the old primary may come online.  If this
Xoccurs, the load balancer may send load to the old primary.  To prevent this,
Xthe new primary continually polls the old primary and if it becomes accessible,
Xkills it and inhibits it from starting again.
X
XFailover:
X---------
XA manual failover can be triggered by running failover.sh on the secondary.
XThis will kill the watchdog and activate the database.  it will also try to
Xassassinate the old primary.
XThis only happens if replication is broken. if replication is good, we just
Xdeactivate the other appserver and activation this one, while leaving the db
Xup.  this case also does not fire up the assassin.
X
XLogging:
X--------
Xthe logs directory contains several status and progress logs of the various components.
X
XRemote controller monitoring
X----------------------------
XIf desired it is possible to have the controller's internal Java app agent report to 
Xanother controller. This is most often useful if two or more controllers have been
Xdeployed on-premises. Having them both report their health to a controller monitor
Xsimlifies the monitoring of them all as common health rules and notification policies are
Xmore easily re-used.
X
XAt least four pieces of information are needed to configure remote controller 
Xmonitoring:
X	- controller monitor's hostname
X	- controller monitor's port
X	- account name within controller monitor
X	- controller monitor's access key for that account
X	- [optional] application name to report under
X
XThe controller monitor's account names and access keys can be determined with:
X	cd <controller install dir>
X	echo "select access_key,name,id from account\G"| bin/controller.sh login-db
X	this has been put into a script:
X	./getaccess.sh -p password -h monitorhost:3388
X	this will output the access key.  you can specify account name.
X	see usage.
X
XYou can send a controller's app agent output to another controller with hostname
X"cmonitor", access_key "ac-ce-ss-key", account name "customer1", application name 
X'Prod HA pair' with:
X	./replicate.sh -s <secondary> -m url=http://cmonitor:8090,access_key="ac-ce-ss-key",account_name=customer1,app_name='Prod HA pair' -f
X
XMachine Agent
X-------------
XHaving a machine agent on both primary and secondary servers is a pre-requisite step 
Xto simple monitoring and warning of critical health issues affecting the stability
Xof the HA controller pair. Getting to this state involves:
X	1. downloading and installing the machine agent on both primary and
X	   secondary servers from download.appdynamics.com. For compatibility see 
X	   docs.appdynamics.com for your version of the controller.
X	   Ensure that the machine agent install directory is the *same* for both
X	   primary and secondary servers.
X	2. Ensure that the same version of the HA Toolkit is available on both
X	   primary and secondary servers. Use scp or replicate.sh -s <other> 
X	3. As root (re)run HA Toolkit install on both primary and secondary servers
X	   including '-a <agent install dir>' parameter. For example:
X		sudo ./install-init.sh -s -a /opt/appdyn/machine-agent/4.1.5.1
X	   if the machine agent was extracted into the parent of the appdynamics
X       controller, or the controller directory itself, the -a may be ommitted.
X	4. As regular AppD user (re)run replicate.sh .. -f to shutdown controller and
X	   configure all remaining files with an extra parameter referring to machine
X	   agent install directory. For example:
X	   	replicate.sh -s <secondary> -e https://proxy -a /opt/appdyn/machine-agent/3.9.0.0 -t 0 -z -f 
X
XIf a remote controller monitor has been configured, include that '-m' option in the 
Xreplicate.sh command to ensure the machine agents report there also. For example:
X		./replicate.sh -s <secondary> -m url=http://cmonitor:8090,access_key="ac-ce-ss-key",account_name=customer1,app_name='Prod HA pair' -a /opt/appdyn/machine-agent/3.9.0.0 -f
X	 5. please note that the machine agent will be run as the same user as
X        the mysql database.
X
XNUMA
X----
Xon a numa machine, it may be useful, for performance reasons,  to statically partition the machine to run mysqld on 
Xone set of nodes and the java appserver on another set of nodes.  this can be easily done by running numa-patch-controller.sh
Xfrom the HA directory, and copying the numa.settings.template to numa.settings.  edit numa.settings as needed.
X
XBest Practices:
X---------------
XIf possible, a dedicated network connection should be provisioned between the
XHA pair.  this set of interfaces should be the ones placed into the /etc/hosts
Xfiles, and used as the argument for the -s option to the replicate.sh script.
X
XBackups are best done by stopping the appdcontroller service on the secondary
Xand performing a file-level copy of the appdynamics directories.  these can
Xbe incremental or complete, depending on the reliability of your solution.
Xwhen the backup is done, simply start the service; replication will catch up
Xand guarantee the integrity of your data.
X
XA load balancer can probe http://<controller>:<port>/rest/serverstatus
Xto determine which of the two controllers is active. the active node will
Xreturn a HTTP 200.
X
Xshould it be necessary to have a hook in the failover process, for example to update 
Xa dynamics DNS service or to notify a load balancer or proxy, the failover.sh script 
Xis the place to add code.
X
XVersion and Copyright
X---------------------
X$Id: README.txt 3.8 2017-01-11 03:36:03 cmayer Exp $
X
X Copyright 2016 AppDynamics, Inc
X
X   Licensed under the Apache License, Version 2.0 (the "License");
X   you may not use this file except in compliance with the License.
X   You may obtain a copy of the License at
X
X       http://www.apache.org/licenses/LICENSE-2.0
X
X  Unless required by applicable law or agreed to in writing, software
X  distributed under the License is distributed on an "AS IS" BASIS,
X  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X  See the License for the specific language governing permissions and
X  limitations under the License.
END-of-README.txt
echo x - RUNBOOK
sed 's/^X//' >RUNBOOK << 'END-of-RUNBOOK'
XThe HA environment can be in several states, and it is desireable to place 
Xthe systems into the fully replicated state as soon as possible. here are
Xthe possible states, how to identify the state, and the corresponding 
Xprocedure to repair the condition.
X
X-----------
XNOT PRESENT:
X	the HA package has not been installed on the primary machine.
X
Xdiagnosis:
X	the HA directory is absent from the controller directory.
X
Xto fix:
X	cd <controller root> ; mkdir HA ; cd HA ; bash <path>/HA.shar
X	then follow the steps for UNINSTALLED
X
X-----------
XUNINSTALLED:
X	the package is present in the controller HA directory, but the
X	services have not been installed.
X
Xdiagnosis:
X	service appdcontroller status shows appdcontroller service not found
X
Xto fix:
X	cd <controller root>/HA
X	become root
X	./install-init.sh [-c | -s]
X
X------------
XNO HOSTS:
X	the secondary machine does not have a resolvable host name
X
Xdiagnosis:
X	ping <secondary> returns unknown host
X
Xto fix:
X	add the primary and secondary host name into both machines /etc/hosts files
X	
X------------
XNO SSH:
X	the appdynamics user does not have no-password ssh access between
X	machines.
X
Xdiagnosis:
X	ssh <secondary> date prompts for a password
X
Xto fix:
X	in the below, you will be prompted for passwords and confirmations
X	ssh-keygen -P "" -f ~/.ssh/id_rsa -t rsa
X	ssh <secondary> ssh-keygen -P "''" -f ~/.ssh/id_rsa -t rsa
X	scp ~/.ssh/id_rsa.pub <secondary>:.ssh/authorized_keys
X	scp <secondary>:.ssh/id_rsa.pub ~/.ssh/authorized_keys
X
X------------
XUNREPLICATED: the HA package has been installed on the primary controller,
Xbut the package has not been activated.
X
Xdiagnosis:
X	service appdcontroller-db status shows "HA not installed" 
X
Xto fix:
X	cd <controller root>/HA
X	./replicate -s <secondary>
X	<become root on secondary>
X		cd <controller root>/HA
X		./install-init [-c | -s]
X		exit
X	<back on primary>
X	./replicate -s <secondary> -e <vip>	-f
X		confirm
X
X----------
XDISCONNECTED:
XReplication communication is being blocked, HA has been installed and activated,
Xbut a firewall is preventing access to replication communications.
X
Xdiagnosis:
X	service appdcontroller-db status shows 
X		"Slave_IO_State: Connecting to master"
X		"Seconds_Behind_Master: NULL"
X
Xto fix:
X	disable the firewall for port 3388
X	brute force as root:  iptables -F
X
X----------
XREPLICATED, WATCHDOG RUNNING: 
Xthe HA package is running fully replicated, and the primary node is serving
Xagents with metric storage, and the UI is responsive.  the secondary is
Xmonitoring the primary appserver with a watchdog process.
X
Xdiagnosis:
X	service appdcontroller status on the primary reports:
X	db running as <user> - active
X	primary
X		Slave_IO_State: Waiting for master to send event
X	controller running
X
X	service appdcontroller status on the secondary reports:
X	db running as <user> - passive
X	secondary
X		Slave_IO_State: Waiting for master to send event
X	watchdog running
X
Xto fix:
X	nothing to fix
X
X----------
XREPLICATED, WATCHDOG NOT RUNNING: 
Xthe HA package is running fully replicated, and the primary node is serving
Xagents with metric storage, and the UI is responsive.  the secondary is
Xnot monitoring the primary appserver with a watchdog process.
X
Xdiagnosis:
X	service appdcontroller status on the primary reports:
X	db running as <user> - active
X	primary
X		Slave_IO_State: Waiting for master to send event
X	controller running
X
X	service appdcontroller status on the secondary reports:
X	db running as <user> - passive
X	secondary
X		Slave_IO_State: Waiting for master to send event
X	watchdog not running
X
Xto fix:
X	on the secondary
X	cd <controller root>/HA
X	touch WATCHDOG_ENABLE
X	/sbin/appdservice appdcontroller start
X
X---------
XFAILED OVER, old primary broken
XThe current active node has become active because of a failover.  the prior
Xactive node's database is inaccessible.  the assassin is running on the new
Xactive node to mark the old active node passive once it comes up.
X
Xdiagnosis:
X	service appdcontroller status on the primary reports:
X	db running as <user> - active
X	secondary
X		Slave_IO_State:
X		Seconds_Behind_Master: NULL
X	assassin running
X
Xto fix:
X	replicate from the new active node to the old active node using
X	the formula for UNREPLICATED
X
X------------
XFAILED OVER, watchdog running
XThe current active node has become active because of a failover.  the prior
Xactive node database is still intact, and replication is valid. the new
Xsecondary node has a watchdog running.  this is identical to the REPLICATED,
XWATCHDOG_RUNNING state.
X
Xdiagnosis:
X	service appdcontroller status on the original primary reports:
X	db running as <user> - passive
X		Slave_IO_State: Waiting for master to send event
X	secondary
X	watchdog running
X
X	service appdcontroller status on the original secondary reports:
X	db running as <user> - active
X	primary
X		Slave_IO_State: Waiting for master to send event
X	controller running
X
Xto-fix:
X	no need to fix anything.  should it be desired to make the original node
X	the active node:
X
X	on the original primary,
X	cd <controller root>/HA
X	./failover.sh
X
X-------------
XPASSIVE DOWN
Xthis is a state deliberately caused to perform a consistent backup of the
Xdatabase.   it is initiated on the passive node by running:
X/sbin/appdservice appdcontroller-db stop
X
Xdiagnosis:
X	/sbin/appdservice appdcontroller-db status on the passive node reports:
X	db not running
X
Xto-fix:
X	on the passive controller,
X	/sbin/appdservice appdcontroller start
X
X-------------
XERROR: bash: get_mysql_passwd: unable to get MySQL root passwd. As appdyn user run HA/save_mysql_passwd.sh interactively and try again.
X
Xdiagnosis:
X	A stored MySQL root password, obfuscated or clear has not been found. Storing the 
X	MySQL root password to disk is a requirement for the HA Toolkit running with
X	service which in turn needs privilege escalation eg /sbin/appdservice or sudo or pbrun
X
Xto-fix:
X	> on the server as the intended AppD user (here "appdyn"):
X	HA/save_mysql_passwd.sh 
X	> this will persist the password after obfuscating it
X
XVersion and Copyright:
X----------------------
X$Id: RUNBOOK 3.0 2016-08-04 03:09:49 cmayer Exp $
X
X Copyright 2016 AppDynamics, Inc
X
X   Licensed under the Apache License, Version 2.0 (the "License");
X   you may not use this file except in compliance with the License.
X   You may obtain a copy of the License at
X
X       http://www.apache.org/licenses/LICENSE-2.0
X
X   Unless required by applicable law or agreed to in writing, software
X   distributed under the License is distributed on an "AS IS" BASIS,
X   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X   See the License for the specific language governing permissions and
X   limitations under the License.
END-of-RUNBOOK
echo x - UPGRADING
sed 's/^X//' >UPGRADING << 'END-of-UPGRADING'
X$Id: UPGRADING 3.35 2018-07-06 22:51:53 cmayer Exp $
X
XThe HA package is installed in the HA subdirectory of the controller
Xroot.  This can be determined from examining the running executable path
Xof the mysql process.   In the following description, this directory,
Xwhich has the bin, logs, db, and appserver subdirectories, will be referred
Xto as /controller_root. The appdynamics service account will be denoted by
Xappdyn.
X
XUpgrading the HA toolkit usually does not require a re-replicate or restart of the application or database.
X
X1) become the appsynamics user and cd to the controller_root directory
X   all the following commands are performed from the /controller_root.
X
X	su - appdyn
X	cd /controller_root
X
X2) save the state of the HA configuration.  make a recursive copy of the 
X   HA directory and capture /etc/sysconfig/appd* and /etc/init.d/appd*. 
X   the latter 2 sets of files may not be accessible to the appdynamics user, 
X   depending on permissions.
X
X	cd /controller_root
X	cp -r HA HA.save
X	mkdir -p HA.save/init
X	mkdir -p HA.save/sysconfig
X	cp /etc/init.d/appd* HA.save/init
X	cp /etc/sysconfig/appd* HA.save/sysconfig
X
X3) retrieve the most recent version of the HA.shar file
X   https://github.com/Appdynamics/HA-toolkit/releases/latest
X   currently, there is no direct link to the latest HA.shar, due
X   to limitations in github.
X 
X4) copy the downloaded HA.shar to the HA directory
X
X	cp /tmp/HA.shar /controller_root/HA
X
X5) unpack it using bash HA.shar
X
X  	bash HA.shar
X 
X6) inspect the /etc/sysconfig or /etc/default versions of
X   the *.sysconfig files to see if any midifications have been made to them.
X   if so, merge the differences to the sysconfig files in this directory.
X   edit any settings you might need in the sysconfig files.
X
X	for i in appdcontroller appdcontroller-db appdynamics-machine-agent ; do
X		diff HA/$i.sysconfig HA.save/sysconfig/$i
X	done
X
X7) inspect the watchdog.settings.template file to see if any additions have
X   been made, and merge them into your watchdog.settings file
X
X	diff HA/watchdog.settings.template HA.save/watchdog.settings
X
X8) recursively copy the HA directory to the secondary HA directory
X
X	scp -r HA secondary_host:/controller_root
X
X9) if not using the restricted NOROOT function, 
X   run HA/install-init.sh with the appropriate options as root on the primary
X	if using sudo to do privilegs escalation:
X
X	sudo /controller_root/HA/install-init.sh -s	
X
X   if using the c wrapper:
X
X	sudo /controller_root/HA/install-init.sh -c	
X
X10) run HA/install-init.sh on the secondary in the same way
X
X11) restart the watchdog on the secondary.
X
X	sudo service appdcontroller stop
X	sudo service appdcontroller start
X
X12) verify that the appdynamics processes and HA installation is functional:
X	run the following on both nodes. if it shows healthy operation, the
X    /controller_root/HA.save directory can be removed.
X
X	/controller_root/HA/appdstatus.sh
X   
XFAIL CASE) should the installation go poorly, the HA upgrade can be backed
X   out by removing the HA directory, and renaming /controller_root/HA.save
X   as /controller_root/HA.  to replace the sysconfig and init files, the
X   old install-init.sh should be run.  validate that the /etc/init.d and 
X   /etc/sysconfig files saved in HA.save in step 1 are identical.
X 
END-of-UPGRADING
echo x - Release_Notes
sed 's/^X//' >Release_Notes << 'END-of-Release_Notes'
X
X Copyright 2016 AppDynamics, Inc
X
X   Licensed under the Apache License, Version 2.0 (the "License");
X   you may not use this file except in compliance with the License.
X   You may obtain a copy of the License at
X
X       http://www.apache.org/licenses/LICENSE-2.0
X
X  Unless required by applicable law or agreed to in writing, software
X   distributed under the License is distributed on an "AS IS" BASIS,
X   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X   See the License for the specific language governing permissions and
X   limitations under the License.
X
X--------------------------------------------
X
XRelease notes for version 3.0
X
XIn addition to bug fixes, the package has been substantially enhanced and 
Xre-written for enhanced portability, security, performance and maintainability.
X
XThe following new functionality is present:
X
X1) replicate optionally can use of non-encrypted rsync.  in environments where 
Xa VPN or a dedicated network exists between primary and secondary controllers, 
Xreplication can be noticably faster.  this is enabled by using the -U option.
X
X2) mysql replication can use SSL encryption.  a pair of signed certificates 
Xand keys is exchanged between the 2 mysql instances.  after this negotiation,
Xall communication for mysql replication is encrypted.
X
X3) mysql replication compression is enabled by default
X
X4) the secondary no longer places replicated traffic in it's bin-logs.  this
Xgreatly decreases disk usage on the secondary
X
X5) scripts and support files are added for NUMA segregation
X
X6) the machine agent is can run as non-root, and automatically is configured
Xwith additional monitors to surface custom mysql and disk metrics. also,
Xthe machine agent is automatically detected if it is in the controller root
Xdirectory or it's parent.  we use the controller JVM, so there is no need
Xto install anything other than the Java-less zip file of the machine agent.
X
X7) configuration of an external monitoring host is simplified
X
X8) support for controller versions greater than 4.2.0, which removed the
Xplaintext password file for mysql root.  we have 2 distinct solutions to
Xthis:  recreate the db/.rootpw file, or run the save_mysql_passwd.sh script
Xwhich obfuscates the password and save that, unscrambling it whenever it is
Xneeded
X
X9) more extensive logging of the replicate process
X
X10) init script configuration is now done via sysconfig files installed in
X/etc/sysconfig (for redhat) or /etc/default (for debian).
X
X11) greater compatibility with systemd.  newer linux distributions have a
Xdifferent implementation of boot time init script handling, which does not
Xsupport the clean execution of the service status verb.  this is deprecated
Xon these systems, and a new script,  HA/appdstatus.sh, is supplied to replace 
Xthis functionality.
X
XSignificant bug fixes in this release:
X
X1) files of size less than 1M are checksummed to prevent rsync missing them
Xif changes to the file did not cause it to grow
X
X2) the database health check now recovers if one of the steps timed out.
X
X3) failover can not longer oscillate between two machines
X
X4) the secondary controller now waits until the relay logs have been executed
Xbefore starting the new appserver on failover.   although this can take quite
Xsome time, it prevents database inconsistencies.
X
X------------------------------------
XRelease notes for version 3.0.1
X
Xthis is a minor bugfix and enhancement release.
X
X1) added support for fairly ugly root mysql passwords.  whitespace characters
Xare not supported, but punctuation is ok, plus $*()...
X
X2) failover is a bit smarter about breaking replication.   all things being
Xotherwise ok, if the old primary has been up at least 1 hour, we don't break
Xreplication
X
X3) in the case of a persistent replication break, if we KNOW that the database
Xis not damaged on each end, we can run replicate -E to restore the slave to
Xoperation.
X
X4) the machine agent is started with nodename set
X
X5) install_init.sh changes ownership of the machine agent to RUNUSER
X
X6) Documentation on machine agent startup additions
X
X--------------------------------------
XRelease notes for version 3.1
X
Xthis is a bugfix version
X
X1) some customer systems had paths with spaces in them.  this broke the machine
Xagent directory detection.  this code was pulled into a library function.
X
X2) the watchdog.sh did no logging due to a coding error
X
X3) numa machines with numa.settings need to disable the transparent huge page
Xfacility.   this is done in the appdcontroller-db script.
X
X4) some older systems xmllint does not support the --xpath option.  this is
Xavoided by using the universally available, but uglier, --shell option.
X
X5) a better message is emitted when no password is available
X
X6) README.md, a source hygiene document, was added
X
X--------------------------------------
XRelease notes for version 3.2
X
Xthis is a bugfix version
X
X1) backwards compatibility with 3.9 series controllers enhanced
X
X2) a new operations mode, triggered by the presence of HA/SHUTDOWN_FAILOVER,
X   will automatically and immediately trigger the secondary to take over
X   without breaking replication.   this is intended for external orderly
X   shutdown handling of the HA pair as might occur on the azure platform
X   support for this is present in appdcontroller init script and a new option
X   to the failover.sh script
X
X3) install_init.sh had an error when detecting if the controller uses ports
X   less than 1024
X
X4) the failover.sh script waited forever if there was a database replication 
X   failure
X
X5) running scripts outside the HA subdirectory printed a spurious error message
X   from lib/log.sh
X
X6) replicate.sh now plugs in a tier name into the controller_info.xml for the
X   machine agent.
X
X7) mysqlclient.sh now starts up faster for interactive use. an additional 
X   option has been added that makes it compatible to controller.sh login-db 
X   if line-oriented output is desired.
X
X8) the HA.shar file automatically creates the HA directory if needed, and cd's
X   into the HA directory if it is not already there.  it should be unpacked as 
X   before, but this behavior is backward compatible and prevents problems.
X
X9) the init scripts were further rationalized with common code removal,
X   fixing a problem with memory size complaints and adding automatic setting
X   of limits
X
X10) the logging functions had a bug where the existence of /dev/tty was used
X    instead of running /usr/bin/tty to test if tty output was possible
X
X--------------------------------------
XRelease notes for version 3.3
X
Xthis version adds limited function HA for systems without root escalation
Xor service installation. this is triggered by the existence of HA/NOROOT.
Xthis functionality is currently undocumented, and failover has had only 
Xlimited testing.
X
X1) a new file, appdservice-noroot.sh, subsumes all the function in the
X   appdcontroller, appdcontroller-db and appdynamics-machine-agent init
X   scripts.
X
X2) replicate.sh now detects if a file NOROOT is in the HA subdirectory, and
X   does not check for init script installation or escalation methods
X
X3) lib/ha.sh modifies the service functions to use the appdservice-noroot.sh
X   script instead of using the /sbin/appdservice or sudo code if HA/NOROOT
X   exists
X
X4) the mysql monitor installed in the machine agent now searches for a controller
X   root directory in /opt/AppDynamics/Controller and /opt/appdynamics/controller
X   if it cannot find a definition in an appdynamics-machine-agent.sysconfig files.
X   this is a likely case if NOROOT is installed.
X
X--------------------------------------
XRelease notes for version 3.4
X
X1) the machine agent init script now kills child processes of the machine
X   agent.  this avoids leaving orphan monitor scripts running.
X
X2) added the ability to trace the execution of the init scripts by putting
X   a file INITDEBUG into the HA directory.  it creates a log file of the
X   form /tmp/service_name.out where service_name is one of appdcontroller,
X   appdcontroller-db, or appdynamics-machine-agent.
X
X3) a bug in the memory calculation printed a spurious error message.
X
X4) the save_mysql_password script erroneously tried to chmod the obfuscated
X   password file.
X
X5) the machine agent disk monitor now works with both 12 and 14 field
X   iostat -x output
X
X6) some additional documentation is added listing the commands that are
X   added to the sudoers resource.
X
X7) the sysconfig files are now templates.  any custom modifications are
X   preserved if a file exists of the form service.sysconfig
X
X8) an informative message is printed when non-root user runs install-init.sh.
X
X--------------------------------------
XRelease notes for version 3.5
X
X1) the default log expiration time is changed from 8 days to 3 days.  the
X   amount of disk space saved is significant, and the use case for keeping
X   replication stopped for 8 days is questionable at the very least.
X
X2) the chkconfig and update_rc_d functions are not needed in the sudoers
X   file.  they are not invoked by the HA package as non-root.
X
X3) numa-patch-controller.sh gets run automatically when replicate -f is run.
X
X4) when the -m option is explicitly specified, it writes out the monitoring
X   definition to the file MONITOR.  Thenceforth, if this file exists, it sets 
X   the default monitoring information for the controller and machine agent.
X
X5) the DBOPLIMIT, which controlls the dbopfail test in the watchdog, is
X   set to disable the test by default.  it should be enabled for systems
X   with SAN attached disk.
X
X6) appdynamics-machine-agent.sh now works on older linuxes that don't support
X   ps -h.
X
X7) simplified logging by eliminating the seperate SQL_ERROR path.
X
X--------------------------------------
XRelease notes for version 3.5.1
X
X1) Catch case when newly compiled /sbin/appdservice does not overwrite incumbent
X   by removing old version first.
X
X--------------------------------------
XRelease notes for version 3.5.2
X
X1) the pesky messages about /root/.forever when trying to stop the appdcontroller
X   service is now gone.  it was a coding error.
X
X--------------------------------------
XRelease notes for version 3.5.3
X
X1) the dbopfail watchdog test is suspect.  it is disabled by default both
X   in the watchdog.sh and watchdog.settings.template
X
X--------------------------------------
XRelease notes for version 3.6
X
X1) the reporting service and events services on the local box were not being
X   properly started and stopped by the init script, especially if the script
X   in bin/controller.sh was also being used to manage these services.
X
X--------------------------------------
XRelease notes for version 3.7
X
X1) the watchdog.settings.template has an extensive comment concerning the
X   reasons for when the dbop test should be enabled, and disables the test
X   by default
X
X2) lib/log.sh now does the password masking using unbuffered sed.  this makes
X   the output of replicate.sh in the log file more interactive.
X
X3) a typo in appdynamics-machine-agent.sh rarely would cause the machine agent
X   to not start.
X
X4) the machine agent service status now is properly factored out of 
X   appdcontroller.sh
X
X5) pbrun is now probed for in /usr/local/bin and /usr/bin
X
X6) if the events directory is renamed, the init script makes no attempt
X   to start or stop the events service.
X
X7) a typo prevented explicit huge pages from being allocated
X
X8) numa status is reported by appdstatus.sh on numa machines
X
X9) a syntax change in replicate.sh makes the log slightly less noisy
X
X10) install-init.sh had a syntax error that prevented pbrun from being properly
X    detected
X
X11) replicate.sh had a bug that prevented running as root
X
X12) the format for numa.settings.template allows better numa node handling
X    by explicitly creating a list of numa nodes that can be interrogated
X    in scripts.
X
X13) install-init and replicate.sh now complain when there is ambiguity in 
X    finding the correct machine agent.  specify -a to force a specific instance.
X
X14) several minor messages were eliminated or corrected.
X
X15) code to resolve absolute paths now use readlink -e
X
X16) appdservice-noroot.sh was updated to reflect common usage of APPD_ROOT
X
X--------------------------------------
XRelease notes for version 3.7.1
X
X1) fixed small bug preventing replicate.sh from starting when controller run as root
X
X2) added datetime to end of incremental replicate to simplify determining time taken
X
X--------------------------------------
XRelease notes for version 3.8
X
X1) refactor of setting the monitoring controller to better support upgrades and
X   appdynamics version 4.3.   the code to was pulled out into a new program,
X   setmonitor.sh, which is invoked by replicate.sh at final replicate time.
X
X2) appdynamics 4.3 removes network access to the mysql root user.  replicate
X   now connects to the mysql instance on the secondary via ssh.
X
X3) the numa.settings template now has defaults to membind instead of preferred.
X
X4) the machine agent init script now removes the log in /tmp before appending
X   to it when HA/INITDEBUG exists.
X
X5) if a installation must activate a custom proxy or some other action after
X   failover, creating an executable file named failover_hook.sh in the HA
X   directory will cause that file to be run after each failover on the new
X   primary.
X
X--------------------------------------
XRelease notes for version 3.9
X
X1) added a bit more flesh to the NOROOT option: INITDEBUG works, sysconfig
X   files are read.
X
X2) replace xmllint with xmlstarlet throughout.  much more flexible, as it
X   abstracts out both edit and extract of xml documents.
X
X3) cleaner implementation in lib/sql.sh to support controller 4.3; the
X   remote sql connection is no longer supported.  now we use ssh.
X
X4) fixes to the abstraction for setmonitor.sh and replicate.
X
X5) watchdog.sh now does a mysql ping using ssh for 4.3.
X
X6) watchdog.sh is more verbose when getting curl errors
X   also, connection resets are treated as down.
X
X--------------------------------------
XRelease notes for version 3.10
X
X1) a tremendous amount of code movement to lib from places where there was duplication.
X   essentially, anywhere where a function was defined twice or a variable was defined
X   was pulled out into a single place.   this will make maintenance easier.  this is
X   mostly visible in the creation of lib/status.sh
X
X2) some variable name rationalization has been carried out.  pidfiles are suffixed _PIDFILE
X   consistently, etc.
X
X3) appdservice-noroot.sh had a serious bug in version 3.9 that prevented it from reading 
X   the sysconfig files.
X
X4) the package now uses lib/conf.sh to perform almost all config file editing.
X
X5) setmonitor.sh had a real problem with arguments (app_name, etc) that contained spaces 
X   or equal signs.
X
X6) we now require the installation of xmlstarlet.
X
X7) the generated application name had a spurious trailing colon.
X
X8) HA now works with the secure credential store in 4.3.
X
X--------------------------------------
XRelease notes for version 3.11
X
X1) the assassin pid file was not being handled correctly due to a name
X   confusion.  to prevent this, pidfiles are now named consistently
X
X2) the controller_info_unset function was missing.
X
X3) support for parallel replication using mysql 5.7
X   this is enabled with the -7 option.  a future version will automatically
X   detect mysql 5.7.
X
X4) support for mysql 5.7's password obfuscator, which uses mysql_config_editor.
X
X--------------------------------------
XRelease notes for version 3.12
X
X1) pervasively added setting of PATH to ever user-invoked script to prevent
X   running the wrong utility.   a number of sites had customer installations
X   of variant, non-linux utilites that broke the HA package.
X
X2) http_proxy environment variables can badly break the watchdog.  we suppress
X   this functionality for curl.
X
X3) the watchdog was not started by appdservice-noroot.sh.
X
X4) install-init.sh now produces a log file.
X
X5) the numa.settings.template now has the '=' character in the numactl syntax.
X
X6) a subtle timing bug caused the watchdog to not always start: the parent
X   ssh dying before the child could run nohup sends a sighup, which killed
X   the watchdog.  this race is inherent in the way ssh and nohup work.
X
X7) duplicate assassins and watchdogs were possible.  this is now prevented.
X
X--------------------------------------
XRelease notes for version 3.13
X
X1) removed dependency on xmlstarlet, as it has incompatible versions in the
X   field and cannot be relied on to work.
X
X--------------------------------------
XRelease notes for version 3.14 (pi)
X
X1) install-init.sh now fails if HA/NOROOT exists.
X
X2) a bug in appdservice-noroot.sh prevented it from running
X
X3) the INITDEBUG option now creates log files owned by runuser.
X
X4) the replication slave user now has least privilege.
X
X5) the wildcard option in replicate.sh now works again.
X
X--------------------------------------
XRelease notes for version 3.14.1 (more pi)
X
X1) wildcard really working now.
X
X--------------------------------------
XRelease notes for version 3.15
X
X1) complete disable of dbop test in watchdog.sh
X
X
X--------------------------------------
XRelease notes for version 3.16
X
X1) a number of hard to diagnose HA failures were traced to a setting in the
X   db.cnf.  sync_binlog=1 prevents the replication log and the innodb logs
X   from being seen as inconsistent should the database crash.
X
X2) the slave_pending_jobs_size_max setting needs to be there to allow the
X   replication slave to run in parallel.
X
X3) machine agent status is now reported by the controller init script
X
X4) added options supporting mysql 5.7 parallel replication.
X
X5) setmonitor.sh had an error if there was no crededential password
X
X6) quoting problems arose in lib/conf.sh under certain conditions
X   this required a modification in the fundamental runuser functions
X   in lib/init.sh and lib/runuser.sh.
X
X--------------------------------------
XRelease notes for version 3.17
X
X1) more fragility with quoting has been eliminated.
X
X2) the database logs are now saved and recreated whenever replicate is
X   finalized.  this means that database logs will not be cluttered with
X   historical information.
X
X3) gtid mode is now enabled for the 5.7 databases.
X
X4) setmonitor.sh now allows setting tier name
X
X--------------------------------------
XRelease notes for version 3.18
X
X1) lib/conf.sh did not correctly delete properties in controller_info.xml;
X   this caused the emission of mailformed xml files, and the controllers
X   were not monitored properly. this was introduced in 3.14
X
X2) replicate now sets the default path for the mysql socket into the
X   data directory.  this fixes a problem with controllers that do not
X   start sometimes.
X
X3) setmonitor.sh did not set the primary node name.  if the original
X   controller-info.xml did not have a node-name in it, the secondary
X   appserver would not be monitored on failover.
X
X--------------------------------------
XRelease notes for version 3.19
X
X1) the appdcontroller-db.sh init script did not properly start the
X   database sometimes due to a hanging ex script.
X
X2) watchdog.sh did not include the lib/status.sh script, so an alias failed.
X
X--------------------------------------
XRelease notes for version 3.20
X
X1) added watchdog.pid to the replicate excludes.   this prevents a rare
X   startup problem
X2) fixed a longstanding bug in the watchdog that caused spurious failovers.
X3) adjusted the disk_stat.sh monitor to report KB/sec and greatly increased
X   the reporting frequency.   this makes the min and max settings useful at
X   a much higher measurement overhead,  this still will use less than a tenth
X   of a core.
X4) added prototype code for hot-sync replicate.  not currently recommended
X   or supported.  needs percona xtrabackup and perl-DBD-mysql
X
X--------------------------------------
XRelease notes for version 3.21
X
X1) Added check within replicate.sh and failover.sh for broken 2-way passwordless 
X   ssh between the two HA servers. This helps avoid complex failure cases 
X   introduced by server ssh administration changes.
X
X--------------------------------------
XRelease notes for version 3.22
X
X1) added APPD_UPGRADE to document upgrading the controllers in an HA pair
X
X
X--------------------------------------
XRelease notes for version 3.23
X
X1) the APPD_UPGRADE document was greatly expanded
X2) a rare replication bug is now prevented by validating .frm and .par files
X3) bg_runuser sometimes did not reliably start the watchdog
X
X--------------------------------------
XRelease notes for version 3.24
X
X1) the ssh validation is broken.  It is bypassed until fixed.
X
X--------------------------------------
XRelease notes for version 3.25
X
X1) the java installation is not in the controller tree if the platform admin
X   app was used to deploy the installation.   intelligence now locates the
X   java accordingly. in addition, the database error log was moved.
X
X2) the failover.sh formerly logged the start of the secondary service in
X   a confusing manner when starting the watchdog.   this is now quiet, to
X   the failover.log only.
X
X3) connected with the fixes for java platform admin. the controller is located
X   with a more general regexp in pgrep that will match all controllers.
X
X4) the MONITOR files is copied to the secondary by the setmonitor.sh script
X
X5) NOROOT is removed by a successful run of install-init.sh
X
X6) we now announce the HA version when unpacking the shar file
X
X7) the watchdog.settings file is now being read for overrides of the
X   default settings.
X
X8) a long standing syntax error in the pbrun wrapper has been fixed.
X
XKNOWN BUGS:
X9) the automatic propagation of the monitoring to the machine agent 
X   is not reliable.  do this manually.
X
X--------------------------------------
XRelease notes for version 3.26
X
X1) the #!/bin/bash was inadvertently removed from replicate.sh
X
X2) a coding error caused replicate.sh to fail when log files do not exist 
X   on the secondary.
X
X3) some minor doc fixes
X
X--------------------------------------
XRelease notes for version 3.27
X
X1) Fixed assorted logging issues to more reliably get messages when things go wrong.
X
X2) Prevent occasional ssh hangs between nodes when new hostnames are used. All
X   names and aliases within /etc/hosts are added to ~/.ssh/known_hosts and kept 
X   up to date.
X
X3) Prevent occasional MySQL replication failure due to permissions failure when
X   new hostnames or aliases are added to /etc/hosts. All aliases for current
X   hostname are permitted to connect to MySQL on the other host for replication only.
X
X4) Fixed bug in controller-info.xml update.
X
X5) Automatic backup of all HA Toolkit modified files to same directory 
X   with extension ".$(date +%s)".
X
X6) Added option to mysqlclient.sh "-r" to allow the raw pass-through of MySQL client
X   command line options - helpful for raw/silent output with mysqlclient.sh -r -s.
X
X7) Fixed bug in Glassfish Java agent monitor config when no -m (monitor) args
X   supplied. 
X
X8) Warn at Glassfish startup and shutdown if being run by userid that is not
X   the same as expected by MySQL. This helps to fix issues when root is accidentally
X   used to start or stop Glassfish which then prevents successful startup by
X   subsequent non-root userid. Instructions are provided on how to fix the issue
X   if it is detected.
X
X--------------------------------------
XRelease notes for version 3.27.1
X
X1) catch out of date awk that silently ignores character classes (usually Debian issue)
X
X2) allow spaces within MySQL root password
X
X3) fix bug in "service appdynamics-machine-agent stop" that sometimes killed a running ./replicate.sh
X
X--------------------------------------
XRelease notes for version 3.27.2
X
X1) patch release to prevent ssh checks from failing replicate if /etc/hosts does
X   not contain any host information
X
X2) remove references to symbolic links /dev/stdout or /dev/stderr and avoid errors
X   with some sudo use cases
X
X--------------------------------------
XRelease notes for version 3.27.3
X
X1) check for bad file ownership caused annoying awk error '[:space:]' on some systems
X
X--------------------------------------
XRelease notes for version 3.27.4
X
X1) patch release to fix broken wildcard -W option
X
X2) extra sanity checks to catch /etc/hosts errors
X
X--------------------------------------
XRelease notes for version 3.27.5
X
X1) patch release to ensure text for fatal errors get logged
X
X--------------------------------------
XRelease notes for version 3.27.6
X
X1) patch release to ensure install-init.sh logs appear
X
X--------------------------------------
XRelease notes for version 3.28
X
X1) if a installation must deactivate a custom proxy or some other action before
X   failover, creating an executable file named failover_pre_hook.sh in the HA
X   directory will cause that file to be run after before failover on the new
X   primary. 
X
X--------------------------------------
XRelease notes for version 3.28.1
X
X1) fixed missing LOGFNAME for noroot use case
X
X--------------------------------------
XRelease notes for version 3.28.2
X
X1) fixed missing application name for internal monitoring when there is a space in the application name
X
X2) fixed setting appdynamics.controller.services.hostName and appdynamics.controller.services.port to external VIP host and port respectively
X
X--------------------------------------
XRelease notes for version 3.28.3
X
X1) fixed minor bug that kept adding rows to /etc/pam.d/common-session
X
X2) removed '-l' option to su that does full login setup for process that conflicted with environments with stty in startup scripts or fell foul of RH 7.4 security preventing functional users from doing su -l during ssh call.
X
X--------------------------------------
XRelease notes for version 3.28.4
X
X1. fixed ability of Toolkit to interoperate with MySQL v5.7 native password storage. 
X   Enable all stored password handling as usual with cd HA; ./save_mysql_passwd.sh
X
X2. patched db.cnf config updater to cope with missing newlines - sometimes emitted by EC
X
X3. excluded db/mysql.pid from replication to allow reliable MySQL shutdown on secondary
X
X--------------------------------------
XRelease notes for version 3.28.5
X
X1. patch for https://github.com/Appdynamics/HA-toolkit/issues/77 which wrongly failed 
X   replicate finalise if same hostname alias existed in different domain names
X
X--------------------------------------
XRelease notes for version 3.28.6
X
X1. trivial add of APPD_UPGRADE file to distribution artifact
X
X--------------------------------------
XRelease notes for version 3.28.7
X
X1. added support for the doublewrite file that can be configured to optional
Xdatabase implementations.
X
X--------------------------------------
XRelease notes for version 3.29
X
X1. added an interlock so that multiple replicate instances cannot run
X
X2. made the ibd file checksum on large files a bit stronger.  if the first 
X   block is not identical, prune the file.
X
X3. suppressed a misleading noisy diagnostic
X
X--------------------------------------
XRelease notes for version 3.29.1
X
X1. added a check to abort on undecoded arguments on command line.
X
X--------------------------------------
XRelease notes for version 3.30
X
X1. with mysql 5.7, password warnings broke the get function in lib/status.sh
X   the init scripts should now work as designed.  after installing mysql 5.7,
X   running save_mysql_password will eliminate the warnings.
X
X2. when running replicate -j, the secondary license file is no longer clobbered
X
X3. replicate -j will now update the secondary controller-info.xml with the right
X   node-name.
X
X4. replicate -j now deletes the generated and osgi-cache directories
X
X5. more hardening for tcsh login shell
X
X--------------------------------------
XRelease notes for version 3.31
X
X1) a rare bug prevented files from being properly pruned on the secondary.  this caused
X   the secondary database to not start due to space id collisions.
X
X2) failover.sh in some cases left the global_configuration_local in an odd state.
X   the new version has a cleaner state transition if the remote database crashes during the failover,
X   not an unusual thing if the primary is corrupt and in a crash-restart loop.
X
X3) appdservice-noroot.sh now reports when the assassin is being started
X
X--------------------------------------
XRelease notes for version 3.32
X
X1) the APPD_UPGRADE document now more accurately describes the steps that must be undertaken to
X   upgrade the controller.  specifically, added a halt to the primary database and installation
X   of the obfuscated mysql password.
X
X2) certain installations require a hook to modify the execution path for ssh/scp.   
X   this is now explicitly done via the addition of a optional configuration file, HA_ENVIRONMENT.   
X   this config file is sourced by the package automatically.
X
X3) a missing redirection caused the file pruning code in version 3.31 to not work
X
X--------------------------------------
XRelease notes for version 3.33
X
X1) we now verify that the secondary database has indeed been marked passive before completing the
X   HA setup.   this greatly narrows a race condition that could cause a split brain.
X
X2) we add a means of disabling the bidirectional ssh checks for installations that cannot install the
X   primary and secondary hosts into the host files.
X
X--------------------------------------
XRelease notes for version 3.34
X
X1) numa-patch-controller.sh now also patches the events and reporting services
X   to run on the java node
X
X2) appdstatus.sh now does not attempt to get the numastat of non-runuser 
X   processes.
X
X3) replicate -j now added to replicate help.
X
X--------------------------------------
XRelease notes for version 3.35
X
X1) a longstanding bug prevented reliable data file pruning on old linuxes
X   which behaved differently running the find command.  the rewrite of this
X   code avoids using this functionality, and is much shorter and simpler.
X
X2) some vestigial testing code was removed
X
X3) the init scripts now fail quickly if the db.cnf is missing
X
X--------------------------------------
XRelease notes for version 3.36
X
X1) older versions of /usr/bin/dd do not support the status=none option. this broke the replication
X   file pruning code.  I added the trivial fix of redirecting stderr to /dev/null.
X
X--------------------------------------
XRelease notes for version 3.37
X
X1) a dependency on locale makes the pruning code collation order dependent.   I eliminate the problem
X   by sorting only on the primary.   this fixes an excessive pruning problem.
X
X--------------------------------------
XRelease notes for version 3.38
X
X1) false negatives in the pruning process cause replication failures.  I checksum now 256K unconditionally.
X
X--------------------------------------
XRelease notes for version 3.39
X
X1) the HA_ENVIRONMENT file did not need the execute bit
X
X2) ssh was directly invoked in the cleanup function.  it should use $SSH.
X
X--------------------------------------
XRelease notes for version 3.40
X
X1) a missed line continuation caused the secondary to not remove ibdata1 and 
X   logs from the secondary when replicating.   in addition to being a source
X   of noise, this could cause a bad replicate in some rare situations.
X
X--------------------------------------
XRelease notes for version 3.41
X
X1) the new marker file NO_MACHINE_AGENT suppresses all processing related
X   to the machine agent; the machine agent is not started, stopped, or 
X   configured by this package if this file is present.   if your replicate
X   or other logs mention "machine agent suppressed", then this file exists
X   in your HA directory.
X
X2) a new script, appdservice.sh, is a one-size-fits-all wrapper for service
X   changes.  whatever flavor of service invocation your system is configured
X   for, appdservice.sh <service> <action> should do the right thing.
X
X3) a new document, PATCHING, now describes the best practices for managing
X   system patching or system maintenance of an HA pair.
X
X--------------------------------------
XRelease notes for version 3.42
X
X1) A longstanding bug allowed replication from a broken secondary onto
X   a good primary if the user tried to do so with the secondary database
X   stopped.   This is now much more definitive.
X
X2) a detailed analysis of the innodb file pruning code exposed an issue
X   that sometimes did not detect when the primary and secondary files
X   were not identical.   this caused the secondary database to either
X   not start, or entered into a crash-restart loop.   the new pruner
X   now calculates a sha1 of all the innodb file extent maps and insert 
X   buffer bitmaps.  in combination with the payload in the file header,
X   log sequence numbers, and so on, any stale files on the secondary will
X   be detected and pruned before the rsync.
X
END-of-Release_Notes
echo x - appdservice.c
sed 's/^X//' >appdservice.c << 'END-of-appdservice.c'
X/*
X * $Id: appdservice.c 3.0 2016-08-04 12:22:17 cmayer $
X *
X *
X * Copyright 2016 AppDynamics, Inc
X *
X *   Licensed under the Apache License, Version 2.0 (the "License");
X *   you may not use this file except in compliance with the License.
X *   You may obtain a copy of the License at
X *
X *       http://www.apache.org/licenses/LICENSE-2.0
X *
X *   Unless required by applicable law or agreed to in writing, software
X *   distributed under the License is distributed on an "AS IS" BASIS,
X *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X *   See the License for the specific language governing permissions and
X *   limitations under the License.
X *
X * this program is a trampoline for the Appdynamics user to invoke
X * a controlled escalation of privilege to cause changes in the
X * installed appdynamics services via the system's service wrapper,
X * which is root-only
X *
X * security is ensured by only changing the enumerated services
X * and the enumerated funtions.  
X *
X * this file contains all the distro specific knowledge
X * it is intentionally coded in a brute-force manner to be trivially auditable
X *
X * all the source strings for the execv array are internal to this file, and
X * all the input arguments are only read using strcmp;  buffer overflows
X * are not possible.
X *
X * also, since we use execv, no path processing is done.
X */
X#include <stdlib.h>
X#include <stdio.h>
X#include <string.h>
X#include <unistd.h>
X#include <fcntl.h>
X
X/*
X * these names are intentionally not the same pointer, even though they have
X * the same value.
X * we never copy anything from the arguments to the exec arguments.
X */
Xstruct service {
X	char *name;
X	char *service_name;
X} services[] = {
X	{ "appdcontroller",		"appdcontroller" },
X	{ "appdcontroller-db",	"appdcontroller-db" },
X	{ "appdynamics-machine-agent", 	"appdynamics-machine-agent" }
X};
X#define NSRV (sizeof(services)/sizeof(services[0]))
X
X/* number of possible handlers */
X#define	NHAND	3
X
Xstruct action {
X	char *name;
X	struct handler {
X		char *prog;
X		char *verb;
X	} handlers[NHAND];
X} actions[] = {
X	{ "status", {
X		{ "service", "status" },
X		{ 0, 0 },
X		{ 0, 0 }}
X	},
X	{ "start", {
X		{ "service", "start" },
X		{ 0, 0 },
X		{ 0, 0 }}
X	},
X	{ "stop", {
X		{ "service", "stop" },
X		{ 0, 0 },
X		{ 0, 0 }}
X	},
X	{ "enable", {
X		{ "chkconfig", "on" },
X		{ "update-rc.d", "enable" },
X		{ 0, 0 }}
X	},
X	{ "disable", {
X		{ "chkconfig", "off" },
X		{ "update-rc.d", "disable" },
X		{ 0, 0 }}
X	}
X};
X#define NACT (sizeof(actions)/sizeof(actions[0]))
X
X/*
X * the complete list of directories for lookup of commands
X */
Xchar *bindirs[] = {
X	"/sbin", "/usr/sbin", 0
X};
X
Xvoid
Xusage(char *pname)
X{
X	int i, j;
X
X	fprintf(stderr, "usage: %s <service> <action>\n", pname);
X	for (i = 0; i < NSRV; i++) {
X		fprintf(stderr, "\t%s {", services[i].name);
X		for (j = 0; j < NACT; j++) {
X			fprintf(stderr, "%s", actions[j].name);
X			if (j < NACT - 1) {
X				fprintf(stderr, ",");
X			}
X		}
X		fprintf(stderr, "}\n");
X	}
X	exit (1);
X}
X
X/*
X * return zero if the program is executable in the specified directory
X */
Xint
Xexecutable_at(char *dir, char *prog)
X{
X	int dirfd;
X	int ret;
X
X	dirfd = open(dir, O_RDONLY | O_DIRECTORY);
X	ret = faccessat(dirfd, prog, AT_EACCESS, X_OK);
X	close(dirfd);
X	return (ret);
X}
X
Xchar *argvec[4];
Xchar *progpath;
X
Xint
Xmain(int argc, char**argv)
X{
X	char cmdbuf[80];
X	int svc;
X	int act;
X	int hand;
X	char *prog;
X	char *dir;
X	
X	if (argc != 3) {
X		usage(argv[0]);
X		exit (1);
X	}
X
X	/* look up service */
X	for (svc = 0; svc < NSRV; svc++) {
X		if (strcmp(services[svc].name, argv[1]) == 0) {
X			break;
X		}
X	}
X	if (svc >= NSRV) {
X		fprintf(stderr, "unknown service %s\n", argv[1]);
X		usage(argv[0]);
X	}
X
X	/* look up action */
X	for (act = 0; act < NACT; act++) {
X		if (strcmp(actions[act].name, argv[2]) == 0) {
X			break;
X		}
X	}
X	if (act >= NACT) {
X		fprintf(stderr, "unknown action %s\n", argv[2]);
X		usage(argv[0]);
X	}
X
X	/* validate that we are either the appdynamics user or root */
X	if (getuid() != APPDUSER && getuid() != 0) {
X		fprintf(stderr, "must be run as user id %d or root\n", APPDUSER);
X		exit(2);
X	}
X
X	/* validate that we are effectively root */
X	if (geteuid() != 0) {
X		fprintf(stderr, "must be run setuid root\n");
X		exit(3);
X	}
X	
X	/* definitively become root */
X	setreuid(0, 0);
X	setregid(0, 0);
X
X	/* iterate through handlers until null */
X	for (hand = 0; prog = actions[act].handlers[hand].prog; hand++) {
X
X		/* search the bindirs */
X		for (dir = bindirs[0]; dir; dir++) {
X
X			/* if we can run it, do so */
X			if (executable_at(dir, prog)) {
X
X				progpath = malloc(strlen(dir) + strlen(prog) + 2);
X				strcpy(progpath, dir);
X				strcat(progpath, "/");
X				strcat(progpath, prog);
X				argvec[0] = strdup(prog);
X				argvec[1] = strdup(services[svc].service_name);
X				argvec[2] = strdup(actions[act].handlers[hand].verb);
X				argvec[3] = 0;
X
X				execv(progpath, argvec);	
X			}
X		}
X	}
X
X	fprintf(stderr, "no valid handlers found for service %s action %s\n",
X		services[svc].name, actions[act].name);
X	exit(4);
X}
END-of-appdservice.c
echo c - lib
mkdir -p lib > /dev/null 2>&1
echo c - monitors
mkdir -p monitors > /dev/null 2>&1
echo c - monitors/DiskMonitor
mkdir -p monitors/DiskMonitor > /dev/null 2>&1
echo c - monitors/MysqlMonitor
mkdir -p monitors/MysqlMonitor > /dev/null 2>&1
echo x - monitors/DiskMonitor/monitor.xml
sed 's/^X//' >monitors/DiskMonitor/monitor.xml << 'END-of-monitors/DiskMonitor/monitor.xml'
X<monitor>
X    <name>DiskMonitor</name>
X    <type>managed</type>
X    <enabled>true</enabled>
X    <enable-override os-type="solaris">true</enable-override>
X    <enable-override os-type="sunos">true</enable-override>
X    <description>Disk Monitor
X    </description>
X    <monitor-configuration>
X    </monitor-configuration>
X    <monitor-run-task>
X        <execution-style>continuous</execution-style>
X        <name>Run</name>
X        <type>executable</type>
X        <task-arguments>
X        </task-arguments>
X        <executable-task>
X            <type>file</type>
X            <file os-type="linux">disk-stat.sh</file>
X        </executable-task>
X    </monitor-run-task>
X</monitor>
END-of-monitors/DiskMonitor/monitor.xml
echo x - monitors/DiskMonitor/disk-stat.sh
sed 's/^X//' >monitors/DiskMonitor/disk-stat.sh << 'END-of-monitors/DiskMonitor/disk-stat.sh'
X#!/bin/bash 
X# 
X# Monitors Disks on Linux 
X# 
X# $Id: disk-stat.sh 3.20 2017-06-02 15:05:40 cmayer $
X# 
X# using only: iostat, awk
X# 
X# Copyright 2016 AppDynamics, Inc 
X# 
X# Licensed under the Apache License, Version 2.0 (the "License"); 
X# you may not use this file except in compliance with the License. 
X# You may obtain a copy of the License at 
X# 
X# http://www.apache.org/licenses/LICENSE-2.0 
X# 
X# Unless required by applicable law or agreed to in writing, software 
X# distributed under the License is distributed on an "AS IS" BASIS, 
X# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
X# See the License for the specific language governing permissions and 
X# limitations under the License. 
X#
X
XPATH=$PATH:/bin:/usr/sbin:/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
X
Xiostat -xk 1 | awk ' 
X/Device:/ { state ++; next }
X( NF == 12 && state >= 2) { 
X   state=2;
X   agg="AVERAGE"; 
X   dev = $1; 
X   printf("name=Hardware Resources|Disk|%s|avg req size (s),aggregator=%s,value=%d\n", dev, agg, $8); 
X   printf("name=Hardware Resources|Disk|%s|avg queue length,aggregator=%s,value=%d\n", dev, agg, $9); 
X   printf("name=Hardware Resources|Disk|%s|avg wait (ms),aggregator=%s,value=%d\n", dev, agg, $10); 
X   printf("name=Hardware Resources|Disk|%s|avg svctime (ms),aggregator=%s,value=%d\n", dev, agg, $11); 
X   printf("name=Hardware Resources|Disk|%s|utilization (ms),aggregator=%s,value=%d\n", dev, agg, $12); 
X   next
X} 
X( NF == 14 && state >= 2) { 
X   state=2;
X   agg="AVERAGE"; 
X   dev = $1; 
X   printf("name=Hardware Resources|Disk|%s|reads per sec,aggregator=%s,value=%d\n", dev, agg, $4); 
X   printf("name=Hardware Resources|Disk|%s|writes per sec,aggregator=%s,value=%d\n", dev, agg, $5); 
X   printf("name=Hardware Resources|Disk|%s|reads (kb/s),aggregator=%s,value=%d\n", dev, agg, $6); 
X   printf("name=Hardware Resources|Disk|%s|writes (kb/s),aggregator=%s,value=%d\n", dev, agg, $7); 
X   printf("name=Hardware Resources|Disk|%s|avg req size (s),aggregator=%s,value=%d\n", dev, agg, $8); 
X   printf("name=Hardware Resources|Disk|%s|avg queue length,aggregator=%s,value=%d\n", dev, agg, $9); 
X   printf("name=Hardware Resources|Disk|%s|avg wait (ms),aggregator=%s,value=%d\n", dev, agg, $10); 
X   printf("name=Hardware Resources|Disk|%s|avg read await (ms),aggregator=%s,value=%d\n", dev, agg, $11); 
X   printf("name=Hardware Resources|Disk|%s|avg write await (ms),aggregator=%s,value=%d\n", dev, agg, $12); 
X   next
X} '
END-of-monitors/DiskMonitor/disk-stat.sh
echo x - monitors/MysqlMonitor/monitor.xml
sed 's/^X//' >monitors/MysqlMonitor/monitor.xml << 'END-of-monitors/MysqlMonitor/monitor.xml'
X<monitor>
X    <name>MysqlMonitor</name>
X    <type>managed</type>
X    <enabled>true</enabled>
X    <enable-override os-type="solaris">true</enable-override>
X    <enable-override os-type="sunos">true</enable-override>
X    <description>Mysql Monitor
X    </description>
X    <monitor-configuration>
X    </monitor-configuration>
X    <monitor-run-task>
X        <execution-style>continuous</execution-style>
X        <name>Run</name>
X        <type>executable</type>
X        <task-arguments>
X        </task-arguments>
X        <executable-task>
X            <type>file</type>
X            <file os-type="linux">mysql-stat.sh</file>
X        </executable-task>
X    </monitor-run-task>
X</monitor>
END-of-monitors/MysqlMonitor/monitor.xml
echo x - monitors/MysqlMonitor/mysql-stat.sh
sed 's/^X//' >monitors/MysqlMonitor/mysql-stat.sh << 'END-of-monitors/MysqlMonitor/mysql-stat.sh'
X#!/bin/bash
X#
X# Monitors INNODB
X#
X# $Id: mysql-stat.sh 3.4 2018-04-27 14:17:35 cmayer $
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
XPATH=$PATH:/bin:/usr/sbin:/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
X
X[ -f /etc/sysconfig/appdcontroller ] && . /etc/sysconfig/appdcontroller
X[ -f /etc/default/appdcontroller ] && . /etc/default/appdcontroller
X
X#
X# check in some likely places where a controller might be installed
X#
Xif [ -z "$APPD_ROOT" ] ; then
X	for dir in /opt/AppDynamics/Controller /opt/appdynamics/controller /apps/appdynamics/controller ; do
X		if [ -f $dir/db/db.cnf ] ; then
X			APPD_ROOT=$dir
X			break
X		fi
X	done
Xfi
Xif [ -z "$APPD_ROOT" ] ; then
X	exit 1
Xfi
X
Xif [ -x $APPD_ROOT/HA/mysqlclient.sh ] ; then
X	MYSQLCLIENT="$APPD_ROOT/HA/mysqlclient.sh"
Xelse
X	MYSQLCLIENT="$APPD_ROOT/bin/controller.sh login-db"
X fi 
X
Xwhile [ 1 ]; do
XNEXTSECONDS=`date +%s | awk '{print $1 + 60}'`
X
Xecho "show engine innodb status\G" | $MYSQLCLIENT | awk '
X
X	/^BUFFER POOL AND MEMORY/ { state = 1; }
X	/^Database pages/ { if (state == 1) {
X		bufcnt = $3; 
X	}}
X	/^Modified/ { if (state == 1) {
X		dirty = $4;
X	}}
X	/^Old database pages/ { if (state == 1) {
X		oldpages = $4;
X	}}
X
X	/^INDIVIDUAL BUFFER POOL INFO/ { state = 2; }
X
X	#/^TRANSACTIONS/ { state = 3; }
X	#/^History list length/ { if (state == 3) histlen = $4; }
X	#/^---TRANSACTION.*ACTIVE/ { if (state == 3) {
X	#	xcount++;
X	#	active = $4; if (active > hiwat) {hiwat = active}
X	#}}
X
X	/^FILE I/ { state = 4; }
X	/reads.*writes.*fsyncs/ { if (state == 4) {
X		reads = $1; writes = $6; syncs = $8;
X	}}
X
X	/^LOG/ { state = 5; }
X	/Log sequence number/ { if (state == 5) { logseq = $4}}
X	/Log flushed up to/ { if (state == 5) { logflushed = $5}}
X	/Last checkpoint at/ { if (state == 5) { logcheckpoint = $4}}
X	/Max checkpoint age/ { if (state == 5) { maxcheckpointage = $4}}
X	/Checkpoint age target/ { if (state == 5) { checkpointagetarget = $4}}
X	/Modified age/ { if (state == 5) { modifiedage = $3}}
X	/Checkpoint age/ { if (state == 5) { checkpointage = $3}}
X	/pending log writes,.*pending chkp writes/ { if (state == 5) { pendinglog=$1; pendingckpt=$5 }}
X	/log.*done.*log.*second/ { if (state == 5) {
X		logio = $5;
X	}}
X
X	/^ROW OPERATIONS/ { state = 6; }
X	/inserts.*updates.*deletes.*reads/ { if (state == 6) {
X		inserts = $1; updates = $3; deletes = $5; rowreads = $7;
X	}}
X
X	END { 
X		printf("name=Custom Metrics|Mysql|Buffers Used,aggregator=OBSERVATION,value=%d\n", bufcnt);
X		printf("name=Custom Metrics|Mysql|Buffers Dirty,aggregator=OBSERVATION,value=%d\n", dirty);
X		printf("name=Custom Metrics|Mysql|Buffers Old,aggregator=OBSERVATION,value=%d\n", oldpages);
X
X#		printf("name=Custom Metrics|Mysql|Transaction count,aggregator=OBSERVATION,value=%d\n", xcount);
X#		printf("name=Custom Metrics|Mysql|Transaction high time,aggregator=OBSERVATION,value=%d\n", hiwat);
X
X		printf("name=Custom Metrics|Mysql|File reads,aggregator=OBSERVATION,value=%d\n", reads);
X		printf("name=Custom Metrics|Mysql|File writes,aggregator=OBSERVATION,value=%d\n", writes);
X		printf("name=Custom Metrics|Mysql|File syncs,aggregator=OBSERVATION,value=%d\n", syncs);
X
X		printf("name=Custom Metrics|Mysql|Log seq number,aggregator=OBSERVATION,value=%d\n", logseq);
X		printf("name=Custom Metrics|Mysql|Log flushed,aggregator=OBSERVATION,value=%d\n", logflushed);
X		printf("name=Custom Metrics|Mysql|Log checkpoint,aggregator=OBSERVATION,value=%d\n", logcheckpoint);
X
X		printf("name=Custom Metrics|Mysql|Log dirty,aggregator=OBSERVATION,value=%d\n", logseq - logflushed);
X		printf("name=Custom Metrics|Mysql|Log used,aggregator=OBSERVATION,value=%d\n", logseq - logcheckpoint);
X
X		printf("name=Custom Metrics|Mysql|Log max checkpoint age,aggregator=OBSERVATION,value=%d\n", maxcheckpointage);
X		printf("name=Custom Metrics|Mysql|Log checkpoint age target,aggregator=OBSERVATION,value=%d\n", checkpointagetarget);
X		printf("name=Custom Metrics|Mysql|Log modified age,aggregator=OBSERVATION,value=%d\n", modifiedage);
X		printf("name=Custom Metrics|Mysql|Log checkpoint age,aggregator=OBSERVATION,value=%d\n", checkpointage);
X		printf("name=Custom Metrics|Mysql|Log pending log writes,aggregator=OBSERVATION,value=%d\n", pendinglog);
X		printf("name=Custom Metrics|Mysql|Log pending checkpoint writes,aggregator=OBSERVATION,value=%d\n", pendingckpt);
X		printf("name=Custom Metrics|Mysql|Log io,aggregator=OBSERVATION,value=%d\n", logio);
X
X		printf("name=Custom Metrics|Mysql|Row inserts,aggregator=OBSERVATION,value=%d\n", inserts);
X		printf("name=Custom Metrics|Mysql|Row updates,aggregator=OBSERVATION,value=%d\n", updates);
X		printf("name=Custom Metrics|Mysql|Row deletes,aggregator=OBSERVATION,value=%d\n", deletes);
X		printf("name=Custom Metrics|Mysql|Row reads,aggregator=OBSERVATION,value=%d\n", rowreads);
X
X	}
X'
X
Xecho "show slave status\G" | $MYSQLCLIENT | awk '
X
X	/Seconds_Behind_Master:/ { spm = $2; }
X
X	END { 
X		printf("name=Custom Metrics|Mysql|Slave Seconds Behind Master,aggregator=OBSERVATION,value=%d\n", spm);
X	}
X'
Xecho "select value from global_configuration_local where name = 'appserver.mode'\G" | $MYSQLCLIENT | awk '
X
X	/value:/ { if ($2 == "active") active = 1; else active = 0; }
X
X	END { 
X		printf("name=Custom Metrics|Mysql|Appserver Active,aggregator=OBSERVATION,value=%d\n", active);
X	}
X'
Xecho "select max(time) as hiwat, count(*) as xcount from information_schema.processlist where command ='Query'\G" | $MYSQLCLIENT | awk '
X	/hiwat:/ { hiwat = $2; }
X	/xcount:/ { xcount = $2; }
X	END {
X		printf("name=Custom Metrics|Mysql|Transaction count,aggregator=OBSERVATION,value=%d\n", xcount);
X		printf("name=Custom Metrics|Mysql|Transaction high time,aggregator=OBSERVATION,value=%d\n", hiwat);
X	}
X'
X
XSLEEPTIME=`date +"$NEXTSECONDS %s" | awk '{if ($1 > $2) print $1 - $2; else print 0;}'`
Xsleep $SLEEPTIME
Xdone
END-of-monitors/MysqlMonitor/mysql-stat.sh
echo x - monitors/DiskMonitor/README
sed 's/^X//' >monitors/DiskMonitor/README << 'END-of-monitors/DiskMonitor/README'
Xthis is a machine agent monitor that surfaces extended disk statistics
Xuseful for diagnosing controller issues
END-of-monitors/DiskMonitor/README
echo x - monitors/MysqlMonitor/README
sed 's/^X//' >monitors/MysqlMonitor/README << 'END-of-monitors/MysqlMonitor/README'
Xmachine agent monitor useful for diagnosing database issues and surfacing
XHA-related metrics
END-of-monitors/MysqlMonitor/README
echo x - assassin.sh
sed 's/^X//' >assassin.sh << 'END-of-assassin.sh'
X#!/bin/bash
X#
X# $Id: assassin.sh 3.32 2018-05-16 21:15:14 cmayer $
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# run on the active node after a failover, 
X# this shoots down any secondary controller to prevent two actives 
X# from showing up at the load balancer - we won't have any data integrity
X# problems, since replication is off
X# 
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xcd $(dirname $0)
X
XLOGFNAME=assassin.log
X
X# source function libraries
X. lib/log.sh
X. lib/runuser.sh
X. lib/conf.sh
X. lib/ha.sh
X. lib/password.sh
X. lib/sql.sh
X. lib/status.sh
X
Xmessage "assassin log" `date`
Xcheck_sanity
X
X#
X# we must be the active node
X#
Xmode=`get_replication_mode localhost`
Xif [ "$mode" == "passive" ] ; then
X	fatal 6 "this script must be run on the active node"
Xfi
X
X#
X# if we are the 'marked primary', the assassin is not needed any more
X#
Xtype=`get_replication_type localhost`
Xif [ "$type" == "primary" ] ; then
X	message "assassin unneeded"
X	exit 0
Xfi
X
Xif ! replication_disabled ; then
X	fatal 5 "slave not disabled"
Xfi
Xprimary=unset
Xeval `get_slave_status`
Xif [ "$slave_io" != "No" ] ; then
X	fatal 8 "slave IO running"
Xfi
Xif [ "$primary" == "unset" ] ; then
X	fatal 9 "replication not set up - primary unset"
Xfi
X	
Xif assassin_running ; then
X	echo "assassin already running"
X	exit 1
Xfi
X
X#
X# ok, now we know that we are a failed-over primary, and there may be an
X# old primary that may re-appear.  if it does, shoot it, and kick it hard 
X# so it stays down.
X#
X
Xmessage "assassin committed"
X
Xecho $$ >$ASSASSIN_PIDFILE
X
Xloops=0
Xwhile true ; do
X	if [ $loops -gt 0 ] ; then
X		sleep 60;
X	fi
X	(( loops ++ ))
X
X	#
X	# brutally shoot down the appserver, as we don't want to confuse the
X	# load balancer.  this cannot wait.
X	# 
X	message "killing appserver unconditionally on $primary"
X	$SSH $primary pkill -9 -f ".*java .*appserver/glassfish"
X
X	#
X	# if the local database becomes primary, we don't need to run anymore.
X	#
X	type=`get_replication_type localhost`
X	if [ "$type" == "primary" ] ; then
X		message "assassin disabled"
X		exit 0
X	fi
X
X	#
X	# if we can't get through, no point doing real work for now. loop
X	#
X	if ! $SSH $primary date >/dev/null 2>&1 ; then
X		continue;
X	fi
X
X	#
X	# make sure skip-slave-start is in db.cnf
X	# this is to prevent log reads from the real primary if the db is restarted
X	#
X	dbcnf_set skip-slave-start true $primary
X	if [ $(dbcnf_get skip-slave-start $primary) = unset ] ; then
X		gripe "skip-slave-start insert failed"
X		continue;
X	fi
X
X	#
X	# as replication is broken, stop the DB - no point keeping it up
X	#
X	message "stop database on $primary"
X	remservice -tq $primary appdcontroller-db stop | logonly 2>&1
X
X	#
X	# and stay down.  this prevents inadvertently starting anything.
X	# re-run replication to allow startup.
X	#
X	message "persistently disabling appserver on $primary"
X	$SSH $primary mv -f $APPD_ROOT/bin/controller.sh \
X		$APPD_ROOT/bin/controller.sh-disabled | logonly 2>&1
X	$SSH $primary chmod 0 $APPD_ROOT/bin/controller.sh-disabled | logonly 2>&1
X
X	# 
X	# now mark our job done
X	#
X	sql localhost "update global_configuration_local set value='primary' \
X		where name = 'ha.controller.type';"
X	message "assassin exiting - old primary killed"
X	rm -f $ASSASSIN_PIDFILE
X	exit 0
X
Xdone
END-of-assassin.sh
echo x - failover.sh
sed 's/^X//' >failover.sh << 'END-of-failover.sh'
X#!/bin/bash
X#
X# $Id: failover.sh 3.31 2018-05-04 16:16:25 cmayer $
X#
X# run on the passive node, activate this HA node.
X# 
X# if run with the -f option, force hard failover
X# if run with the -n option, don't remote stop
X#    this is usually invoked from the remote side on an orderly shutdown
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xcd $(dirname $0)
X
XLOGFNAME=failover.log
X
X# source function libraries
X. lib/log.sh
X. lib/runuser.sh
X. lib/conf.sh
X. lib/ha.sh
X. lib/password.sh
X. lib/sql.sh
X
XNOTFAILED=3600
X
Xfunction slave_status {
X	bounce_slave
X
X	# wait for the slave to settle
X	connect_count=0
X
X	while [ $connect_count -lt 3 ] ; do
X		eval `get_slave_status`
X		case "$slave_io" in
X		Connecting) 
X			(( connect_count++ ))
X			sleep 10
X			continue;
X			;;
X		Yes) break
X			;;
X		No) break
X			;;
X		esac
X	done
X}
X
X#
X# parse arguments
X#
Xforce=false
Xbreak_replication=false
Xprimary_up=false
Xremote=true
Xno_assassin=false
X
Xwhile getopts fn: flag; do
X	case $flag in
X	f)
X		force=true
X		;;
X	n)
X		sanity_check=$OPTARG
X		if [ "$sanity_check" == "primary_has_been_set_passive_and_stopped" ] ; then
X			remote=false
X			no_assassin=true
X		else
X			echo "the -n option is not intended to be run manually"
X			exit 1
X		fi
X		;;
X	*)
X		echo "usage: $0 <options>"
X		echo "    [ -f ] force replication break"
X		echo "    [ -n primary_has_been_set_passive_and_stopped ] - not intended for manual use"
X		exit
X		;;
X	esac
Xdone
X
Xmessage "failover log" `date`
X
Xcheck_sanity
X
X#
X# we must be the passive node
X#
Xmessage "Verify passive node"
Xmode=`get_replication_mode localhost`
Xif [ "$mode" == "active" ] ; then
X	fatal 6 "this script must be run on the passive node"
Xfi
X
X#
X# we must be replicating in some sense
X#
Xmessage "Verify replication state"
Xslave=`get_slave_status | wc -l`
Xif [ "$slave" = 0 ] ; then
X	gripe "replication is not running"
X	if ! $force ; then
X		exit 1
X	else
X		message "  -- Force Failover even with no slave"
X		primary_up=false
X	fi
Xfi
Xif $force ; then
X	break_replication=true
Xfi
X
X#
X# replication must be moderately healthy - it's ok if the other server is down
X#
Xslave_status
Xif [ "$slave_sql" != "Yes" ] ; then
X	message "slave SQL not running - replication error"
X	if ! $force ; then
X		exit 1
X	else
X		message "Force Failover - stopped slave"
X		primary_up=false
X	fi
Xfi
X
Xcase "$slave_io" in 
X	"Yes")
X		primary_up=true
X		;;
X	"Connecting")
X		primary_up=false
X		message "Primary DB not running"
X		;;
X	*)
X		message "Unrecognized state for slave IO: $slave_io"
X		if ! $force ; then
X			exit 1
X		else
X			message "Force Failover - unknown slave state"
X			primary_up=false
X		fi
X		;;
Xesac
X
Xif ! $primary_up ; then
X	break_replication=true
Xfi
X
X
Xsecondary=`sql localhost "show slave status" | get Master_Host`
Xif [[ -z "$secondary" ]] ; then
X	fatal 1 "unable to get Master_Host value from \"show slave status\". Giving up..."
Xfi
Xcheck_ssh_setup $secondary || fatal 1 "2-way passwordless ssh healthcheck failed"
X
X#
X# hard failover is not quite as hard as all that.
X# in a certain case, we don't break replication if all of:
X# (1) slave sql and slave io are running
X# (2) uptime is greater than some limit
X# then leave replication running
X#
Xif [ "$slave_io" == Yes -a "$slave_sql" == Yes ] ; then
X	uptime=0
X	secondary=""
X
X	secondary=`sql localhost "show slave status" | get Master_Host`
X	if [ -n "$secondary" ] ; then
X		uptime=`sql $secondary "show status like 'Uptime'\G" | get Value`
X	fi
X	if [ "$uptime" -gt $NOTFAILED ] ; then
X		break_replication=false	
X	fi
Xfi
X
X#####
X#
X# at this point, we are committed to failing over
X#
X
X#
X# kill the local watchdog if it is up
X#
Xkc=0
Xwhile [ -f $WATCHDOG_PIDFILE ] ; do
X	if [ $(($kc % 10)) -eq 0 ] ; then
X		kill `cat $WATCHDOG_PIDFILE` >/dev/null 2>&1
X		message "Kill Watchdog"
X	fi
X	let kc++
X	sleep 1
Xdone
X
X#
X# call the user pre-hook if one exists - this is a place to turn off old things
X#
Xif [ -x ./failover_pre_hook.sh ] ; then
X	./failover_pre_hook.sh
Xfi
X
X#
X# kill the local appserver if it's running
X#
Xmessage "Kill Local Appserver"
Xservice appdcontroller stop | log 2>&1
X
X#
X# if the primary is up, mark it passive, and stop the appserver
X# if the primary is not reachable, the assassin will eventually change ha.controller.type
X#
Xif [ "$primary_up" = "true" ] ; then
X	if $remote ; then
X		message "Mark primary passive + secondary"
X		if \
X			sql $primary "update global_configuration_local set value='passive' \
X				where name = 'appserver.mode';" 10 &&
X			sql $primary "update global_configuration_local set value='secondary' \
X				where name = 'ha.controller.type';" 10 ; then
X			message "Mark local primary"
X			no_assassin=true
X		else
X			message "Primary DB timeout"
X			break_replication=true
X			no_assassin=false
X		fi
X		message "Stop primary appserver"
X		remservice -tq $primary appdcontroller stop
X	fi
Xfi
X
X#
X# persistently break replication
X#
Xif $break_replication ; then
X	#
X	# we can get here if we could not mark the remote database passive
X	#
X	if [ "$primary_up" = "true" ] ; then
X		message "Stop secondary database"
X		remservice -tq $primary appdcontroller-db stop
X		dbcnf_unset skip-slave-start $primary
X		dbcnf_set skip-slave-start true $primary
X	fi
X
X	#
X	# now stop the replication slave
X	#
X	message "Stop local slave"
X	sql localhost "stop slave IO_THREAD;"
X
X	message "Disable local slave autostart"
X
X	#
X	# disable automatic start of replication slave
X	# edit the db.cnf to remove any redundant entries for skip-slave-start
X	# this is to ensure that replication does not get turned on by a reboot
X	#
X	dbcnf_unset skip-slave-start
X	dbcnf_set skip-slave-start true
Xfi
X
X#
X# the primary is now down and maybe passive; 
X#
Xmessage "Mark local active"
Xsql localhost "update global_configuration_local set value='active' \
X	where name = 'appserver.mode';"
X
Xif $no_assassin ; then
X	sql localhost "update global_configuration_local set value='primary' \
X	where name = 'ha.controller.type';"
Xfi
X
X#
X# start the replication sql thread.
X#
Xsql localhost "start slave sql_thread"
X
Xwaited=false
X#
X# wait until the all the read relay logs are executed
X#
Xwhile true ; do
X	read_file=`sql localhost "show slave status" | get Master_Log_File`
X	read_pos=`sql localhost "show slave status" | get Read_Master_Log_Pos`
X	exec_file=`sql localhost "show slave status" | get Relay_Master_Log_File`
X	exec_pos=`sql localhost "show slave status" | get Exec_Master_Log_Pos`
X	if [ "$read_file" = "$exec_file" ] ; then
X		if [ "$read_pos" = "$exec_pos" ] ; then
X			break
X		fi
X	fi
X	if $waited ; then
X		sql_slave=`sql localhost "show slave status" | get Slave_SQL_Running`
X		if [ "$sql_slave" == "Yes" ] ; then
X			message "waiting for relay logs to drain $exec_file:$exec_pos to $read_file:$read_pos"
X		else
X			message "sql slave died - replication errors see logs/database.log"
X			break
X		fi
X	fi
X	sleep 10
X	echo -n "."
X	waited=true
Xdone
Xif $waited ; then 
X	echo ""
Xfi
X
X#
X# it is now safe to mark our node active and start the appserver
X# this will start the assassin if needed.
X#
Xmessage "Starting local Controller"
Xservice appdcontroller start
X
X#
X# if the other side was ok, then we can start the service in passive mode
X#
Xif [ "$primary_up" = "true" ] ; then
X	if $remote ; then
X		message "start passive secondary"
X		remservice -nqf $primary appdcontroller start | logonly 2>&1
X	fi
Xfi
X
Xif $break_replication ; then
X	message "replication has been persistently broken"
X	logonly << MESSAGE
XPlease review the state of each database by examining logs/database.log
Xand if everything looks good and you are confident with the health of each
Xdatabase, re-enable replication by running 
Xreplicate.sh -s $primary -E
XIf unsure, safest way to re-enable replication is to perform full 
Xreplication using replicate.sh -f option to re-establish HA
XMESSAGE
X
Xfi
X
X#
X# call the user hook if one exists - this is a good place to revector a proxy
X# or call an API to change DNS, if we want to do that kind of thing
X#
Xif [ -x ./failover_hook.sh ] ; then
X	./failover_hook.sh
Xfi
X
Xmessage "Failover complete at " `date`
X
Xexit 0
END-of-failover.sh
echo x - watchdog.sh
sed 's/^X//' >watchdog.sh << 'END-of-watchdog.sh'
X#!/bin/bash
X#
X# $Id: watchdog.sh 3.39 2018-08-02 12:27:33 cmayer $
X#
X# watchdog.sh
X# run on the passive node, fail over if we see the primary is very sick
X# if we are not capable of failing over, fall over immediately
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xcd $(dirname $0)
X
XLOGFNAME=watchdog.log
X
X# source function libraries
X. lib/log.sh
X. lib/runuser.sh
X. lib/conf.sh
X. lib/ha.sh
X. lib/password.sh
X. lib/sql.sh
X. lib/status.sh
X
X#
X# this is needed to set the output of a pipe to the first failing process
X#
Xset -o pipefail
X
X#
X# skip SSL certificate validation when doing health checks, ( useful for 
X# self-signed certificates, and certs issued by internal, corporate CAs )
X# leave empty to require certificate validation against the host's CA cert bundle
X#
XCERT_VALIDATION_MODE="-k"
X
X# get all of the ports the controller listens on and determine the accompanying
X# protocols
Xdeclare -a APP_PORT
Xdeclare -a APP_PROTO
X
XIFS=$'\n'
X
Xi=0
Xfor n in $( echo "cat /domain/configs/config[@name='server-config']/network-config/network-listeners/network-listener[@name!='admin-listener' and @name!='controller-config-listener']" | \
X	xmllint --shell $DOMAIN_XML | grep \<network-listener ) ; do
X	APP_PORT[$i]=$(echo "$n" | sed -re 's/^.*port="([0-9]+)".*$/\1/')
X	protocol_name=$(echo "$n" | sed -re 's/^.*protocol="([^"]+)".*$/\1/')
X	
X	if echo "cat /domain/configs/config[@name='server-config']/network-config/protocols/protocol[@name='$protocol_name']/attribute::security-enabled" | xmllint --shell $DOMAIN_XML | grep -q 'security-enabled="true"' ; then
X		APP_PROTO[$i]=https
X	else
X		APP_PROTO[$i]=http
X	fi
X	((i++))
Xdone
XIFS=\ 
X
X
X#
X# hack to supppress password
X#
X
Xwd_log=$APPD_ROOT/logs/watchdog.log
Xwd_tmp=/tmp/wd_curl.out.$$
X
X# 
X# These are the default timeouts, in seconds, before the watchdog will
X# initiate a failover.  If they are set to low, they can cause unexpected
X# failover events and controller downtime.  The following defaults are very
X# conservative and should be overridden with site-specific settings in
X# $APPD_ROOT/HA/watchdog.settings
X
X# Controller app server not reachable via HTTP(S):  5 Minutes
XDOWNLIMIT=300
X
X# Controller app server shutting down: 5 Minutes
XFALLINGLIMIT=300
X
X# Controller app server starting up: 60 Minutes
XRISINGLIMIT=3600
X
X# The primary database is not responding: 5 Minutes
XDBDOWNLIMIT=300
X
X# The primary database cannot create a table: 2 Minutes
X# disabled by default
XDBOPLIMIT=2000000000
X
X#
X# disable the dbop test
X#
XDBOP_ENABLE=false
X
X
X# The active controller host is not responding to ICMP echo, (ping),
X# requests: 5 Minutes
XPINGLIMIT=300
X
X#
X# the length of time to wait for a sql statememt to run
XDBWAIT=10
X
X#
X# polling frequency
X#
XLOOPTIME=10
X
X#
X# Time to wait for a ping response
X#
XPINGTIME=2
X
X#
X# Time for curl to wait for a complete response from the controller
X#
XCURL_MAXTIME=2
X
X#
X# Time to wait between consecutive requests to create a dummy table on remote
X#
XDB_CREATE_DELAY=10
X
X#
X# overrides, so we don't have to edit this file
X#
Xif [ -f "$WATCHDOG_SETTINGS" ] ; then
X	. $WATCHDOG_SETTINGS
Xfi
X
Xlast_db_create=0
X
X#
X# remove the watchdog pid and temporary curl output file when we exit
X#
Xfunction cleanup {
X	logmsg "watchdog exit" `date`
X	rm -f $WATCHDOG_PIDFILE $wd_tmp $DELFILES
X}
X
X#
X# we do a boatload of sanity checks, and if anything is unexpected, we
X# exit with a non-zero status and complain.
X#
Xfunction sanity {
X	check_sanity
X
X	#
X	# we must be the passive node
X	#
X	mode=`get_replication_mode localhost`
X	if [ "$mode" == "active" ] ; then
X		fatal 2 "this script must be run on the passive node"
X	fi
X
X	#
X	# the replication slave must be running
X	#
X	slave=`sql localhost "show slave status" | wc -l`
X	if [ "$slave" = 0 ] ; then
X		fatal 3 "replication is not running"
X	fi
X
X	#
X	# replication must be moderately healthy - it's ok if the primary is down
X	#
X	eval `get_slave_status`
X	if [ "$slave_sql" != "Yes" ] ; then
X		fatal 4 "slave SQL not running - replication error"
X	fi
X	case "$slave_io" in 
X		"Yes")
X			primary_up=true
X			;;
X		"Connecting")
X			primary_up=false
X			message "Primary DB not running"
X			;;
X		"No")
X			primary_up=false
X			fatal 8 "Slave IO not running"
X			;;
X		*)
X			fatal 5 "Unrecognized state for slave IO: $slave_io"
X			;;
X	esac
X}
X
X#
X# code to do a rest call for status. 
X#
Xfunction serverstatus {
X	local app_proto=$1
X	local app_port=$2
X	STATUS="$app_proto://$primary:$app_port/controller/rest/serverstatus"
X	curl --noproxy "$primary" -m $CURL_MAXTIME -fsS $CERT_VALIDATION_MODE $STATUS > $wd_tmp 2>&1
X	curlstat=$?
X	case "$curlstat" in
X	0)
X		echo good
X		;;
X	7)
X		echo "down"
X		logmsg "curl error 7: connection failed"
X		;;
X	22)
X		eval `awk '/(22)/ {printf("http_code=%d\n", $8);}' < $wd_tmp`
X		logmsg "curl error 22: $http_code"
X		cat $wd_tmp | logonly
X		case $http_code in
X		503)
X			echo "falling"
X			;;
X		500)
X			echo "rising"
X			;;
X		404)
X			echo "rising"
X			;;
X		*)
X			echo "other"
X			;;
X		esac
X		;;
X	28)
X		echo "down"
X		logmsg "curl error 28: operation timed out"
X		;;
X	35)
X		echo "down"
X		logmsg "curl error 35: SSL handshake failed"
X		;;
X	52)
X		echo "down"
X		logmsg "curl error 52: no data"
X		;;
X	56)
X		echo "down"
X		logmsg "curl error 56: receive failed"
X		;;
X
X	*)
X		echo "other"
X		logmsg "curl error $curlstat"
X		;;
X	esac
X}
X
X#
X# pass the variable, and limit
X#
X# warning: gnarly shell syntax and usage
X#
Xfunction expired {
X	if [ ${!1} -eq 0 ] ; then
X		eval "$1=`date +%s`"
X	fi
X	now=`date +%s`
X	limit=$((${!1} + $2))
X	left=$(($limit - $now))
X	logmsg `date` "expired $1 ${!1} $limit $left $2"
X	echo "   timer $1 start $limit left $left limit $2" > $WATCHDOG_STATUS
X	if [ `date +%s` -gt $((${!1} + $2)) ] ; then
X		return 0
X	else
X		return 1
X	fi
X}
X
X#
X# our exceptional state loop
X# 
X# here is where we test primary health and return when something happens
X# for long enough
Xfunction poll {
X	local i=0
X
X	downtime=0
X	risingtime=0
X	fallingtime=0
X	pingfail=0
X	dbfail=0
X	dbopfail=0
X
X	rm -f $WATCHDOG_STATUS
X
X	while true ; do
X		#
X		# if somebody removed the watchdog file, stop watching
X		#
X		if [ ! -f $WATCHDOG_ENABLE ] ; then
X			logmsg "watchdog newly disabled"
X			return 0
X		fi
X		
X		#
X		# first, ping the primary.  
X		# occasionally, ICMP is disabled, so PING can be disabled
X		#
X		if [ "$PINGLIMIT" = "0" ] ; then
X			pingfail=0
X		else
X			if ping -c 1 -W $PINGTIME -q $primary >/dev/null 2>&1 ; then
X				pingfail=0
X			else
X				if expired pingfail $PINGLIMIT ; then
X					logmsg `date` pingfail expired
X					return 2
X				fi
X				# we can't even ping.  Sleep for $((LOOPTIME-PINGTIME)) then try again
X				sleep $((LOOPTIME-PINGTIME))
X				continue
X			fi
X		fi
X
X		#
X		# then, is the primary database up listening
X		# (use <<< "$dbpasswd" to allow for spaces in password)
X		if $SSH $primary $MYSQLADMIN "${ACONNECT[@]}" ping <<< "$dbpasswd" &>/dev/null; then
X			dbfail=0
X		else
X			dbopfail=0
X			downtime=0
X			risingtime=0
X			fallingtime=0
X			pingfail=0
X			if expired dbfail $DBDOWNLIMIT ; then
X				logmsg `date` dbfail expired
X				return 2
X			fi
X			sleep $LOOPTIME
X			continue
X		fi
X
X		if $DBOP_ENABLE ; then
X		#
X		# then, is the database capable of doing some real work for us
X		# only do this every DB_CREATE_DELAY
X		#
X		if [ $(($last_db_create+$DB_CREATE_DELAY)) -le `date +%s` ] ; then
X			last_db_create=`date +%s`
X			if \
X				sql $primary "drop table if exists watchdog_test_table;" $DBWAIT &&
X				sql $primary "create table watchdog_test_table (i int);" $DBWAIT &&
X				sql $primary "insert into watchdog_test_table values (1);" $DBWAIT &&
X				sql $primary "select count(*) from watchdog_test_table;" $DBWAIT >/dev/null 2>&1 &&
X				sql $primary "drop table watchdog_test_table;" $DBWAIT ; then
X				dbopfail=0
X			else
X				dbfail=0
X				downtime=0
X				risingtime=0
X				fallingtime=0
X				pingfail=0
X				if expired dbopfail $DBOPLIMIT ; then
X					logmsg `date` dbopfail expired
X					return 2
X				fi
X				sleep $LOOPTIME
X				continue
X			fi
X		fi
X		fi
X
X		#
X		# how does the appserver respond to a serverstatus REST?
X		# if down, try every port before calling expired
X		#
X		status=`serverstatus ${APP_PROTO[$i]} ${APP_PORT[$i]}`
X		case $status in
X		down)
X			if [ $i -lt $((${#APP_PROTO[@]}-1)) ] ; then
X				((i++))
X				continue
X			else
X				i=0
X			fi
X			risingtime=0
X			fallingtime=0
X			pingfail=0
X			dbfail=0
X			dbopfail=0
X			if expired downtime $DOWNLIMIT ; then
X				logmsg `date` downtime expired
X				return 2
X			fi
X			;;
X		rising)
X			# reset the other timers
X			downtime=0
X			fallingtime=0
X			pingfail=0
X			dbfail=0
X			dbopfail=0
X
X			if expired risingtime $RISINGLIMIT ; then
X				logmsg `date` risingtime expired
X				return 2
X			fi
X			;;
X		falling)
X			downtime=0
X			risingtime=0
X			pingfail=0
X			dbfail=0
X			dbopfail=0
X			if expired fallingtime $FALLINGLIMIT ; then
X				logmsg `date` fallingtime expired
X				return 2
X			fi
X			;;
X		good)
X			return 0
X			;;
X		*)
X			logmsg `date` "unknown status $status"
X			return 1
X			;;
X		esac
X		
X		sleep $LOOPTIME
X	done
X}
X
X#
X# only run one watchdog
X#
Xif watchdog_running ; then
X	message "watchdog already running"
X	exit 1
Xfi
X
X#
X# we are starting to run. register
X#
Xtrap cleanup EXIT
Xrm -f $WATCHDOG_PIDFILE
Xecho $$ > $WATCHDOG_PIDFILE
X
X#
X# force first report
X#
Xlaststatus=1
X
X#
X# our main loop.  every time the controller is noted up, we start from scratch.
X#
Xwhile true ; do
X	if [ ! -f $LOGFILE ] ; then
X		logmsg "watchdog log" `date`
X		logmsg "settings: down:$DOWNLIMIT falling:$FALLINGLIMIT \
X rising:$RISINGLIMIT dbdown:$DBDOWNLIMIT dbop:$DBOPLIMIT ping:$PINGLIMIT loop:$LOOPTIME"
X	fi
X
X	#
X	# the watchdog enable file must exist.
X	#
X	if [ ! -f $WATCHDOG_ENABLE ] ; then
X		fatal 1 "watchdog disabled"
X	fi
X
X	sanity
X
X	poll
X	pollstatus=$?
X	case $pollstatus in
X	0)
X		# don't report consecutive good to minimize noise
X		if [ $laststatus != '0' ] ; then
X			logmsg "watchdog good" `date`
X		fi
X		;;
X	2)
X		logmsg "failover invoked" `date`
X		$APPD_ROOT/HA/failover.sh -f &
X		exit 0
X		;;
X	1|*)
X		logmsg "watchdog abort poll status = $pollstatus" `date`
X		exit 1
X		;;
X	esac
X	sleep $LOOPTIME
X	laststatus=$pollstatus
Xdone
X
X#
X# script end
X#
END-of-watchdog.sh
echo x - watchdog.settings.template
sed 's/^X//' >watchdog.settings.template << 'END-of-watchdog.settings.template'
X# $Id: watchdog.settings.template 3.15 2017-03-20 20:57:38 cmayer $
X#
X# watchdog.settings
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X# These are the default timeouts, in seconds, before the watchdog will
X# initiate a failover.  If they are set to low, they can cause unexpected
X# failover events and controller downtime.  The following defaults are very
X# conservative and should be overridden with site-specific settings by
X# copying this file to $APPD_ROOT/HA/watchdog.settings and editing
X# it appropriately.
X
X# Controller app server not reachable via HTTP(S):  5 Minutes
XDOWNLIMIT=300
X
X# Controller app server shutting down: 5 Minutes
XFALLINGLIMIT=300
X
X# Controller app server starting up: 60 Minutes
XRISINGLIMIT=3600
X
X# The primary database is not responding: 5 Minutes
XDBDOWNLIMIT=300
X
X# The active controller host is not responding to ICMP echo, (ping),
X# requests: 5 Minutes
X# if ICMP is disabled, PING can be disabled by setting PINGLIMIT to 0
XPINGLIMIT=300
X
X#
X# The primary database cannot create a table: 5 Minutes
X#
X# the dbop test is specifically used to detect a class of failure that
X# occurs on SAN storage where the devices become unresponsive and the i/o
X# operations hang in undetected timeouts.
X# for SAN or network attached storage, it should be set to a timeout
X# of a few minutes. for example:
X# DBOPLIMIT=300
X# the test should be disabled with a very high value on locally attached
X# disks, since this class of failure is unlikely.
XDBOPLIMIT=2000000000
XDBOP_ENABLE=false
X
X#
X# the length of time to wait for a sql statememt to run
XDBWAIT=60
X
X
END-of-watchdog.settings.template
echo x - replicate.sh
sed 's/^X//' >replicate.sh << 'END-of-replicate.sh'
X#!/bin/bash
X# $Id: replicate.sh 3.42 2018-09-19 02:34:30 cmayer $
X#
X# install HA to a controller pair
X#
X# this must be run on the primary, and ssh and rsync must be set up 
X# on both machines.
X#
X# if replication isn't broken before you run this, it certainly will be
X# during.
X#
X# this has very limited sanity checking, so please be very careful.
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
XINTERLOCK=REPLICATE_RUNNING
X
Xcd $(dirname $0)
X
XLOGFNAME=replicate.log
X
X# source function libraries
X. lib/log.sh
X. lib/runuser.sh
X. lib/conf.sh
X. lib/ha.sh
X. lib/password.sh
X. lib/sql.sh
X. lib/status.sh
X
X#
X# place to put certs for ssl replication
X#
XCERTS=$APPD_ROOT/ssl_certs
X
X#
X# the services in this list must appear in the order in which they should be
X# stopped
X#
Xappdynamics_service_list=( appdcontroller appdcontroller-db )
X
X#
X# a place to scribble
X#
Xtmpdir=/tmp/ha.$$
X
X#
X# global variables that are to be changed by command line args
X#
Xprimary=`hostname`
Xinternal_vip=
Xexternal_vip=
Xmonitor=
Xsecondary=
Xdatadir=
Xinnodb_logdir=
Xdebug=false
Xappserver_only_sync=false
Xupgrade=false
Xfinal=false
Xhotsync=false
Xunencrypted=false
Xstart_appserver=true
Xwatchdog_enable=false
Xssl_replication=false
Xma_ssl_enabled=false
Xssl_enabled=false
Xwildcard=false
Xunbreak=false
Xrsync_throttle="--bwlimit=20000"
Xrsync_compression=""
Xrsync_opts="-PavpW --del --inplace --exclude=ibdata1"
Xfinal_rsync_opts="-PavpW --del --inplace"
Xmachine_agent=""
Xma_conf=""
Xmysql_57=false
X
X#
X# make sure that we are running as the appdynamics user in db.cnf
X# if this is root, then we don't need a privilege escalation method
X#
Xif [ `id -u` -eq 0 ] ; then
X	if [ $RUNUSER != root ] ; then
X		fatal 1 "replicate must run as $RUNUSER"
X	fi
X	running_as_root=true
Xelse
X	running_as_root=false
Xfi
X
X# wrapping bag of portable checks for installed service
Xfunction check_installed_service {
X   	(( $# == 1 )) || abend "check_installed_service: needs 1 arg"
X	
X   	local svc_name=$1
X   	local chkconfig=$(which /sbin/chkconfig 2>/dev/null)		# returns path if exists
X   	local lservice=$service_bin
X
X   	[[ -f /etc/init.d/$svc_name ]] || return 1
X	
X   	if [[ -n "$chkconfig" ]] ; then
X		return $($chkconfig --list $svc_name >/dev/null 2>&1)
X   	fi
X
X   	return $($lservice --status-all 2>/dev/null| grep -q '\b'$svc_name'\b')
X}
X
X# wrapping bag of portable checks for installed remote service
Xfunction remote_check_installed_service {
X   	(( $# == 2 )) || abend "check_installed_service: needs 2 args"
X
X   	local host=$1
X   	local svc_name=$2
X   	local chkconfig=$($SSH -q $host "which /sbin/chkconfig" 2>/dev/null)
X   	local lservice=$service_bin
X
X   	$SSH -q $host bash -c "test -f /etc/init.d/$svc_name" || return 1
X
X   	if [[ -n "$chkconfig" ]] ; then
X      		return $($SSH -q $host "$chkconfig --list $svc_name >/dev/null 2>&1")
X   	fi
X
X   	return $($SSH -q $host "$lservice --status-all 2>/dev/null" | grep -qw "$svc_name")
X}
X
X# verify that a required executable / package is installed
X# complain and return 1 if not
X# local and remote
Xfunction require() {
X	ret=0
X	# args: executable "redhat package" "debian package" 
X	if ! [[  -x `which $1 2>/dev/null` ]] ; then
X		echo "Unable to find $1 in $PATH"
X		echo "Please install with:"
X		if [[ -x `which apt-get 2>/dev/null` ]] ; then
X			echo "apt-get update && apt-get install $3"
X		elif [[ -x `which yum 2>/dev/null` ]] ; then
X			echo "yum install $2"
X		fi
X		ret=1
X	fi
X	if ! $SSH -q $secondary which $1 2>&1 >/dev/null ; then
X		echo "Unable to find $1 in $PATH on $secondary"
X		echo "Please install with:"
X		if $SSH $secondary which apt-get 2>&1 >/dev/null ; then
X			echo "apt-get update && apt-get install $3"
X		elif $SSH $secondary which yum 2>&1 >/dev/null ; then
X			echo "yum install $2"
X		fi
X		ret=1
X	fi
X	return $ret
X}
X
Xfunction stop_appdynamics_services()
X{
X	local host=$1
X	local errors=0
X	for s in ${appdynamics_service_list[@]}
X	do 
X		if [ -z "$host" ] ; then
X			service $s stop || ((errors++))
X		else
X			remservice -tq $host $s stop || ((errors++))
X		fi
X	done
X	return $errors;
X}
X
Xfunction verify_init_scripts()
X{
X	if [ -f $APPD_ROOT/HA/NOROOT ] ; then
X		return 0
X	fi
X	local host=$1
X	local ssh=`[ -n "$host" ] && echo "$SSH -q"`
X	local errors=0
X	local NEWMD5=
X	for s in ${appdynamics_service_list[@]}
X	do 
X		NEWMD5=$(md5sum $APPD_ROOT/HA/$s.sh | cut -d " " -f 1)
X		if [[ "$NEWMD5" != `$ssh $host md5sum /etc/init.d/$s|cut -d " " -f 1` ]] ; then
X			((errors++))
X		fi
X	done
X	if [ $errors -gt 0 ] ; then
X		if [ -z $host ] ; then
X			echo "\
XOne or more AppDynamics init scripts are not installed or are out of date.
XPlease run $APPD_ROOT/HA/install-init.sh as root before proceeding."
X		else
X			echo "\
XOne or more AppDynamics init scripts are not installed or are out of date on
X$host. Please run $APPD_ROOT/HA/install-init.sh as root on $host
Xbefore proceeding."
X		fi
X	fi
X	return $errors;
X}
X
Xfunction get_privilege_escalation(){
X	local host=$1
X	local ssh=`[ -n "$host" ] && echo "$SSH -q"`
X	local escalation_type=
X	local errors=0
X	for s in ${appdynamics_service_list[@]}
X	do 
X		if $ssh $host test -f $APPD_ROOT/HA/NOROOT ; then
X			escalation_type="noroot"
X		elif $ssh $host test -x /sbin/appdservice ; then
X			if $ssh $host file /sbin/appdservice | grep -q setuid ; then
X				escalation_type="setuid"
X			else
X				escalation_type="pbrun"
X			fi
X		else
X			$ssh $host sudo -nl $service_bin $s start > /dev/null 2>&1 || ((errors++))
X			$ssh $host sudo -nl $service_bin $s stop > /dev/null 2>&1 || ((errors++))
X			if  [ $errors -lt 1 ] ; then
X				escalation_type="sudo"
X			else
X				escalation_type="unknown"
X			fi
X		fi
X	done
X	echo $escalation_type
X	return $errors
X}
X
Xfunction verify_privilege_escalation(){
X	local host=$1
X	local errors=0
X	local local_priv_escalation=
X	local remote_priv_escalation=
X
X	local_priv_escalation=$(get_privilege_escalation)
X	if [ $? -gt 0 ] ; then
X		echo "\
XUser $RUNUSER is unable to start and stop appdynamics services
XPlease ensure that $APPD_ROOT/HA/install-init.sh has been run."
X		((errors++))
X	fi
X
X	remote_priv_escalation=$(get_privilege_escalation $host)
X	if [ $? -gt 0 ] ; then
X		echo "\
XUser $RUNUSER is unable to start and stop appdynamics services on $host.
XPlease ensure that $APPD_ROOT/HA/install-init.sh has been run on $host."
X		((errors++))
X	fi
X	
X	if [ $errors -lt 1 ] && [ "$local_priv_escalation" != "$remote_priv_escalation" ] ; then
X		echo "\
XThe primary and secondary hosts are not using the same privilege escalation
Xwrapper.
X
XPrimary:   $local_priv_escalation
XSecondary: $remote_priv_escalation
X
XPlease re-run install-init.sh on one or both hosts with the same options."
X		((errors++))
X	fi
X	return $errors
X}
X
Xfunction secondary_set_node_name() {
X#
X# write the secondary hostname into the node-name property
X#
X	ci_tmp=/tmp/ci-$$.xml
X	rm -f $ci_tmp
X	message "setting up controller agent on secondary"
X	for ci in ${controller_infos[*]} ; do
X		$SCP $secondary:$ci $ci_tmp
X		controller_info_set $ci_tmp node-name $secondary
X		$SCP $ci_tmp $secondary:$ci
X	done
X	rm -f $ci_tmp
X}
X
Xfunction usage()
X{
X	if [ $# -gt 0 ] ; then
X		echo "$*"
X	fi
X	echo "usage: $0 <options>"
X	echo "    -s <secondary hostname>"
X	echo "    [ -j ] Synchronize controller app server configurations and related binaries"
X	echo "    [ -e [protocol://]<external vip>[:port] ]"
X	echo "    [ -i [protocol://]<internal vip>[:port] ]"
X	echo "    [ -m <monitoring descriptor> see setmonitor.sh -h"
X	echo "    [ -a <machine agent install directory> ]"
X	echo "    [ -f ] confirm & do final install and activation"
X        echo "    [ -F ] just do final install and activation - no confirm"
X	echo "    [ -t [rsync speed limit]]" if unspecified or 0, unlimited
X	echo "    [ -U ] unencrypted rsync"
X	echo "    [ -z ] enable rsync compression"
X#	echo "    [ -u ] upgrade fixup"
X	echo "    [ -M ] inhibit ssh connectivity check"
X	echo "    [ -E ] unbreak replication"
X	echo "    [ -n ] no appserver start"
X	echo "    [ -S ] enable SSL for replication traffic"
X	echo "    [ -w ] enable watchdog on secondary"
X	echo "    [ -W ] use wildcard host in grant"
X	echo "    [ -7 ] enable parallel replication for mysql 5.7"
X	echo "    [ -h ] print help"
X	echo "    [ -X ] use backup for hot sync"
X	exit 1
X}
X
X#
X# only allow one replicate at a time
X#
Xif [ -f $INTERLOCK ] ; then
X	#
X	# since we scribble our pid into the interlock file
X	# this is a soft test for a valid interlock
X	#
X	repl_pid=$(cat $INTERLOCK)
X	if [ -d /proc/$(cat $INTERLOCK) ] ; then
X		echo "only one replicate is allowed at a time; please check"
X		echo "pid $repl_pid, and remove $INTERLOCK only if it is not a replicate"
X		exit 1
X	fi
X	rm -f $INTERLOCK
Xfi
Xecho $$ > $INTERLOCK
X
Xlog_rename
X
X#
X# log versions and arguments
X#
Xmessage "replication log " `date` "for pid $$"
Xmessage "version: " `grep '$Id' $0 | head -1`
Xmessage "command line options: " "$@"
Xmessage "hostname: " `hostname`
Xmessage "appd root: $APPD_ROOT"
Xmessage "appdynamics run user: $RUNUSER"
X
Xwhile getopts :s:e:m:a:i:dfhjut:nwzEFHMWUS7X flag; do
X	case $flag in
X	7)
X		mysql_57=true
X		;;
X	d)
X		debug=true
X		;;
X	s)
X		secondary=$OPTARG
X		;;
X	e)
X		external_vip=$OPTARG
X		;;
X	U)
X		unencrypted=true
X		;;
X	i)
X		internal_vip=$OPTARG
X		;;
X	m)
X		monitor_def="$OPTARG"
X		monitor_def_flag="-m"
X		;;
X	j)
X		appserver_only_sync=true
X	    	;;
X	n)
X		start_appserver=false
X		;;
X	M)
X		touch NO_SSH_CHECK
X		;;
X	w)
X		watchdog_enable=true
X		;;
X	S)
X		ssl_replication=true
X		;;
X	X)
X		if grep -q ^server-id $APPD_ROOT/db/db.cnf ; then
X			hotsync=true
X		else
X			echo "HA not enabled - hot sync not possible"
X		fi
X		;;
X	u)
X		upgrade=true
X		echo "upgrade currently unsupported"
X		exit 8
X		;;
X	:)
X		# optional arguments are handled here
X		if [ $OPTARG = 't' ] ; then
X			rsync_throttle=""
X		else
X			echo "option '$OPTARG' requires a value" 1>&2
X			usage
X		fi
X		;;
X	t)
X		if echo $OPTARG | grep -q '^-' ; then
X			((OPTIND--))
X			OPTARG=0
X		fi
X		if [ $OPTARG -eq 0 ] ; then
X			rsync_throttle=""
X		else
X			rsync_throttle="--bwlimit=$OPTARG"
X		fi
X		;;
X	z)
X		rsync_compression="-z"
X		;;
X	a)
X		machine_agent=$(readlink -e "$OPTARG")
X		[[ -f "$machine_agent/machineagent.jar" ]] || fatal 1 "-a directory $machine_agent is not a machine agent install directory"
X		;;
X	F)
X		final=true
X		;;
X	W)
X		wildcard=true
X		;;
X	E)
X		echo "type 'confirm' to re-enable replication"
X		read confirm
X		if [ "$confirm" != confirm ] ; then
X			exit 2;
X		fi
X		unbreak=true
X		;;	
X	f)
X		echo "type 'confirm' to stop appserver and install HA"
X		read confirm
X		if [ "$confirm" != confirm ] ; then
X			exit 2;
X		fi
X		final=true
X		;;
X	h)
X		if [ -f README ] ; then
X			if [ -z "$PAGER" ] ; then
X				PAGER=cat
X			fi
X			$PAGER README
X		fi
X		usage
X		;;
X	H|*)
X		if [ $flag != H ] ; then
X			echo "unknown option flag $OPTARG"
X		fi
X		usage
X		;;
X	esac
Xdone
Xshift $((OPTIND-1))
Xif [ $# -ne 0 ] ; then
X	usage "bad argument: $1"
Xfi
X
Xif [ -z "$secondary" ] ; then
X	usage "secondary hostname must be set"
Xfi
X
X# find the java - we might need to copy it.
Xif ! export JAVA=$(find_java) ; then
X	fatal 10 "cannot find java"
Xfi
X
X#
X# search for a machine agent in a few likely places
X#
Xif [ -z "$machine_agent" ] ; then
X	machine_agent=(`find_machine_agent`)
X	if [ ${#machine_agent[@]} -gt 1 ] ; then
X		echo too many machine agents: ${machine_agent[@]}
X		echo select one, and specify it using -a
X		usage
X		exit 1
X	fi
Xfi
X
Xif [ -f NO_MACHINE_AGENT ] ; then
X	message "suppressing machine agent processing"
X	machine_agent=""
Xfi
X
Xif [ -n "$machine_agent" ] ; then
X	ma_conf="$machine_agent/conf"
X	message "found machine agent in $machine_agent"
X	message "copying monitors"
X	cp -r monitors/* "$machine_agent/monitors"
X	chmod +x "$machine_agent"/monitors/*/*.sh
Xfi
X
Xif [ -z "$internal_vip" ] ; then
X	internal_vip=$external_vip
X	if [ -z "$internal_vip" ] ; then
X		internal_vip=localhost
X	fi
Xfi
X
Xeval `parse_vip external_vip $external_vip`
Xeval `parse_vip internal_vip $internal_vip`
X
X# sanity check - verify that the appd_user and the directory owner are the same
Xcheck_sanity
Xif [ `ls -ld .. | awk '{print $3}'` != `id -un` ] ; then
X	echo "Controller root directory not owned by current user"
X	exit 1
Xfi
X
X# check 2-way passwordless ssh works
Xmessage "checking 2-way passwordless ssh"
Xcheck_ssh_setup $secondary || fatal 1 "2-way passwordless ssh healthcheck failed"
X
Xif $appserver_only_sync && $final ; then
X	fatal 1 "\
X		App-server-only and final sync modes are mutually exclusive.  \
X		Please run with -j or -f, not both."
Xfi
X
Xrequire "ex" "vim-minimal" "vim-tiny" || exit 1
Xrequire "rsync" "rsync" "rsync" || exit 1
X
X#
X# kill a remote rsyncd if we have one
X#
Xfunction kill_rsyncd() {
X	rsyncd_pid=`$SSH $secondary cat /tmp/replicate.rsync.pid 2>/dev/null`
X	if [ ! -z "$rsyncd_pid" ] ; then
X		$SSH $secondary kill -9 $rsyncd_pid
X	fi
X	$SSH $secondary rm -f /tmp/replicate.rsync.pid
X}
X
Xfunction cleanup() {
X	if [ -n "$secondary" ] ; then
X		$SSH $secondary rm -rf $tmpdir
X	fi
X	rm -rf $tmpdir
X	kill_rsyncd
X	rm -f $INTERLOCK
X}
X
Xif ! $debug ; then
X	trap cleanup EXIT
Xfi
X
Xcleanup
Xmkdir -p $tmpdir
X
Xfunction handle_interrupt(){
X	echo "Caught interrupt."
X	if [[ -n `jobs -p` ]] ; then
X		echo "Killing child processes."
X		kill $(jobs -p) 2>/dev/null
X	fi
X	echo "Exiting"
X	exit
X}
X
X#
X# helper function to wrap running a command and dying if it fails
X#
Xfunction runcmd {
X	local cmd="$*"
X	if ! $cmd ; then
X		fatal 1 "\"$cmd\" command failed"
X	fi
X}
X
Xfunction logcmd {
X	local cmd=($*)
X	# declare -p cmd
X	echo "${cmd[*]}" | logonly
X	${cmd[*]} | logonly 2>&1
X}
X
Xtrap handle_interrupt INT
X
X#
X# make sure we are running as the right user
X#
Xif [ -z "$RUNUSER" ] ; then
X	fatal 1 user not set in $APPD_ROOT/db/db.cnf
Xfi
X
X#
X# find a compatible cipher - important for speed
X#
Xfor ssh_crypto in aes128-gcm@openssh.com aes128-ctr aes128-cbc arcfour128 3des-cbc lose ; do
X	if $SSH -c $ssh_crypto $secondary true >/dev/null 2>&1 ; then
X		break;
X	fi
Xdone
Xif [ "$ssh_crypto" = "lose" ] ; then
X	message "default crypto"
X	export RSYNC_RSH=$SSH
Xelse
X	message "using $ssh_crypto crypto"
X	export RSYNC_RSH="$SSH -c $ssh_crypto"
Xfi
X
X#
X# get the list of controller-info files
X#
Xcontroller_infos=($(find $APPD_ROOT/appserver/glassfish/domains/domain1/appagent -name controller-info.xml -print))
X
X#
X# make sure we aren't replicating to ourselves!
X#
Xmyhostname=`hostname`
Xthemhostname=`$SSH $secondary hostname 2>/dev/null`
X
Xif [ "$myhostname" = "$themhostname" ] ; then
X	fatal 14 "self-replication meaningless"
Xfi
X
X#
X# unbreak replication: only if both sides are kinda happy
X#
Xif $unbreak ; then
X	$SCP $APPD_ROOT/bin/controller.sh $secondary:$APPD_ROOT/bin	
X
X	sql $secondary \
X		"update global_configuration_local set value='passive' where name = 'appserver.mode';"
X	sql $secondary \
X		"update global_configuration_local set value='secondary' where name = 'ha.controller.type';"
X	if ! sql $secondary "select value from global_configuration_local" | \
X		grep passive ; then
X		fatal 17 "cannot unbreak - database on $secondary down"
X	fi
X	dbcnf_unset skip-slave-start
X	dbcnf_unset skip-slave-start $secondary
X	sql localhost "start slave"
X	sql $secondary "start slave"
X	./appdstatus.sh
X	exit 0
Xfi
X
Xdatadir=`grep ^datadir $APPD_ROOT/db/db.cnf | cut -d = -f 2`
Xinnodb_logdir=`grep ^innodb_log_group_home_dir $APPD_ROOT/db/db.cnf | cut -d = -f 2`
Xif [ -z "$innodb_logdir" ] ; then
X	innodb_logdir="$datadir"
Xfi
X
Xif $unencrypted ; then
X	export RSYNC_RSH=$SSH
X	RSYNC_PORT=10000
X	while echo "" | nc $secondary $RSYNC_PORT >/dev/null 2>&1 ; do
X		RSYNC_PORT=$((RSYNC_PORT+1))
X	done
X	ROOTDEST=rsync://$secondary:$RSYNC_PORT/default$APPD_ROOT
X	DATADEST=rsync://$secondary:$RSYNC_PORT/default$datadir
X	MADEST="rsync://$secondary:$RSYNC_PORT/default$machine_agent"
X	JAVADEST="rsync://$secondary:$RSYNC_PORT/default${JAVA%bin/java}"
X	kill_rsyncd
X	$SSH $secondary mkdir -p $APPD_ROOT/HA
X	$SCP -q $APPD_ROOT/HA/rsyncd.conf $secondary:$APPD_ROOT/HA/rsyncd.conf
X	$SSH $secondary rm -f /tmp/rsyncd.log
X	$SSH $secondary rsync --daemon --config=$APPD_ROOT/HA/rsyncd.conf \
X		--port=$RSYNC_PORT
Xelse
X	ROOTDEST=$secondary:$APPD_ROOT
X	DATADEST=$secondary:$datadir
X	MADEST="$secondary:$machine_agent"
X	JAVADEST="$secondary:${JAVA%bin/java}"
Xfi
X
Xif ! $appserver_only_sync ; then
X
X	#
X	# sanity check: make sure we don't have the controller.sh interlock active.
X	# if there's no controller.sh file, we are the target of an incremental!
X	message "assert non-incremental"
X	if ! [ -x $APPD_ROOT/bin/controller.sh ] ; then
X		fatal 15 "copying from disabled controller - BOGUS!"
X	fi
X
X	#
X	# make sure that the primary database is up.  if not, start it
X	#
X	if echo "exit" | $APPD_ROOT/HA/mysqlclient.sh 2>&1 | grep -q "ERROR 2003" ; then
X		message "starting primary database"
X		$APPD_ROOT/bin/controller.sh start-db | logonly 2>&1
X	fi
X
X	#
X	# make sure replication has stopped
X	#
X	message "stopping replication"
X	sql localhost "STOP SLAVE;RESET SLAVE ALL;RESET MASTER;" >/dev/null 2>&1
X
X	#
X	# sanity check: make sure we are not the passive side. replicating the
X	# broken half of an HA will be a disaster!  
X	# this requires the database to be running on the active side.
X	#
X	message "assert active side"
X	if [ "`get_replication_mode localhost`" != active ] ; then
X		fatal 3 "copying from non-active controller - BOGUS!"
X	fi
X
X	#
X	# force the ha.controller.type to primary, 
X	# this should kill the assassin if it running.
X	#
X	message "force primary"
X	sql localhost "update global_configuration_local set value='primary' \
X		where name = 'ha.controller.type';"
X
X	#
X	# flush tables on the primary
X	# this is to force mtimes to sync up with reality on an imperfect copy
X	#
X	message "flush tables"
X	sql localhost "flush tables;"
X
X	# stop the secondary database (and anything else)
X	# this may fail totally
X	#
X	message "stopping secondary db if present"
X	( stop_appdynamics_services $secondary || $SSH $secondary bash -c "test -x $APPD_ROOT/bin/controller.sh && $APPD_ROOT/bin/controller.sh stop" ) | logonly 2>&1
X
X	#
X	# the secondary loses controller.sh until we are ready
X	# this inhibits starting an incomplete controller
X	#
X	message "inhibit running of secondary and delete mysql/innodb logfiles"
X	$SSH $secondary rm -f $APPD_ROOT/bin/controller.sh \
X		"$innodb_logdir/ib_logfile*" \
X		"$datadir/*log*" \
X		$datadir/ibdata1 2>&1 | logonly
X	
X	#
X	# disable automatic start of replication slave
X	#
X	dbcnf_set skip-slave-start true
Xfi
X
X#
X# if final, make sure the latest init scripts are installed and stop the primary database
X#
Xif $final ; then
X
X	# make sure the latest init scripts are installed on both hosts
X	if $running_as_root ; then
X		$APPD_ROOT/HA/install-init.sh
X		$SSH $secondary $APPD_ROOT/HA/install-init.sh
X	else
X		if ! verify_init_scripts; then
X			missing_init="true" 
X		fi
X		if ! verify_init_scripts $secondary ; then
X			missing_init="true"
X		fi
X		if [ "$missing_init" = "true" ] ; then
X			fatal 7 "Cannot proceed"
X		fi
X		# verify that we can cause service state changes
X		if ! verify_privilege_escalation $secondary ; then
X			bad_privilege_escalation="true"
X		fi
X		if [ "$bad_privilege_escalation" = "true" ] ; then
X			fatal 9 "Cannot proceed"
X		fi
X	fi
X
X	if [ -x numa-patch-controller.sh ] ; then
X		message "patching controller.sh for numa"
X		./numa-patch-controller.sh
X	fi
X	if [[ -x userid-patch-controller.sh ]] ; then
X		message "patching controller.sh to avoid userid startup/shutdown issues"
X		./userid-patch-controller.sh
X	fi
X
X	if $hotsync ; then
X		message "using backup - no need to stop primary"
X	else
X		message "stopping primary"
X		sql localhost "set global innodb_fast_shutdown=0;"
X		rsync_opts=$final_rsync_opts
X		rsync_throttle=""
X		( stop_appdynamics_services || $APPD_ROOT/bin/controller.sh stop ) | logonly 2>&1
X	fi
Xfi
X
X#
X# make sure the db.cnf is HA-enabled.  if the string ^server-id is not there,
X# then the primary has not been installed as an HA.
X#
Xmessage "checking HA installation"
Xif grep -q ^server-id $APPD_ROOT/db/db.cnf ; then
X	message "server-id present"
Xelse
X	message "server-id not present"
X	cat <<- 'ADDITIONS' >> $APPD_ROOT/db/db.cnf
X	# Replication -- MASTER MASTER (for HA installs) -- Should be appended 
X	# to the end of the db.cnf file for the PRIMARY controller.
X	binlog_cache_size=1M
X	max_binlog_cache_size=10240M
X	log_bin=bin-log
X	log_bin_index=bin-log.index 
X	relay_log=relay-log
X	relay_log_index=relay-log.index
X	innodb_support_xa=1
X	sync_binlog=1
X	log-slow-slave-statements
X	# avoid bin-log writes on secondary
X	log_slave_updates=0
X	# set compression off if cpu is tight
X	slave_compressed_protocol=1
X	server-id=666  #  this needs to be unique server ID !!!
X	replicate-same-server-id=0
X	auto_increment_increment=10
X	auto_increment_offset=1
X	expire_logs_days=3
X	binlog_format=MIXED
X	replicate_ignore_table=controller.ejb__timer__tbl
X	replicate_ignore_table=controller.connection_validation
X	replicate_ignore_table=controller.global_configuration_local
X	replicate_wild_ignore_table=controller.mq%
X	replicate_wild_ignore_table=mysql.%
X	slave-skip-errors=1507,1517,1062,1032,1451
X	# added to speed up startup
X	innodb_stats_sample_pages=1
X	ADDITIONS
X	if $mysql_57 ; then
X	cat <<- 'ADDITIONS_FOR_57' >> $APPD_ROOT/db/db.cnf
X	slave_parallel_type=LOGICAL_CLOCK
X	slave_parallel_workers=10
X	slave_preserve_commit_order=0
X	slave_pending_jobs_size_max=1g
X	gtid-mode=ON
X	enforce-gtid-consistency=ON
X	ADDITIONS_FOR_57
X	fi
Xfi
X
Xdbcnf_set socket $datadir/mysql.sock
X
X#
X# force server id - for failback
X#
Xdbcnf_set server-id 666
X
X#
X# make an empty directory on the secondary if needed
X#
Xmessage "mkdir if needed"
Xruncmd $SSH $secondary mkdir -p $APPD_ROOT
Xruncmd $SSH $secondary mkdir -p $datadir
X
X#
X# do a permissive chmod on the entire destination
X#
Xmessage "chmod destination"
Xruncmd $SSH $secondary "find $APPD_ROOT -type f -exec chmod u+wr {} +"
X
X#
X# check date on both nodes.  rsync is sensitive to skew
X#
Xmessage "checking clocks"
Xmessage "primary date: " `date`
Xmessage "secondary date: " `$SSH $secondary date`
Xrmdate=`$SSH $secondary date +%s`
Xlodate=`date +%s`
Xskew=$((rmdate-lodate))
Xif [ $skew -gt 60 ] || [ $skew -lt -60 ]; then
X	fatal 6 unacceptable clock skew: $rmdate $lodate $skew
Xfi
Xmessage "clock skew: $skew"
X
Xif $appserver_only_sync ; then
X	message "Rsync'ing controller app server only: $APPD_ROOT"
X	rsync $rsync_opts $rsync_throttle $rsync_compression               \
X	    --exclude=app_agent_operation_logs/\*                          \
X		--exclude=db/\*                                                \
X		--exclude=logs/\*                                              \
X		--exclude=tmp\*                                                \
X		--exclude=license.lic					\
X		$APPD_ROOT/ $ROOTDEST
X		message "Rsyncs complete"
X		secondary_set_node_name
X		message "removing osgi-cache and generated"
X		$SSH $secondary rm -rf \
X			$APPD_ROOT/appserver/glassfish/domains/domain1/osgi-cache/\* \
X			$APPD_ROOT/appserver/glassfish/domains/domain1/generated/\*
X		message "App server only sync done"
X	exit 0
Xfi
X
X#
X# clean out the old relay and bin-logs
X#
Xmessage "Removing old replication logs"
X$SSH $secondary "find $datadir -print | grep bin-log | xargs rm  -f"
X$SSH $secondary "find $datadir -print | grep relay-log | xargs rm  -f"
X$SSH $secondary rm -f $datadir/master.info
X
Xif ! $hotsync ; then
X	runcmd rm -f $datadir/bin-log* $datadir/relay-log* $datadir/master.info
X	#
X	# maximum paranoia:  build summaries for the data files and 
X	# prune differences
X	# caution: gnarly quoting
X	#
X	# ibd files only do the 32kb at 256MB boundaries
X	# innodb files have the following gross structure: 
X	#
X	# 16k file space header block - contains space id and extent map
X	# 16k insert buffer bit map
X	# <256MB - 32kb> data                
X	#
X	# 16k extent map                     | optional repeats
X	# 16k insert buffer bit map          |
X	# <256MB - 32kb> data                |
X	#
X	# all other files, the whole thing
X	#
X	message "Building data file maps"
X
X	rm -f $tmpdir/ha.makemap \
X		$tmpdir/map.local $tmpdir/map.remote \
X		$tmpdir/worklist $tmpdir/difflist
X
Xcat <<- MAPPROG >$tmpdir/ha.makemap
Xfind $datadir -type f -print | awk '
XBEGIN {
X	hunksize = (256 * 1024 * 1024);
X}
X{
X        file = \$1;
X        if (match(file, ".ibd\$")) {
X        	stat = "stat --format=%s "file;
X        	stat | getline size;
X        	close(stat);
X                cmd = "(";
X                hunks = int(size / hunksize) + 1;
X                for (hunk = 0; hunk < hunks; hunk++) {
X                        skip = (hunk * hunksize) / 16384;
X                        cmd = cmd"dd if="file" bs=16k count=2 skip="skip";";
X                }
X                cmd = cmd")";
X        } else {
X                cmd = "dd if="file
X        }
X        cmd = cmd" 2> /dev/null | sha1sum -";
X        cmd | getline sha1;
X        close(cmd);
X        print file, sha1;
X}' > $tmpdir/map.local
XMAPPROG
X
X	$SSH $secondary mkdir -p $datadir $tmpdir
X	$SCP $tmpdir/ha.makemap $secondary:$tmpdir
X	
X	bash $tmpdir/ha.makemap
X	sort -u $tmpdir/map.local > $tmpdir/map.local.sort
X
X	$SSH $secondary bash $tmpdir/ha.makemap
X	$SCP $secondary:$tmpdir/map.local $tmpdir/map.remote
X	sort -u $tmpdir/map.remote > $tmpdir/map.remote.sort
X
X	# the difflist is all files different md5's or non-existent on one
X	diff $tmpdir/map.local.sort $tmpdir/map.remote.sort | awk '/^[><]/ {print $2}' | sort -u > $tmpdir/difflist
X
X	# the worklist is all files that are different that exist on remote
X	fgrep -f $tmpdir/difflist $tmpdir/map.remote | awk '{print $1}' > $tmpdir/worklist
X
X	discrepancies=`wc -w $tmpdir/worklist | awk '{print $1}'`
X	if [ $discrepancies -gt 0 ] ; then
X		message "found $discrepancies discrepancies"
X		cat $tmpdir/worklist | logonly
X		$SCP -q $tmpdir/worklist $secondary:/tmp/replicate-prune-worklist
X		$SSH $secondary "cat /tmp/replicate-prune-worklist | xargs rm -f"
X	else
X		message "no discrepancies"
X	fi
Xfi
X
X#
X# copy the controller + data to the secondary
X#
X
Xmessage "Rsync'ing Controller: $APPD_ROOT"
Xif ! echo $JAVA | grep -q $APPD_ROOT ; then
X	message "Rsync'ing java: $JAVA"
X	$SSH $secondary mkdir -p	${JAVA%bin/java}
X	logcmd rsync $rsync_opts \
X		$rsync_throttle $rsync_compression \
X		${JAVA%bin/java} $JAVADEST
Xfi
X
Xlogcmd rsync $rsync_opts \
X	$rsync_throttle $rsync_compression \
X	--exclude=lost+found \
X	--exclude=bin/controller.sh \
X	--exclude=license.lic \
X	--exclude=HA/\*.pid \
X	--exclude=db/\*.pid \
X	--exclude=logs/\* \
X	--exclude=db/data \
X	--exclude=db/bin/.status \
X	--exclude=app_agent_operation_logs \
X	--exclude=appserver/glassfish/domains/domain1/appagent/logs/\* \
X	--exclude=tmp \
X	$APPD_ROOT/ $ROOTDEST
X
Xif [ -n "$machine_agent" ] ; then
X	message "Rsync'ing Machine Agent: $machine_agent"
X	logcmd rsync $rsync_opts \
X		$rsync_throttle $rsync_compression \
X		"$machine_agent/" "$MADEST"
Xfi
X
Xif $hotsync ; then
X	message "hot sync"
X	sql localhost "RESET MASTER; RESET SLAVE;"
X	percona/bin/xtrabackup \
X		--defaults-file=/opt/AppDynamics/Controller/db/db.cnf \
X		--innodb-log-group-home_dir=$innodb_logdir \
X		--backup \
X		--user=root --password=secret \
X		--socket=/ssd/data/mysql.sock \
X		--stream=tar 2>/dev/null | $SSH $secondary tar --extract --file=- --directory=$datadir
X	$SSH $secondary rm -f $innodb_logdir/ib_logfile\* $datadir/ib_logfile\*
X	$SSH $secondary $APPD_ROOT/HA/percona/bin/xtrabackup --prepare --target-dir=$datadir --innodb-log-group-home_dir=$innodb_logdir
X	if [ "$datadir" != "$innodb_logdir" ] ; then
X		$SSH $secondary mv $datadir/ib_logfile\* $innodb_logdir
X	fi
Xelse
X	message "Rsync'ing Data: $datadir"
X	logcmd rsync $rsync_opts \
X		$rsync_throttle $rsync_compression \
X		--exclude=lost+found \
X		--exclude=ib_logfile\* \
X		--exclude=bin-log\* \
X		--exclude=relay-log\* \
X		--exclude=\*.log \
X		--exclude=master.info \
X		--exclude=\*.pid \
X		--exclude=auto.cnf \
X		$datadir/ $DATADEST
X	message "Rsyncs complete"
Xfi
X
Xif $final ; then
X
X	if $running_as_root ; then
X		$SSH $secondary $APPD_ROOT/HA/install-init.sh
X	fi
X
Xfi
X
X#
X# edit the secondary to change the server id
X#
Xmessage "changing secondary server id"
Xdbcnf_set server-id 555 $secondary
X
X#
X# if we're only do incremental, then no need to stop primary
X#
Xif ! $final ; then
X	#
X	# validate init scripts and sudo config
X	# and warn user if they need to be updated before final
X	#
X	if ! $running_as_root ; then
X		errors=0
X		verify_init_scripts || ((errors++))
X		verify_init_scripts $secondary || ((errors++))
X		if [ $errors -lt 1 ] ; then
X			verify_privilege_escalation $secondary
X		fi
X	fi
X	message "incremental sync done $(date)"
X	exit 0
Xfi
X
Xif ! $hotsync ; then
X	#
X	# restart the primary db
X	#
X	for logdir in $APPD_ROOT/logs $APPD_ROOT/db/logs ; do
X		if [ -f $logdir/database.log ] ; then
X			message "rename database log file in $logdir"
X			mv $logdir/database.log $logdir/database.log.`date +%F.%T`
X			touch $logdir/database.log
X		fi
X	done
X
X	message "starting primary database"
X	# Do not proceed unless the primary starts cleanly or we could end up with
X	#  unexpected failovers.
X	if ! service appdcontroller-db start | logonly 2>&1 ; then
X		fatal 1 "failed to start primary database.  Exiting..."
X	fi
X
X	#
X	# plug the various communications endpoints into domain.xml
X	#
X	if [ -n "$external_vip" ] ; then
X		message "edit domain.xml deeplink"
X		domain_set_jvm_option appdynamics.controller.ui.deeplink.url \
X			"$external_vip_protocol://$external_vip_host:$external_vip_port/controller"
X		message "set services host and port"
X		domain_set_jvm_option appdynamics.controller.services.hostName $external_vip_host
X		domain_set_jvm_option appdynamics.controller.services.port $external_vip_port
X	fi
Xfi
X
X#
X# send the domain.xml
X#
Xmessage "copy domain.xml to secondary"
Xruncmd $SCP -q -p $APPD_ROOT/appserver/glassfish/domains/domain1/config/domain.xml $secondary:$APPD_ROOT/appserver/glassfish/domains/domain1/config/domain.xml
X
Xif ! $hotsync ; then
X	#
X	# write the primary hostname into the node-name property
X	#
X	echo "setting up controller agent on primary"
X	for ci in ${controller_infos[*]} ; do
X		controller_info_set $ci node-name $primary
X	done
Xfi
X
Xsecondary_set_node_name
X
X#
X# call the setmonitor script to set the monitoring host and params
X#
Xif [ -n "$machine_agent" ] ; then
X	ma_def_flag="-a"
X	ma_def="$machine_agent"
Xfi
X./setmonitor.sh -s $secondary -i $internal_vip "$monitor_def_flag" "$monitor_def" "$ma_def_flag" "$ma_def"
X
Xif $wildcard ; then
X	grant_primary='%'
X	grant_secondary='%'
X	grant_primary_users="'controller_repl'@'${grant_primary}' IDENTIFIED BY 'controller_repl'"
X	grant_secondary_users="'controller_repl'@'${grant_secondary}' IDENTIFIED BY 'controller_repl'"
Xelse
X	#
X	# Use all /etc/hosts names for both primary and secondary for MySQL GRANT commands - 
X	# more robust in the event that /etc/hosts has missing fully qualified names on one
X	# host or other /etc/hosts inconsistencies between HA nodes
X	# Add to this list the FQDN that MySQL may be able to lookup.
X	#
X	grant_primary=$(get_names $(hostname) <<< "$(getent hosts $(hostname))" )
X	if [[ -z "$grant_primary" ]] ; then
X		gripe "Local /etc/hosts does not appear to contain an entry for current hostname: $(hostname)"
X		gripe "Please ensure both primary and secondary servers list both servers in their /etc/hosts files...trying to continue"
X		grant_primary=$(hostname)
X	fi
X	grant_secondary=$(get_names $secondary <<< "$($SSH -o StrictHostKeyChecking=no $secondary getent hosts $secondary)")
X	if [[ -z "$grant_secondary" ]] ; then
X		gripe "Secondary /etc/hosts does not appear to contain an entry for its hostname: $secondary"
X		gripe "Please ensure both primary and secondary servers list both servers in their /etc/hosts files...trying to continue"
X		grant_secondary=$secondary
X	fi
X
X	#
X	# let's probe the canonical hostnames from the local database in case this results in different
X	# hostname for MySQL to permit connections from
X	#
X	primary1=`$APPD_ROOT/db/bin/mysql --host=$primary --port=$dbport --protocol=TCP --user=impossible 2>&1 | awk '
X		/ERROR 1045/ { gsub("^.*@",""); print $1;}
X		/ERROR 1130/ { gsub("^.*Host ",""); print $1;}' | tr -d \'`
X	secondary1=`$SSH $secondary $APPD_ROOT/db/bin/mysql --host=$primary --port=$dbport --protocol=TCP --user=impossible 2>&1 | awk '
X		/ERROR 1045/ { gsub("^.*@",""); print $1;}
X		/ERROR 1130/ { gsub("^.*Host ",""); print $1;}' | tr -d \'`
X
X	#
X	# print the canonical hostnames
X	#
X	if [ "$primary1" = 'ERROR' -o "$secondary1" = 'ERROR' -o -z "$primary1" -o -z "$secondary1" ] ; then
X		gripe "cannot establish communications between mysql instances"
X		gripe "check firewall rules"
X		gripe "primary: $primary1"
X		gripe "secondary: $secondary1"
X		$APPD_ROOT/db/bin/mysql --host=$primary --port=$dbport --protocol=TCP --user=impossible 2>&1 | log
X		$SSH $secondary $APPD_ROOT/db/bin/mysql --host=$primary --port=$dbport --protocol=TCP --user=impossible 2>&1 | log
X		fatal 5
X	fi
X	[[ "$primary1" == "localhost" ]] && primary1=""		# lose this contribution if just localhost
X	[[ "$secondary1" == "localhost" ]] && secondary1=""	# lose this contribution if just localhost
X
X	# unique list of hostnames - they might not be reachable though...
X	grant_primary_unique_hosts=$(sort -u <<< "$(printf '%s\n' $grant_primary $primary1)")
X	grant_secondary_unique_hosts=$(sort -u <<< "$(printf '%s\n' $grant_secondary $secondary1)")
X
X	# verify_no_shared_names "$grant_primary_unique_hosts" "$grant_secondary_unique_hosts" || exit 1
X	for i in $grant_primary_unique_hosts ; do
X		for j in $grant_secondary_unique_hosts ; do
X			if [[ "$i" == "$j" ]] ; then
X				fatal 5 "The HA servers share a common hostname or alias '$i'. Please fix this and re-run."
X			fi
X		done
X	done
X
X	# prepare comma separated user string for upcoming SQL grant command - duplicate hosts removed
X	# e.g. 'controller_repl'@'host1','controller_repl'@'host1alias'
X	for i in $grant_primary_unique_hosts; do
X		primary_user_arr+=("'controller_repl'@'$i' IDENTIFIED BY 'controller_repl'")
X	done
X	grant_primary_users=$(IFS=,; echo "${primary_user_arr[*]}")		# comma separate
X	for i in $grant_secondary_unique_hosts; do
X		secondary_user_arr+=("'controller_repl'@'$i' IDENTIFIED BY 'controller_repl'")
X	done
X	grant_secondary_users=$(IFS=,; echo "${secondary_user_arr[*]}")		# comma separate
Xfi
X
Xmessage "primary: $primary grant to: "$grant_primary_unique_hosts
Xmessage "secondary: $secondary grant to: "$grant_secondary_unique_hosts
X
X#
X# do all the setup needed for ssl; db.cnf and cert creation
X#
Xdbcnf_md5=`md5sum $APPD_ROOT/db/db.cnf | cut  -d " " -f 1`
X
X#
X# ssl replication
X# start from scratch
X#
Xrm -rf $CERTS
Xmkdir -p $CERTS
X$SSH $secondary rm -rf $CERTS
X
Xdbcnf_unset ssl
Xdbcnf_unset ssl-ca
Xdbcnf_unset ssl-key
Xdbcnf_unset ssl-cert
Xdbcnf_unset ssl-cipher
X
Xdbcnf_unset ssl $secondary
Xdbcnf_unset ssl-ca $secondary
Xdbcnf_unset ssl-key $secondary
Xdbcnf_unset ssl-cert $secondary
Xdbcnf_unset ssl-cipher $secondary
X
Xif $ssl_replication ; then
X
X	#
X	# make a CA
X	#
X	openssl genrsa 2048 > $CERTS/ca-key.pem 2>/dev/null
X	openssl req -new -x509 -nodes -days 3650 \
X		-key $CERTS/ca-key.pem -out $CERTS/ca-cert.pem -subj "/CN=ca" >/dev/null 2>&1
X
X	#
X	# make a pair of host key pairs
X	#
X	for cn in $primary $secondary ; do
X		base=$CERTS/$cn
X		echo "making host $cn keypair"
X		openssl req -newkey rsa:2048 \
X			-subj "/CN=$cn" -nodes -days 3650 \
X			-keyout $base-private.pem -out $base-public.pem >/dev/null 2>&1
X		openssl rsa -in $base-private.pem -out $base-private.pem >/dev/null 2>&1
X		openssl x509 -req -days 3560 -set_serial 01 \
X			-in $base-public.pem -out $base-cert.pem \
X			-CA $CERTS/ca-cert.pem -CAkey $CERTS/ca-key.pem >/dev/null 2>&1
X	done
X
X	$SCP -q -r $CERTS $secondary:$CERTS
X
X	message "checking SSL configuration in db.cnf"
X
X	dbcnf_set ssl "" 	
X	dbcnf_set ssl-ca "$CERTS/ca-cert.pem"
X	dbcnf_set ssl-key "$CERTS/$primary-private.pem"
X	dbcnf_set ssl-cert "$CERTS/$primary-cert.pem"
X	#dbcnf_set ssl-cipher "AES256-SHA:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA"
X
X	dbcnf_set ssl "" $secondary
X	dbcnf_set ssl-ca "$CERTS/ca-cert.pem" $secondary
X	dbcnf_set ssl-key "$CERTS/$secondary-private.pem" $secondary
X	dbcnf_set ssl-cert "$CERTS/$secondary-cert.pem" $secondary
X	#dbcnf_set ssl-cipher "AES256-SHA:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA" $secondary
X
X	USE_SSL="REQUIRE SSL"
X	PRIMARY_SSL=",MASTER_SSL_CAPATH='$CERTS', MASTER_SSL_CA='$CERTS/ca-cert.pem',MASTER_SSL_KEY='$CERTS/$primary-private.pem',MASTER_SSL_CERT='$CERTS/$primary-cert.pem',MASTER_SSL=1"
X	SECONDARY_SSL=",MASTER_SSL_CAPATH='$CERTS', MASTER_SSL_CA='$CERTS/ca-cert.pem',MASTER_SSL_KEY='$CERTS/$secondary-private.pem',MASTER_SSL_CERT='$CERTS/$secondary-cert.pem',MASTER_SSL=1"
Xelse
X	#
X	# delete all the ssl properties in db.cnf
X	#
X	sed -i '/^[[:space:]]*ssl.*$/d' $APPD_ROOT/db/db.cnf >/dev/null
X	USE_SSL=""
X	PRIMARY_SSL=""
X	SECONDARY_SSL=""
Xfi
X
X#
X# if our db.cnf changed, we need to bounce the local db
X#
Xif [ "$dbcnf_md5" != `md5sum $APPD_ROOT/db/db.cnf | cut  -d " " -f 1` ] ; then
X	if $hotsync ; then
X		message "hot sync not possible - db.cnf changed"
X		exit 1
X	else
X		message "bouncing database"
X		if ! service appdcontroller-db stop ; then
X			fatal 1 "-- failed to start primary database.  Exiting..."
X		fi
X		if ! service appdcontroller-db start ; then
X			fatal 1 "-- failed to start primary database.  Exiting..."
X		fi
X	fi
Xfi
X
X#
X# build the scripts
X#
Xcat >$tmpdir/ha.primary <<- PRIMARY
XSTOP SLAVE;
XRESET SLAVE ALL;
XRESET MASTER;
XDELETE FROM mysql.user where user='controller_repl';
XFLUSH PRIVILEGES;
XGRANT REPLICATION SLAVE ON *.* TO $grant_secondary_users $USE_SSL;
XCHANGE MASTER TO MASTER_HOST='$secondary', MASTER_USER='controller_repl', MASTER_PASSWORD='controller_repl', MASTER_PORT=$dbport $PRIMARY_SSL;
Xupdate global_configuration_local set value = 'active' where name = 'appserver.mode';
Xupdate global_configuration_local set value = 'primary' where name = 'ha.controller.type';
Xtruncate ejb__timer__tbl;
XPRIMARY
X
Xcat > $tmpdir/ha.secondary <<- SECONDARY
XSTOP SLAVE;
XRESET SLAVE ALL;
XRESET MASTER;
XDELETE FROM mysql.user where user='controller_repl';
XFLUSH PRIVILEGES;
XGRANT REPLICATION SLAVE ON *.* TO $grant_primary_users $USE_SSL;
XCHANGE MASTER TO MASTER_HOST='$primary', MASTER_USER='controller_repl', MASTER_PASSWORD='controller_repl', MASTER_PORT=$dbport $SECONDARY_SSL;
Xupdate global_configuration_local set value = 'passive' where name = 'appserver.mode';
Xupdate global_configuration_local set value = 'secondary' where name = 'ha.controller.type';
Xtruncate ejb__timer__tbl;
XSECONDARY
X
X#
X# make all the changes on the primary to force master
X#
Xmessage "setting up primary slave"
Xcat $tmpdir/ha.primary | $APPD_ROOT/HA/mysqlclient.sh | logonly
X
X#
X# now we need a secondary controller.sh
X#
Xmessage "copy controller.sh to secondary"
Xruncmd $SCP -q -p $APPD_ROOT/bin/controller.sh $secondary:$APPD_ROOT/bin
X
X#
X# but disable the appserver
X#
Xmessage "disable secondary appserver"
Xruncmd $SSH $secondary touch $APPD_ROOT/HA/APPSERVER_DISABLE
X
X#
X# make sure the master.info is not going to start replication yet, since it will be
X# a stale log position
X#
Xmessage "remove secondary master.info"
Xruncmd $SSH $secondary rm -f $datadir/master.info
X
X#
X# if there is a secondary doublewrite file, remove it, since it will contain
X# stale entries and prevent a successful database startup
X#
Xdoublewrite_file=$(dbcnf_get innodb_doublewrite_file)
Xif [ -n $doublewrite_file ] ; then
X	runcmd $SSH $secondary rm -f $doublewrite_file
Xfi
X
X#
X# start the secondary database
X#
Xfor logdir in $APPD_ROOT/logs $APPD_ROOT/db/logs ; do
X	if $SSH $secondary test -f $logdir/database.log ; then
X		message "rename secondary database log file in $logdir"
X		$SSH $secondary mv $logdir/database.log $logdir/database.log.`date +%F.%T`
X	fi
Xdone
X
Xmessage "start secondary database"
Xif ! remservice -t $secondary appdcontroller-db start | logonly 2>&1 ; then
X	fatal 10 "could not start secondary database"
Xfi
X
X#
X# ugly hack here - there seems to be a small timing problem
X#
Xmessage "wait for secondary to start"
Xuntil sql $secondary "show databases" | grep -q "information_schema" ; do
X	message "waiting for mysql to start using $secondary" `date`
X	sleep 2
Xdone
X
X#
X# make all the changes on the secondary
X#
Xmessage "setting up secondary slave"
Xcat $tmpdir/ha.secondary | $SSH $secondary $APPD_ROOT/HA/mysqlclient.sh
X
X#
X# close the loop.  make sure the secondary actually got the update
X#
Xif [ "$(get_replication_mode $secondary)" != passive ] ; then
X	fatal 18 "secondary set mode failed"
Xfi
X
Xmessage "removing skip-slave-start from primary"
Xdbcnf_unset skip-slave-start
X
Xmessage "removing skip-slave-start from secondary"
Xdbcnf_unset skip-slave-start $secondary
X
X#
X# if hot sync, set the log position
X#
Xif $hotsync ; then
X	read log_file log_offset <<< $($SSH $secondary cat $datadir/xtrabackup_binlog_info)
X	sql $secondary "SET MASTER TO MASTER_LOG_FILE=$log_file, MASTER_LOG_POS=$log_offset'"
X	message "SET MASTER TO MASTER_LOG_FILE=$log_file, MASTER_LOG_POS=$log_offset'"
Xfi
X
X#
X# start the replication slaves
X#
Xmessage "start primary slave"
Xsql localhost "START SLAVE;"
X
Xmessage "start secondary slave"
Xsql $secondary "START SLAVE;"
X
X#
X# slave status on both ends
X#
Xmessage "primary slave status"
Xsql localhost "SHOW SLAVE STATUS" | awk \
X	'/Slave_IO_State/ {print}
X	 /Seconds_Behind_Master/ {print} 
X	 /Master_Server_Id/ {print}
X	 /Master_Host/ {print}' | log
Xsql localhost "SHOW SLAVE STATUS" | awk \
X	 '/Master_SSL_Allowed/ { 
X		if ($2 == "Yes") {
X			print "Using SSL Replication" 
X		}
X	 }' | log
X
Xmessage "secondary slave status"
Xsql $secondary "SHOW SLAVE STATUS" | awk \
X	'/Slave_IO_State/ {print}
X	 /Seconds_Behind_Master/ {print} 
X	 /Master_Server_Id/ {print}
X	 /Master_Host/ {print} ' | log
Xsql localhost "SHOW SLAVE STATUS" | awk \
X	 '/Master_SSL_Allowed/ { 
X		if ($2 == "Yes") {
X			print "Using SSL Replication" 
X		}
X	 }' | log
X
X#
X# enable the watchdog, or not.
X#
Xif [ $watchdog_enable = "true" ] ; then
X	touch $WATCHDOG_ENABLE
X	$SSH $secondary touch $WATCHDOG_ENABLE
Xelse
X	rm -f $WATCHDOG_ENABLE
X	$SSH $secondary rm -f $WATCHDOG_ENABLE
Xfi
X
X#
X# handle license files - compare creation times, and use latest one
X# grab the one over there if newer
X#
Xremote_lic=0
Xlocal_lic=0
Xif $SSH $secondary test -f $APPD_ROOT/license.lic ; then
X	remote_lic=`$SSH $secondary grep creationDate $APPD_ROOT/license.lic | \
X		 awk -F= '{print $2}'`
Xfi
Xif [ -f $APPD_ROOT/license.lic.$secondary ] ; then
X	local_lic=`grep creationDate $APPD_ROOT/license.lic.$secondary | \
X		awk -F= '{print $2}'`
Xfi
X
Xif [ $local_lic -lt $remote_lic ] ; then
X	message "copying license file from secondary"
X	$SCP -q $secondary:$APPD_ROOT/license.lic $APPD_ROOT/license.lic.$secondary 
Xelif [ $local_lic -ne 0 ] ; then
X	message "copying license file to  secondary"
X	$SCP -q $APPD_ROOT/license.lic.$secondary $secondary:$APPD_ROOT/license.lic
Xelse
X	message "SECONDARY LICENSE FILE REQUIRED"
Xfi
X
X#
X# handle odd case - license.lic.$primary is newer
X#
Xcopy_lic=0
Xlic=0
Xif [ -f $APPD_ROOT/license.lic ] ; then
X	lic=`grep creationDate $APPD_ROOT/license.lic | awk -F= '{print $2}'`
Xfi
Xif [ -f $APPD_ROOT/license.lic.$primary ] ; then
X	copy_lic=`grep creationDate $APPD_ROOT/license.lic.$primary | \
X		awk -F= '{print $2}'`
Xfi
X
Xif [ $lic -lt $copy_lic ] ; then
X	message "using newer license.lic.$primary"
X	cp $APPD_ROOT/license.lic.$primary $APPD_ROOT/license.lic
Xelif [ $lic -ne 0 ] ; then
X	message "saving license to license.lic.$primary"
X	cp $APPD_ROOT/license.lic $APPD_ROOT/license.lic.$primary
Xelse
X	message "no primary license file"
Xfi
X
Xmessage "sending primary license file"
X$SCP -q $APPD_ROOT/license.lic.$primary $secondary:$APPD_ROOT
X
X#
X# now enable the secondary appserver
X#
Xmessage "enable secondary appserver"
X$SSH $secondary rm -f $APPD_ROOT/HA/APPSERVER_DISABLE
X
X#
X# restart the appserver
X#
Xif $start_appserver ; then
X	message "start primary appserver"
X	if ! service appdcontroller start | logonly 2>&1 ; then
X		fatal 12 "could not start primary appdcontroller service"
X	fi
X
X	message "secondary service start"
X	# issues with the command actually starting the watchdog on the secondary.
X	# further troubleshooting needed
X	if ! remservice -t $secondary appdcontroller start | logonly 2>&1 ; then
X		fatal 11 "could not start secondary appdcontroller service"
X	fi
X
X	if [ -n "$machine_agent" ] ; then
X
X		message "restart local machine agent"
X		service appdynamics-machine-agent stop
X		service appdynamics-machine-agent start
X
X		message "restart remote machine agent"
X		remservice -t $secondary appdynamics-machine-agent stop
X		remservice -t $secondary appdynamics-machine-agent start
X	fi
X	message "HA setup complete."
Xfi
X
Xcleanup
X
END-of-replicate.sh
echo x - install-init.sh
sed 's/^X//' >install-init.sh << 'END-of-install-init.sh'
X#!/bin/bash
X#
X# $Id: install-init.sh 3.41 2018-09-17 15:53:42 cmayer $
X#
X# install init scripts, including the machine agent.
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xcd $(dirname $0)
X
Xfunction usage {
X	echo "$0 [-options] where:"
X	echo "   -c  # use setuid c wrapper"
X	echo "   -s  # use sudo"
X	echo "   -p  # use pbrun wrapper"
X	echo "   -x  # use user privilege wrapper"
X	echo "   -a  <Machine Agent install directory>"
X	exit 1
X}
X
XAPPD_ROOT=`readlink -e ..`
X
XLOGFNAME=install-init.log
X
XPBRUN_PLACES="/usr/local/bin/pbrun /usr/bin/pbrun"
XPBRUN=
Xfor pbrun in $PBRUN_PLACES ; do
X    if [ -x $pbrun ] ; then
X        PBRUN=$pbrun
X    fi
Xdone
X
Xif [ `id -un` != root ] ; then
X	echo install-init.sh must be run as root
X	exit 1
Xfi
X
Xif ! [ -d $APPD_ROOT/bin ] ; then
X	APPD_ROOT=/opt/AppDynamics/Controller
X	echo using default path $APPD_ROOT
Xfi
X
X# source function library
X. $APPD_ROOT/HA/lib/log.sh
X. $APPD_ROOT/HA/lib/runuser.sh
X. $APPD_ROOT/HA/lib/ha.sh
X. $APPD_ROOT/HA/lib/password.sh
X. $APPD_ROOT/HA/lib/init.sh
X. $APPD_ROOT/HA/lib/conf.sh
X
Xmachine_agent_service=""
Xmachine_agent=""
Xuse_pbrun=0
Xuse_cwrapper=0
Xuse_sudo=0
Xuse_root=0
Xuse_xuser=0
X
Xwhile getopts ":csprxa:" flag; do
X	case $flag in
X	x)
X		use_xuser=1
X		;;
X	c)
X		use_cwrapper=1
X		;;
X	s)
X		use_sudo=1
X		;;
X	p)
X		if [ -x $PBRUN ] ; then
X			use_pbrun=1
X		else
X			echo pbrun not found in $PBRUN_PLACES
X			exit 1
X		fi
X		;;
X	a)	
X		machine_agent=$(readlink -e "$OPTARG")
X		if ! [ -f "$machine_agent/machineagent.jar" ] ; then
X			echo "$machine_agent is not a machine agent install directory"
X			exit 1
X		fi
X		;;
X	:)	
X		echo "option '$OPTARG' requires a value" 1>&2
X		usage
X		;;
X	*)
X		usage
X		;;
X	esac
Xdone
X
Xecho "install-init.sh command line options" "$*" > $LOGFILE
Xecho "runuser $RUNUSER" >> $LOGFILE
Xdate >> $LOGFILE
Xchown $RUNUSER $LOGFILE
X
X#
X# search for a machine agent in a few likely places
X#
Xif [ -z "$machine_agent" ] ; then
X	machine_agent=(`find_machine_agent`)
X	if [ ${#machine_agent[@]} -gt 1 ] ; then
X		echo too many machine agents: ${machine_agent[@]}
X		echo select one, and specify it using -a
X		usage
X		exit 1
X	fi
Xfi
X
Xif [ -f NO_MACHINE_AGENT ] ; then
X        message "suppressing machine agent processing"
X        machine_agent=""
Xfi
X
Xif [ -n "$machine_agent" ] ; then
X	machine_agent_service=appdynamics-machine-agent
X	echo "found machine agent in $machine_agent"
Xfi
X
Xif [ `id -u` != 0 ] ; then
X	echo $0 must be run as root
X	exit 1
Xfi
X
X# list of AppDynamics services in start order
XAPPDYNAMICS_SERVICE_LIST=( appdcontroller-db appdcontroller $machine_agent_service)
X
XVENDOR=`lsb_release -i 2>/dev/null | awk '{print $3}'`
X
Xif echo $VENDOR | grep -iq ubuntu ; then
X	#
X	# Define explicit start and stop order lists for Ubuntu and other distros
X	# were update-rc.d ignores the LSB dependency headers
X	#
X	APPDYNAMICS_SERVICE_START=( 90 91 92 )
X	APPDYNAMICS_SERVICE_STOP=( 90 89 08 )
Xfi
X
XAPPDSERVICE=/sbin/appdservice
X
XROOTOWNER=`ls -ld $APPD_ROOT | awk '{print $3}'`
Xif [[ `id -u $RUNUSER` != "0" ]] ; then
X	if [ `expr $use_cwrapper + $use_sudo + $use_pbrun + $use_xuser` == 0 ] ; then
X		echo non-root MySQL usage requires at least one privilege escalation method
X		usage
X	fi
X	if [ `expr $use_cwrapper + $use_pbrun + $use_xuser` -gt 1 ] ; then
X		echo cwrapper, xuser and pbrun are mutually exclusive
X		usage
X	fi
Xelse
X	use_root=1
Xfi
X
XCHKCONFIG=`which chkconfig 2>/dev/null`
XUPDATE_RC_D=`which update-rc.d 2>/dev/null`
XSERVICE=`which service 2>/dev/null`
X
Xfunction require {
X	# args: executable "redhat package" "debian package" [ force|advise ] ["<reason package is required>"]
X	local errors=0
X	if ! [[  -x `which $1 2>/dev/null` ]] || [ "$4" == "force" ] ; then
X		if [[ -x `which apt-get 2>/dev/null` ]] ; then
X			if [ "$4" == "advise" ] ; then
X				echo "Package $3 not installed."
X				echo "$3 is required $5"
X				return 1
X			else
X				if ! apt-get -qq -y install $3 && [ "$4" == "force" ] ; then
X					errors=1
X				fi
X			fi
X		elif [[ -x `which yum 2>/dev/null` ]] ; then
X			if [ "$4" == "advise" ] ; then
X				echo "Package $2 not installed."
X				echo "$2 is required $5"
X				return 1
X			else
X				if ! yum --quiet -y install $2 >/dev/null && [ "$4" == "force" ] ; then
X					errors=1
X				fi
X			fi
X		fi
X		if ! [[  -x `which $1 2>/dev/null` ]] || [ "$errors" -gt 0 ] ; then
X			echo "Unable to install package containing $1"
X			return 1
X		fi
X	fi
X}
X
X#
X# install the init function and ancillary config files for service $1
X# with start priority $2 and stop priority $3
X#
Xfunction install_init {
X	local service=$1
X	local start_pri=$2
X	local stop_pri=$3
X
X	echo "installing /etc/init.d/$service"
X	rm -f /etc/init.d/$service			# remove potential sym links
X	cp ./$service.sh /etc/init.d/$service
X	chmod 0755 /etc/init.d/$service
X
X	if [ -x "$CHKCONFIG" ] ; then
X		chkconfig --add $service
X		SYS_CONFIG_DIR=/etc/sysconfig
X	elif [ -x "$UPDATE_RC_D" ] ; then
X		update-rc.d -f $service remove 
X		update-rc.d $service defaults $start_pri $stop_pri
X		SYS_CONFIG_DIR=/etc/default
X	else
X		echo "unsupported linux distribution: chkconfig or update-rc.d required"
X		exit 1
X	fi
X
X	echo "installing $SYS_CONFIG_DIR/$1"
X	sysconfig_file=$service.sysconfig
X	if [ ! -f $sysconfig_file ] ; then
X		sysconfig_file=$service.sysconfig.template
X	else
X		echo using customized $service configuration file
X	fi
X
X	sed < $sysconfig_file > $SYS_CONFIG_DIR/$1 \
X		-e "/^RUNUSER=/s,=.*,=$RUNUSER," \
X		-e "/^APPD_ROOT=/s,=.*,=$APPD_ROOT," \
X		-e "/^MACHINE_AGENT_HOME=/s,=.*,=$machine_agent,"
X	chmod 644 $SYS_CONFIG_DIR/$service
X}
X
X#
X# make sure we have xmllint, bc, and the right version of ping installed
X#
Xmissing_dependencies=0
Xrequire xmllint libxml2 libxml2-utils || ((missing_dependencies++))
Xrequire bc bc bc || ((missing_dependecies++))
Xrequire ex vim-minimal vim-tiny || ((missing_dependecies++))
Xrequire curl curl curl || ((missing_dependencies++))
Xif ! ping -q -W 1 -c 1 localhost >/dev/null ; then
X	require ping iputils iputils-ping force || ((missing_dependencies++))
Xfi
Xif [ "$missing_dependencies" -gt 0 ] ; then
X	exit 1
Xfi
X
X#
X# check that HA Toolkit has access to MySQL clients via password in any of:
X#   MYSQL_ROOT_PASSWD - env variable
X#   $APPD_ROOT/db/.rootpw
X#   $APPD_ROOT/db/.rootpw.obf
X#
Xget_mysql_passwd > /dev/null
X
X#
X# since our RUNUSER isn't root, we want to make it so that sudo works
X# for our selected commands.   
X# this is not a security hole, it is a controlled privilege escalation, really.
X#
Xif [[ `id -u $RUNUSER` != "0" ]] ; then
X
X	if [ $use_sudo == 1 ] ; then
X		# Clean up C / pbrun wrappers if they were previously installed
X		rm -f $APPDSERVICE 2>/dev/null
X		require sudo sudo sudo || exit 1
X		[ -d /etc/sudoers.d ] || mkdir /etc/sudoers.d && chmod 0750 /etc/sudoers.d
X		grep -Eq "^#includedir[\t ]+/etc/sudoers.d[\t ]*$" /etc/sudoers || \
X		grep -Eq "^#include[\t ]+/etc/sudoers.d/appdynamics[\t ]*$" /etc/sudoers || \
X		echo "#include /etc/sudoers.d/appdynamics" >> /etc/sudoers
X		if [ -x "$CHKCONFIG" ] ; then
X			COMMA=
X			for s in ${APPDYNAMICS_SERVICE_LIST[@]} ; do
X				CMND_ALIAS_LIST="$CMND_ALIAS_LIST $COMMA \\
X				$SERVICE $s *"
X				COMMA=","
X			done
X		elif [ -x "$UPDATE_RC_D" ] ; then
X			COMMA=
X			for s in ${APPDYNAMICS_SERVICE_LIST[@]} ; do
X				CMND_ALIAS_LIST="$CMND_ALIAS_LIST$COMMA \\
X				$SERVICE $s *"
X				COMMA=","
X			done
X		fi
X		cat > /etc/sudoers.d/appdynamics <<- SUDOERS
X		# allow appdynamics user to:
X		#    start, stop, and query status of appdynamics via init scripts
X		#    to enable and disable those init scripts
X		Defaults:$RUNUSER !requiretty
X		Cmnd_Alias APPD = $CMND_ALIAS_LIST
X			$RUNUSER ALL=(root) NOPASSWD: APPD
X		SUDOERS
X		chmod 0440 /etc/sudoers.d/appdynamics
X		echo "installed /etc/sudoers.d/appdynamics"
X	fi
X
X	if [ $use_cwrapper == 1 ] ; then
X		if require cc gcc gcc advise "to build $APPDSERVICE privilege escalation wrapper" ; then
X			# Clean up sudo privilege escalation if it was previously installed
X			rm -f /etc/sudoers.d/appdynamics 2>/dev/null
X			# catch case where previous $APPDSERVICE cannot be overwritten by compiler
X			rm -f $APPDSERVICE 2> /dev/null
X			if [[ -f "$APPDSERVICE" ]]; then
X			   echo "Unable to remove previous $APPDSERVICE. Please remove manually and re-run."
X			   exit 1
X			fi
X			# compile wrapper, chown and chmod with setuid
X			cc -D_GNU_SOURCE -DAPPDUSER=`id -u $RUNUSER` -o $APPDSERVICE appdservice.c
X			if [ -x $APPDSERVICE ] ; then
X				chown root:root $APPDSERVICE
X				chmod 4755 $APPDSERVICE
X				echo "installed setuid root wrapper as $APPDSERVICE"
X			else
X				echo "installation of $APPDSERVICE failed"
X			fi
X		else
X			echo "Exiting..."
X			exit 1
X		fi
X	fi
X
X	if [ $use_pbrun == 1 ] ; then
X		# Clean up sudo privilege escalation if it was previously installed
X		rm -f /etc/sudoers.d/appdynamics 2>/dev/null
X		# Install the pbrun privilege escalation wrapper
X		cp appdservice-pbrun.sh $APPDSERVICE
X		chmod 755 $APPDSERVICE
X		echo "installed pbrun wrapper as $APPDSERVICE"
X	fi
X
X	if [ $use_xuser == 1 ] ; then
X		# Clean up sudo privilege escalation if it was previously installed
X		rm -f /etc/sudoers.d/appdynamics 2>/dev/null
X		# Install the xuser privilege escalation wrapper
X		cp appdservice-xuser.sh $APPDSERVICE
X		chmod 755 $APPDSERVICE
X		echo "installed xuser wrapper as $APPDSERVICE"
X	fi
X
X	if [ $use_root == 1 ] ; then
X		# Clean up sudo privilege escalation if it was previously installed
X		rm -f /etc/sudoers.d/appdynamics 2>/dev/null
X		cp appdservice-root.sh $APPDSERVICE
X		chmod 755 $APPDSERVICE
X		echo "installed root wrapper as $APPDSERVICE"
X	fi
X
X	if use_privileged_ports && ! require setcap libcap libcap2-bin; then
X		echo "\
XERROR: AppDynamics is configured to bind to at least one port < 1024 as an
Xunprivileged user, but the setcap utility is not available on this host.
XAppDynamics will not run in the configuration."
X		exit 1
X	fi
Xfi
X
X#
X# install all
X#
Xi=0
Xfor s in ${APPDYNAMICS_SERVICE_LIST[@]} ; do
X	install_init $s ${APPDYNAMICS_SERVICE_START[$i]} ${APPDYNAMICS_SERVICE_STOP[$i]}
X	((i++))
Xdone
X
X#
X# ensure the machine agent directory is owned by RUNUSER
X#
Xif [ -d "$machine_agent" ] ; then
X	chown -R $RUNUSER "$machine_agent"
Xfi
X
X#
X# common use case - start with NOROOT, then root user deploys install-init.sh
X#
Xif [ -f $APPD_ROOT/HA/NOROOT ] ; then
X	echo "removing $APPD_ROOT/HA/NOROOT" | tee $LOGFILE
X	rm -f $APPD_ROOT/HA/NOROOT
Xfi
END-of-install-init.sh
echo x - uninstall-init.sh
sed 's/^X//' >uninstall-init.sh << 'END-of-uninstall-init.sh'
X#!/bin/bash
X#
X# $Id: uninstall-init.sh 3.12 2017-03-07 17:04:25 cmayer $
X#
X# uninstall init script
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xcd $(dirname $0)
X
Xfunction remove {
X	if rpm -qi --quiet $1 2>/dev/null; then return; fi	# skip if rpm package installed
X
X	if [ ! -f /etc/init.d/$1 ] ; then
X		return
X	fi
X	if [[ -x `which chkconfig 2>/dev/null` ]] ; then
X		chkconfig --del $1
X		rm -f /etc/sysconfig/$1
X	elif [[ -x `which update-rc.d 2>/dev/null` ]] ; then
X		update-rc.d -f $1 remove
X		rm -f /etc/default/$1
X	else
X		echo "Failed to remove $1: chkconfig or update-rc.d required"
X		exit 1
X	fi
X
X	echo removing $1 service
X	rm -f /etc/init.d/$1
X}
X
Xremove appdcontroller
Xremove appdcontroller-db
Xremove appdynamics-machine-agent
X
Xif [ -f /sbin/appdservice ] ; then
X	echo removing appdservice wrapper
X	rm -f /sbin/appdservice
Xfi
X
Xif [ -f /etc/sudoers.d/appdynamics ] ; then
X	echo removing appdynamics specific sudoers file
X	rm -f /etc/sudoers.d/appdynamics
X
X	if grep -Eq "^#include[\t ]+/etc/sudoers.d/appdynamics[\t ]*$" /etc/sudoers ; then
X		echo removing sudoers additions
X		ex -s /etc/sudoers <<- RMAPPD
X			g/^#include[\t ][\t ]*\/etc\/sudoers.d\/appdynamics/d
X			wq
X		RMAPPD
X	fi
Xfi
END-of-uninstall-init.sh
echo x - appdservice-pbrun.sh
sed 's/^X//' >appdservice-pbrun.sh << 'END-of-appdservice-pbrun.sh'
X#!/bin/bash
X#
X# $Id: appdservice-pbrun.sh 3.41 2018-09-17 15:50:30 cmayer $
X#
X# shell wrapper around pbrun for appdynamics service changes
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
XPBRUN_PLACES="/usr/local/bin/pbrun /usr/bin/pbrun"
XPBRUN=
Xfor pbrun in $PBRUN_PLACES ; do
X	if [ -x $pbrun ] ; then
X		PBRUN=$pbrun
X	fi
Xdone
X
Xfunction usage {
X	echo usage: "$0 [appdcontroller|appdcontroller-db|appdynamics-machine-agent start|stop|status]"
X	exit 1
X}
X
Xif [ ! -x $PBRUN ] ; then
X	echo $0: pbrun not found at $PBRUN_PLACES
X	exit 2
Xfi
X
Xif [ $# -ne 2 ] ; then
X	usage
Xfi
X
Xcase $1 in
X	appdcontroller|appdcontroller-db|appdynamics-machine-agent)
X		service=$1
X		;;
X	*)
X		usage
X		;;
Xesac
X
Xcase $2 in
X	start|stop|status)
X		action=$2
X		;;
X	*)
X		usage
X		;;
Xesac
X
Xif [ -f NO_MACHINE_AGENT -a "$service" == appdynamics-machine-agent ] ; then
X       exit 0
Xfi
X
X$PBRUN -p -b /sbin/service $service $action
Xexit 0
END-of-appdservice-pbrun.sh
echo x - appdservice-root.sh
sed 's/^X//' >appdservice-root.sh << 'END-of-appdservice-root.sh'
X#!/bin/bash
X#
X# $Id: appdservice-root.sh 3.12 2017-03-07 17:04:25 cmayer $
X#
X# shell wrapper around service for service changes - designed to run as root
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xfunction usage {
X	echo usage: "$0 [appdcontroller|appdcontroller-db|appdynamics-machine-agent start|stop|status]"
X	exit 1
X}
X
Xif [ $# -ne 2 ] ; then
X	usage
Xfi
X
Xcase $1 in
X	appdcontroller|appdcontroller-db|appdynamics-machine-agent)
X		service=$1
X		;;
X	*)
X		usage
X		;;
Xesac
X
Xcase $2 in
X	start|stop|status)
X		action=$2
X		;;
X	*)
X		usage
X		;;
Xesac
X
Xif [ -f NO_MACHINE_AGENT -a "$service" == appdynamics-machine-agent ] ; then
X       exit 0
Xfi
X
X/sbin/service $service $action
Xexit 0
END-of-appdservice-root.sh
echo x - appdservice-noroot.sh
sed 's/^X//' >appdservice-noroot.sh << 'END-of-appdservice-noroot.sh'
X#!/bin/bash
X#
X# $Id: appdservice-noroot.sh 3.41 2018-09-17 15:50:30 cmayer $
X#
X# no root shell wrapper for appdynamics service changes
X#
X# this file is intended to be a limited replacement of the service
X# escalation function, and as such needs to implement an adequate subset
X# of the machinery in the init scripts
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xcd $(dirname $0)
XAPPD_ROOT=`readlink -e ..`
XNAME=$(basename $(readlink -e $0))
X
X#
X# turn on debugging if indicated
X#
Xif [ -f $APPD_ROOT/HA/INITDEBUG ] ; then
X        rm -f /tmp/$NAME-$1.out
X    exec 2> /tmp/$NAME-$1.out
X    set -x
Xfi
X
X# Usually this script is called by replicate.sh and so LOGFNAME is assigned.
X# But as this script can be called standalone, we need to assign LOGFNAME if not already set.
X[[ -n "$LOGFNAME" ]] || LOGFNAME=appdservice-noroot.log
X
X. lib/log.sh
X. lib/runuser.sh
X. lib/password.sh
X. lib/ha.sh
X. lib/conf.sh
X. lib/status.sh
X
X# find the java
Xif ! export JAVA=$(find_java) ; then
X	echo cannot find java
X	exit 2
Xfi
X
X#
X# load in customized sysconfig files if present
X#
Xif [ -f appdynamics-machine-agent.sysconfig ] ; then
X	. appdynamics-machine-agent.sysconfig
Xfi
Xif [ -f appdcontroller.sysconfig ] ; then
X	. appdcontroller.sysconfig
Xfi
X
Xfunction usage {
X	echo usage: "$0 [appdcontroller appdcontroller-db appdynamics-machine-agent] [start stop status]"
X	exit 1
X}
X
Xif [ $# -ne 2 ] ; then
X	usage
Xfi
X
Xservice=$1
Xverb=$2
X
Xif [ -f NO_MACHINE_AGENT -a "$service" == appdynamics-machine-agent ] ; then
X	exit 0
Xfi
X
Xcase "$service:$verb" in
X
Xappdcontroller:status|appdcontroller-db:status|appdynamics-machine-agent:status)
X	./appdstatus.sh
X	;;
X	
Xappdcontroller:start)
X	./appdservice-noroot.sh appdcontroller-db start
X	if [ $(controller_mode) == 'active' ] ; then
X		nohup $APPD_ROOT/bin/controller.sh start-appserver >/dev/null 2>&1 &
X		if [ -d "$APPD_ROOT/events_service" ] ; then
X			nohup $APPD_ROOT/bin/controller.sh start-events-service >/dev/null 2>&1 &
X		fi
X		if [ -d "$APPD_ROOT/reporting_service" ] ; then
X			nohup $APPD_ROOT/bin/controller.sh start-reporting-service >/dev/null 2>&1 &
X		fi
X		if replication_disabled ; then
X			if assassin_running ; then
X				echo assassin already running
X			else
X				echo -n assassin ' '
X				nohup $APPD_ROOT/HA/assassin.sh >/dev/null
X				pid=$!
X				# wait for the process to die or sign on
X				while [ -d /proc/$pid ] ; do
X					if [ -f $ASSASSIN_PIDFILE ] ; then
X						break
X					fi
X					sleep 1
X					echo -n "."
X				done
X				echo started
X			fi
X		fi
X	else
X		if [ -f $WATCHDOG_ENABLE ] ; then
X			if ! watchdog_running ; then
X				nohup "$APPD_ROOT/HA/watchdog.sh" >/dev/null 2>&1 &
X				pid=$!
X				# wait for the process to die or sign on
X				while [ -d /proc/$pid ] ; do
X					if [ -f $WATCHDOG_PIDFILE ] ; then
X						break
X					fi
X					sleep 1
X				done
X			fi
X		fi	
X	fi
X	;;
X
Xappdcontroller:stop)
X	$APPD_ROOT/bin/controller.sh stop-appserver
X	if [ -d "$APPD_ROOT/events_service" ] ; then
X		$APPD_ROOT/bin/controller.sh stop-events-service
X	fi
X	if [ -d "$APPD_ROOT/reporting_service" ] ; then
X		$APPD_ROOT/bin/controller.sh stop-reporting-service
X	fi
X	if watchdog_running ; then
X		kill -9 $watchdog_pid && ( echo appd watchdog killed; \
X		echo `date` appd watchdog killed >> $APPD_ROOT/logs/watchdog.log )
X	fi
X	rm -f $WATCHDOG_PIDFILE
X	if assassin_running ; then
X		kill -9 $assassin_pid && ( echo appd assassin killed; \
X			echo `date` appd assassin killed >> $APPD_ROOT/logs/assassin.log )
X	fi
X	runuser rm -f $ASSASSIN_PIDFILE
X	;;
X
Xappdcontroller-db:start)
X	$APPD_ROOT/bin/controller.sh start-db
X	false
X	;;
X
Xappdcontroller-db:stop)
X	./appdservice-noroot.sh appdcontroller stop
X	$APPD_ROOT/bin/controller.sh stop-db
X	;;
X
Xappdynamics-machine-agent:start)
X	ma_dir=`find_machine_agent`
X	if [ ! -d "$ma_dir" ] ; then
X		exit 0
X	fi
X	nohup $JAVA $JAVA_OPTS -jar $ma_dir/machineagent.jar >/dev/null 2>&1 &
X	;;
X
Xappdynamics-machine-agent:stop)
X	for pid in `pgrep -f machineagent.jar` ; do
X		for sub in `pgrep -P $pid` ; do
X			kill -9 $sub
X		done
X		kill -9 $pid
X	done
X	;;
X
X*)
X	usage
X	;;
Xesac
X
Xexit 0
END-of-appdservice-noroot.sh
echo x - appdservice-xuser.sh
sed 's/^X//' >appdservice-xuser.sh << 'END-of-appdservice-xuser.sh'
X#!/bin/bash
X#
X# $Id: appdservice-xuser.sh 3.41 2018-09-17 15:50:30 cmayer $
X#
X# user defined shell wrapper for appdynamics service changes
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xfunction usage {
X	echo usage: "$0 [appdcontroller appdcontroller-db] [start stop status]"
X	exit 1
X}
X
Xif [ $# -ne 2 ] ; then
X	usage
Xfi
X
Xcase $1 in
X	appdcontroller|appdcontroller-db)
X		service=$1
X		;;
X	*)
X		usage
X		;;
Xesac
X
Xcase $2 in
X	start|stop|status)
X		action=$2
X		;;
X	*)
X		usage
X		;;
Xesac
X
Xif [ -f NO_MACHINE_AGENT -a "$service" == appdynamics-machine-agent ] ; then
X       exit 0
Xfi
X
X#
X# insert user state change handler code
X# use $service and $action
X#
Xexit 0
END-of-appdservice-xuser.sh
echo x - appdstatus.sh
sed 's/^X//' >appdstatus.sh << 'END-of-appdstatus.sh'
X#!/bin/bash
X#
X# print out the status of the appdynamics controller on this node
X#
X# $Id: appdstatus.sh 3.34 2018-06-01 15:50:06 cmayer $
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xcd $(dirname $0)
X
XLOGFNAME=status.log
X
X. lib/log.sh
X. lib/runuser.sh
X. lib/password.sh
X. lib/conf.sh
X. lib/sql.sh
X. lib/status.sh
X
Xif [ ! -f $APPD_ROOT/db/db.cnf ] ; then
X	echo appd controller not installed in $APPD_ROOT
X	exit 1
Xfi
X
Xif db_running ; then
X	controllerversion=`sql localhost "select value from global_configuration_cluster where name='schema.version'" | get value`
X	if [ ! -z "$controllerversion" ] ; then
X		echo version: $controllerversion
X	fi
X	echo -n "db running as $RUNUSER - "
X	if [ "`get_replication_mode localhost`" == "active" ] ; then
X		echo "active"
X	else
X		echo "passive"
X	fi
X
X	case `sql localhost "select value from global_configuration_local where name='ha.controller.type'" | get value` in
X	primary) 
X		echo primary
X		;;
X	secondary)
X		echo secondary
X		;;
X	notapplicable)
X		echo HA not installed
X		;;
X	*)
X		echo unknown HA type
X		;;
X	esac
X		
X	sql localhost "SHOW SLAVE STATUS" | awk \
X			'/Slave_IO_State/ {print}
X			/Seconds_Behind_Master/ {print} 
X			/Master_Server_Id/ {print}
X			/Master_Host/ {print}'
X	sql localhost "SHOW SLAVE STATUS" | awk '
X			/Master_SSL_Allowed/ { if ($2 == "Yes") {print "Using SSL Replication" }}'
Xelse
X	echo "db not running"
Xfi
X
Xif [ $(dbcnf_get skip-slave-start) != unset ] ; then
X	echo "replication persistently broken"
Xfi
X
Xif watchdog_running ; then
X	echo watchdog running
X	if [ -f $WATCHDOG_STATUS ] ; then
X		cat $WATCHDOG_STATUS
X	fi
Xelse
X	echo watchdog not running
Xfi
X
Xif assassin_running ; then
X	echo assassin running
Xelse
X	echo assassin not running
Xfi
X
Xcontrollerrunning
Xcase $? in
X0)
X	echo "controller running"
X	;;
X1)
X	echo "controller started - not up"
X	;;
X2)
X	echo "controller zombie"
X	;;
X*)
X	echo "controller not running"
X	;;
Xesac
X
Xevents_running
Xcase $? in
X0)
X	echo "events service running"
X	;;
X*)
X	echo "events service not running"
X	;;
Xesac
X
Xreporting_running
Xcase $? in
X0)
X	echo "reporting service running"
X	;;
X*)
X	echo "reporting service not running"
X	;;
Xesac
X
Xmachine_agent_running
Xcase $? in
X0)
X	echo "machine-agent service running"
X	;;
X*)
X	echo "machine-agent service not running"
X	;;
Xesac
X
Xif [ -f $APPD_ROOT/HA/numa.settings ] ; then
X	numastat $(pgrep -u $(get_runuser) 'mysqld|java')
Xfi
X
Xexit 0 
END-of-appdstatus.sh
echo x - appdynamics-machine-agent.sh
sed 's/^X//' >appdynamics-machine-agent.sh << 'END-of-appdynamics-machine-agent.sh'
X#!/bin/bash
X#
X# $Id: appdynamics-machine-agent.sh 3.27 2017-10-30 14:58:00 rob.navarro $
X#
X# /etc/init.d/appdynamics-machine-agent
X#
X# This file describes the machine agent service. Copy it or place it in 
X# /etc/init.d to ensure the machine agent is started as a service. 
X# If you installed the machine agent via an RPM or DEB package, it should
X# already be placed there.
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X### BEGIN INIT INFO
X# Provides:          appdynamics-machine-agent
X# Default-Start:     2 3 4 5
X# Default-Stop:      0 1 6
X# Required-Start:
X# Required-Stop:
X# Short-Description: AppDynamics Machine Agent
X# Description:       Enable AppDynamics Machine Agent service provided by daemon.
X### END INIT INFO
X
X# Setting PATH to just a few trusted directories is an **important security** requirement
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xprog="appdynamics-machine-agent"
Xpidfile="/var/run/appdynamics/$prog"
Xlockfile="/var/lock/subsys/$prog"
X
X# Defaults. Do not edit these. They will be overwritten in updates.
X# Override in /etc/sysconfig/appdynamics-machine-agent
XAPPD_ROOT=/opt/AppDynamics/Controller
XMACHINE_AGENT_HOME=/opt/appdynamics/machine-agent
XRUNUSER=root
XJAVA_OPTS=""
X
X# source script config
X[ -f /etc/sysconfig/appdynamics-machine-agent ] && . /etc/sysconfig/appdynamics-machine-agent
X[ -f /etc/default/appdynamics-machine-agent ] && . /etc/default/appdynamics-machine-agent
X
XNAME=$(basename $(readlink -e $0))
X
Xif [ -f $APPD_ROOT/HA/INITDEBUG ] ; then
X	logfile=/tmp/$NAME.out
X	rm -f $logfile
X	exec 2> $logfile
X	chown $RUNUSER $logfile
X	set -x
Xfi
X
X# pathname for log output - insisting on output to /tmp
XLOGFNAME="/tmp/$(T=${0##*/}; echo ${T%.*}).log"
X
X# For security reasons, locally embed/include function library at HA.shar build time
X
X###################### Start of embedded file: lib/runuser.sh
X#!/bin/bash
X#
X# $Id: lib/runuser.sh 3.35 2018-07-06 22:51:53 cmayer $
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X
X####
X# Contains definition of RUNUSER (effective user) as well as the
X# family of utility functions to wrap commands that sometimes need 
X# to be run as the current user and sometime as the effective user of
X# AppD.
X#
X# Generally the rule is if current effective UID != to the MySQL user
X# then cause all filesystem accesses to run with the effective UID
X# of the MySQL user.
X#
X# These wrapper functions are needed to:
X# 1.  prevent processes started as root from making files that 
X#     non-root users can then later not read.
X# 2.  enable root started processes from accessing NFS mounted filestore
X#
X# This file needs to be included or embedded prior to any use of the
X# the runuser, bg_runuser wrapper functions
X####
X
X#
X# This function has only 2 external dependencies:
X# 1. APPD_ROOT is set
X# 2. $APPD_ROOT/db/db.cnf is readable by current user
X#
X# Returns the username referenced by MySQL's db/db.cnf as the single
X# most reliable record of which effective user AppD should run as.
X#
X# Avoids unpleasant cyclic dependency by just ASSUMING $APPD_ROOT/db/db.cnf
X# is readable. Otherwise using runuser() functions assume the existence of
X# $RUNUSER... which has not yet been determined.
X#
X# Remember that when called by Init script RUNUSER will already have
X# been set.
X# Call as:
X#  RUNUSER=$(get_runuser) || exit 1
Xfunction get_runuser {
X	if [[ -z "$APPD_ROOT" ]] ; then
X		echo "ERROR: ${FUNCNAME[0]}: APPD_ROOT is not set. This is a coding bug! " >&2
X		exit 1
X	fi
X	if ! [ -f $APPD_ROOT/db/db.cnf ] ; then
X		echo "ERROR: ${FUNCNAME[0]}: $APPD_ROOT/db.cnf not readable" >&2
X		exit 1
X	fi
X	local euser RETC
X	euser=$(awk -F= '$1 ~ /^[[:space:]]*user$/ {print $2}' $APPD_ROOT/db/db.cnf)
X	RETC=$?
X
X	if (( $RETC != 0 )) ; then
X		echo "ERROR: ${FUNCNAME[0]}: APPD_ROOT is not set correctly." >&2
X		exit 1
X	fi
X	if [[ -z "$euser" ]] ; then
X		if grep -q user=  $APPD_ROOT/db/db.cnf &>/dev/null; then
X			echo "ERROR: ${FUNCNAME[0]}: your awk version needs upgrading. Please install gawk." >&2
X		else
X			echo "ERROR: ${FUNCNAME[0]}: $APPD_ROOT/db/db.cnf is not valid MySQL config - missing user=... option." >&2
X		fi
X		exit 1
X	fi
X	echo $euser
X}
X
Xif [[ -z "$RUNUSER" ]] ; then
X	RUNUSER=$(get_runuser) || exit 1
Xfi
X
X#
X# runuser quoting is a definite PITA.  the way to stay sane is to note
X# exactly when you want $ to be expanded and make that explicit, passing
X# escaped $ signs when you want the expansion deferred
X#
X# finally, the bg_runuser function should return the pid
X#
Xif [[ `id -un` == "$RUNUSER" ]] ; then
X        function bg_runuser {
X#               echo "$* >/dev/null 2>&1 & echo \$! ; disown" | bash &
X		bash -c "$* &>> ${logfile:-/dev/null} </dev/null & echo \$! ; disown"
X        }
X        function run_mysql {
X                $MYSQLCLIENT
X        }
X        function runuser {
X#               echo "$*" | bash
X                bash -c "$*"
X        }
Xelse
X        function bg_runuser {
X#               echo "$* >/dev/null & echo \$! ; disown" | su -s /bin/bash $RUNUSER
X		su -s /bin/bash ${RUNUSER:-unset_runuser} -c "$* &>> ${logfile:-/dev/null} </dev/null & echo \$! ; disown"
X        }
X        function run_mysql {
X#               su -s $MYSQLCLIENT $RUNUSER
X                su -s /bin/bash ${RUNUSER:-unset_runuser} -c $MYSQLCLIENT
X        }
X        function runuser {
X#               echo "$*" | su -s /bin/bash $RUNUSER
X                su -s /bin/bash ${RUNUSER:-unset_runuser} -c "$*"
X        }
Xfi
Xexport -f runuser bg_runuser run_mysql
X###################### End of embedded file: lib/runuser.sh
X
X
X###################### Start of embedded file: lib/init.sh
X#!/bin/bash
X#
X# $Id: lib/init.sh 3.24 2017-10-21 00:47:23 rob.navarro $
X#
X# init.sh
X# contains functions to change user and run processes
X# 
X# also, common code for the init scripts.
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X
X# enable Debian systems to work also
Xfunction service {
X    if [[ -z "$service_bin" ]] ; then
X        if [[ -f /sbin/service ]] ; then
X                service_bin=/sbin/service
X        elif [[ -f /usr/sbin/service ]] ; then
X                service_bin=/usr/sbin/service
X        else
X            echo service not found in /sbin or /usr/sbin - exiting
X            exit 13
X        fi
X        $service_bin "$@"
X    else
X        $service_bin "$@"
X    fi
X}
X
Xfunction require_root {
X    if [ `id -un` != "root" ] ; then
X        echo "service changes must be run as root"
X        exit 1
X    fi
X}
X
X#
X# trivial sanity check
X#
Xfunction check_sanity {
X	if runuser [ ! -f $APPD_ROOT/db/db.cnf ] ; then
X		echo appd controller not installed in $APPD_ROOT
X		exit 1
X	fi
X	if runuser [ ! -x $APPD_ROOT/bin/controller.sh ] ; then
X		echo controller disabled on this host
X		exit 1
X	fi
X}
X
X###################### End of embedded file: lib/init.sh
X
X
X###################### Start of embedded file: lib/status.sh
X#!/bin/bash
X#
X# $Id: status.sh 3.30 2018-05-01 12:39:50 cmayer $
X#
X# common code to interrogate the status of various functions
X#
X# can be included by init or other scripts
X# Copyright 2016 AppDynamics, Inc
X#
X#	Licensed under the Apache License, Version 2.0 (the "License");
X#	you may not use this file except in compliance with the License.
X#	You may obtain a copy of the License at
X#
X#		http://www.apache.org/licenses/LICENSE-2.0
X#
X#	Unless required by applicable law or agreed to in writing, software
X#	distributed under the License is distributed on an "AS IS" BASIS,
X#	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#	See the License for the specific language governing permissions and
X#	limitations under the License.
X#
X
Xfunction watchdog_running {
X	if runuser [ -f "$WATCHDOG_PIDFILE" ] ; then
X		watchdog_pid=`runuser cat $WATCHDOG_PIDFILE`
X		if [ ! -z "$watchdog_pid" ] ; then
X			if [ -d /proc/$watchdog_pid ] ; then
X				return 0
X			fi
X		fi
X	fi
X	rm -f $WATCHDOG_PIDFILE
X	return 1
X}
X
Xfunction assassin_running {
X	if runuser [ -f "$ASSASSIN_PIDFILE" ] ; then
X		assassin_pid=`runuser cat $ASSASSIN_PIDFILE`
X		if [ ! -z "$assassin_pid" ] ; then
X			if [ -d /proc/$assassin_pid ] ; then
X				return 0
X			fi
X		fi
X	fi
X	rm -f $ASSASSIN_PIDFILE
X	return 1
X}
X
Xfunction replication_disabled {
X	if [ $(dbcnf_get skip-slave-start) = true ] ; then
X		return 0
X	else
X		return 1
X	fi
X}
X
Xfunction db_running {
X    if [ "$DB_PID_FILE" = "unset" ] ; then
X        DB_PID_FILE="$DB_DATA_DIR/$(hostname).pid"
X    fi
X    if runuser [ -f $DB_PID_FILE ] ; then
X        DB_PID=`runuser cat $DB_PID_FILE 2>/dev/null`
X    fi
X    if [ -z "$DB_PID" ] ; then
X        return 1
X    fi   
X    if [ -d /proc/$DB_PID ] ; then
X        return 0;
X    fi 
X    return 1
X}
X
Xfunction get {
X	local key=$1
X	awk "/$key:/ {print \$2}"
X}
X
Xfunction controller_mode {
X	echo "select value from global_configuration_local \
X		where name='appserver.mode'" | run_mysql | get value
X}
X
Xfunction controllerrunning {
X	if pgrep -f -u $RUNUSER "java -jar ./../modules/admin-cli.jar" >/dev/null ; then
X		return 1
X	fi
X	if runuser "$APPD_ROOT/appserver/glassfish/bin/asadmin" list-domains | \
X		grep -q "domain1 running" ; then
X		return 0
X	fi
X	if pgrep -f -u $RUNUSER "$APPD_ROOT/appserver/glassfish/domains/domain1" >/dev/null ; then
X		return 2
X	fi
X	return 3
X}
X
Xfunction events_running {
X	if ps -f -u $RUNUSER | grep "java" | grep "$APPD_ROOT/events_service" >/dev/null ; then
X		return 0
X	fi
X	return 1
X}
X
Xfunction reporting_running {
X	if pgrep -f -u $RUNUSER "$APPD_ROOT/reporting_service/nodejs/bin/node" >/dev/null ; then
X		return 0
X	fi
X	return 1
X}
X
Xfunction machine_agent_running {
X	if pgrep -f -u $RUNUSER machineagent.jar > /dev/null; then
X		return 0
X	else
X		return 1
X	fi
X}
X
X#
X# find java
X#
Xfunction find_java {
X    if [ -f $APPD_ROOT/appserver/glassfish/config/asenv.conf ] ; then
X        AS_JAVA=$(grep ^AS_JAVA= $APPD_ROOT/appserver/glassfish/config/asenv.conf |
X        awk -F= '{print $2}' | sed -e 's/^"//' -e 's/"$//')
X    fi
X    unset JAVA
X    for java in $AS_JAVA $APPD_ROOT/jre ; do
X        if [ -x $java/bin/java ] ; then
X            export JAVA=$java/bin/java
X            break;
X        fi
X    done
X    if [ -z "$JAVA" ] ; then
X        return 1
X    fi
X    echo $JAVA
X    return 0
X}
X
X###################### End of embedded file: lib/status.sh
X
X
X# find the java
Xif ! export JAVA=$(find_java) ; then
X    echo cannot find java
X    exit 2
Xfi
X
Xfunction start() {
X    require_root
X
X    mkdir -p /var/run/appdynamics
X    chown $RUNUSER /var/run/appdynamics
X    mkdir -p /var/lock/subsys
X	rm -f $pidfile
X
X	# place every machine agent in its own process session to simplify killing it later
X	pid=`bg_runuser setsid $JAVA $JAVA_OPTS -jar $MACHINE_AGENT_HOME/machineagent.jar`
X	echo $pid > $pidfile
X    touch $lockfile
X}
X
Xfunction stop() {
X    require_root
X
X	if [ -f $pidfile ] ; then
X		pid=`cat $pidfile`
X		if [ -d /proc/$pid ] ; then
X			process_group=`ps -o pgrp= $pid`
X			if [ -n "$process_group" ] ; then
X				for i in $process_group ; do
X					kill -9 -$i
X				done
X			fi
X		fi
X		rm -f $pidfile
X	fi
X    rm -f $lockfile
X}
X
Xcase "$1" in
X    start)
X        start
X        ;;
X    stop)
X        stop
X        ;;
X    restart)
X        if [ -f /var/lock/subsys/$prog ] ; then
X            stop
X            # avoid race
X            sleep 3
X            start
X        fi
X        ;;
X    status)
X		if [ -f $pidfile ] ; then
X			pid=`cat $pidfile`
X			if [ -d /proc/$pid ] ; then
X				echo "machine-agent service running"
X				exit 0
X			fi
X			rm -f $pidfile
X		fi
X		echo "machine-agent service not running"
X		exit 1
X        ;;
X    *)  
X        echo $"Usage: $0 {start|stop|restart|status}"
X        exit 1
Xesac
Xexit 0
END-of-appdynamics-machine-agent.sh
echo x - mysqlclient.sh
sed 's/^X//' >mysqlclient.sh << 'END-of-mysqlclient.sh'
X#!/bin/bash
X#
X# $Id: mysqlclient.sh 3.13 2017-10-21 00:47:23 rob.navarro $
X#
X# trivial command that executes sql for us.  this is intended
X# to be invoked from an init script via runuser, so we can log
X# output the rows as key-value pairs
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xcd $(dirname $0)
X
XLOGFNAME=mysqlclient.log
X
X# source function libraries
X. lib/log.sh
X. lib/runuser.sh
X. lib/conf.sh
X. lib/ha.sh
X. lib/password.sh
X. lib/sql.sh
X
Xterminal=false
Xif [ -t 0 ] ; then
X	terminal=true
Xfi
Xmysqlopts=-EB
X
Xwhile getopts "ctr::" flag; do
X	case $flag in
X	t)
X		terminal=true
X		;;
X	c)
X		mysqlopts=
X		;;
X
X	r)	mysqlopts="$(tr ',' ' ' <<< "$OPTARG")"
X		;;
X
X	*)
X		echo "usage: $0 <options>"
X		echo "    [ -t ] interactive"
X		echo "    [ -c ] compatible with controller-sh login-db"
X		echo "    [ -r -s,-C ] raw comma separated MySQL client options"
X		exit 0
X		;;
X	esac
Xdone
Xshift $(( $OPTIND - 1 ))
X
Xif $terminal ; then
X	$MYSQL -A $mysqlopts --host=localhost "${CONNECT[@]}" controller
X	exit 0
Xfi
X
XSQL=/tmp/mysqlclient.$$.sql
XRESULT=/tmp/mysqlclient.$$.result
XERR=/tmp/mysqlclient.$$.err
X
Xcat > $SQL
X$MYSQL $mysqlopts --host=localhost "${CONNECT[@]}" controller 2> $ERR 1> $RESULT < $SQL
XRETC=$?
X
Xif [ -f $APPD_ROOT/HA/LOG_SQL ] ; then
X	echo "mysqlclient: " `date` >> $LOGFILE
X	cat $SQL >> $LOGFILE
X	echo "result:" >> $LOGFILE
X	cat $ERR $RESULT >> $LOGFILE
Xfi
X
X[[ -s "$ERR" ]] && cat $ERR
X[[ -s "$RESULT" ]] && cat $RESULT
X
Xrm -f $RESULT $SQL $ERR
Xexit $RETC
END-of-mysqlclient.sh
echo x - getaccess.sh
sed 's/^X//' >getaccess.sh << 'END-of-getaccess.sh'
X#!/bin/bash
X#
X# $Id: getaccess.sh 3.13 2017-10-21 00:45:29 rob.navarro $
X# helper script to get the access key from an account table
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xcd $(dirname $0)
X
XAPPD_ROOT=`readlink -e ..`
Xaccount=system
Xhost=localhost
X
XLOGFNAME=getaccess.log
X
X. lib/log.sh
X. lib/runuser.sh
X. lib/conf.sh
X. lib/password.sh
X. lib/sql.sh
X
Xfunction usage {
X	echo "$0 [options]"
X	echo " [-c <appdynamics root dir> default: $APPD_ROOT]"
X	echo " [-a <account name>]"
X	echo " [-p <password>]"
X	echo " [-h <host>[:port]]"
X	exit 1
X}
X
Xwhile getopts :c:a:p:h: flag; do
X	case $flag in
X	c)
X		APPD_ROOT=$OPTARG
X		;;
X	a)
X		account=$OPTARG
X		;;
X	p)
X		dbpasswd=$OPTARG
X		;;
X	h)
X		host=$OPTARG
X		if echo $host | grep -s : ; then
X			host=`echo $host | awk -F: '{print $1}'`
X			dbport=`echo $host | awk -F: '{print $2}'`
X		fi
X		;;
X	*)
X		usage
X		;;	
X	esac
Xdone
X
Xsql $host "select access_key from account where name = '$account'" | get access_key
END-of-getaccess.sh
echo x - setmonitor.sh
sed 's/^X//' >setmonitor.sh << 'END-of-setmonitor.sh'
X#!/bin/bash
X#
X# $Id: setmonitor.sh 3.32 2018-05-16 21:15:14 cmayer $
X#
X# instrument controller and machine agents to a monitoring host
X#
X# this writes various configuration files
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xcd $(dirname $0)
X
XLOGFNAME=setmonitor.log
Xneed_secure_cred_store=false
X
X# source function libraries
X. lib/log.sh
X. lib/runuser.sh
X. lib/conf.sh
X. lib/ha.sh
X. lib/password.sh
X. lib/sql.sh
X
X#
X# make sure we are running as the right user
X#
Xif [ -z "$RUNUSER" ] ; then
X	fatal 1 user not set in $APPD_ROOT/db/db.cnf
Xfi
X
X#
X# global variables that are to be changed by command line args
X#
Xprimary=`hostname`
Xmonitor=
Xsecondary=
Xmachine_agent=""
Xma_conf=""
X
Xfunction shortname() {
X	echo $1 | sed -e 's/\..*$//'	
X}
X
Xfunction usage()
X{
X	if [ $# -gt 0 ] ; then
X		echo "$*"
X	fi
X	echo "usage: $0 <options>"
X	echo "    [ -i <internal vip> ]"
X	echo "    [ -s <secondary hostname> ]"
X	echo "    [ -m [attribute...] where attributes comma seperated:"
X	echo "         url=[protocol://]<controller_monitor>[:port]"
X	echo "         access_key=\"1-2-3-4\""
X	echo "         app_name=\"ABC controller\""
X	echo "         account_name=system"
X	echo "         tier_name=\"App Server\""
X	echo "    [ -a <machine agent install directory> ]"
X	echo "    [ -h ] print help"
X	exit 1
X}
X
Xdeclare -A cmargs
X
X#
X# parse a controller monitor definition.
X# this takes the form:
X# url=[protocol://]<controller_monitor>[:port],
X# access_key=\"1-2-3-4\"
X# [,app_name=\"ABC controller\"]
X# [,account_name=someaccount]
X# [,tier_name=foo]
X
Xfunction parse_monitor_def() {
X
X	local controller_monitor_args="$1" key value
X
X	declare -a vals A
X	# vals array gets comma delimited settings
X	IFS=, read -a vals <<< "$controller_monitor_args"
X	for i in ${!vals[*]} ; do 
X		# then, split the key, value pairs by equals sign
X		key="${vals[$i]%%=*}" ; value="${vals[$i]#*=}"
X		# remove any leading/trailing quotes
X		noquote=$(sed -e 's/^["'\'']//' -e 's/["'\'']$//' <<< "$value")
X		# assign associative array cmargs
X		cmargs[$key]="${noquote}"
X	done
X}
X
Xif [ -f MONITOR ] ; then
X	parse_monitor_def "`cat MONITOR`"
Xfi
X
Xlog_rename
X
X#
X# log versions and arguments
X#
Xmessage "setmonitor log " `date`
Xmessage "version: " `grep '$Id' $0 | head -1`
Xmessage "command line options: " "$@"
Xmessage "hostname: " `hostname`
Xmessage "appd root: $APPD_ROOT"
Xmessage "appdynamics run user: $RUNUSER"
X
Xwhile getopts "s:m:a:i:h" flag; do
X	case $flag in
X	a)
X		machine_agent=$OPTARG
X		;;
X	s)
X		secondary=$($SSH $OPTARG hostname)
X		;;
X	m)
X		parse_monitor_def "$OPTARG"
X		comma= ; cmlist=
X		for key in ${!cmargs[*]} ; do
X			cmlist=$cmlist$comma$key=\""${cmargs[$key]}"\"
X			comma=','
X		done
X		echo "$cmlist" > MONITOR
X		;;
X	i)
X		internal_vip=$OPTARG
X		;;
X	h)
X		if [ -f README ] ; then
X			if [ -z "$PAGER" ] ; then
X				PAGER=cat
X			fi
X			$PAGER README
X		fi
X		usage
X		;;
X	*)
X		if [ $flag != H ] ; then
X			echo "unknown option flag $OPTARG"
X		fi
X		usage
X		;;
X	esac
Xdone
Xshift $(( $OPTIND - 1 ))
X
Xpri_short=$(shortname $primary)
Xsec_short=$(shortname $secondary)
X
X#
X# search for a machine agent in a few likely places
X#
Xif [ -z "$machine_agent" ] ; then
X	machine_agent=(`find_machine_agent`)
X	if [ ${#machine_agent[@]} -gt 1 ] ; then
X		echo too many machine agents: ${machine_agent[@]}
X		echo select one, and specify it using -a
X		usage
X		exit 1
X	fi
Xfi
X
Xif [ -f NO_MACHINE_AGENT ] ; then
X        message "suppressing machine agent processing"
X        machine_agent=""
Xfi
X
Xif [ -n "$machine_agent" ] ; then
X	ma_conf="$machine_agent/conf"
X	message "found machine agent in $machine_agent"
Xfi
X
Xmonitor="${cmargs['url']}"
Xif [ -z "$monitor" ] ; then
X	monitor=$internal_vip
Xfi
X
Xeval `parse_vip internal_vip $internal_vip`
Xeval `parse_vip monitor $monitor`
X
X#
X# set the monitoring up to reasonable defaults if any portion is not set
X#
Xmonitor_access_key="${cmargs['access_key']}"
Xmonitor_account="${cmargs['account_name']}"
Xmonitor_application="${cmargs['app_name']}"
Xmonitor_tier="${cmargs['tier_name']}"
X
Xif [ -z "$monitor_account" ] ; then
X	if [ "$monitor" = "$internal_vip" ] ; then
X		monitor_account=system
X	else
X		monitor_account=customer1
X	fi
Xfi
Xif [ -z "$monitor_application" ] ; then
X	if [ -n "$secondary" ] ; then
X		pair=`echo -e "$pri_short\n$sec_short" | sort | tr '\n' ':' | sed 's/:$//'`
X		monitor_application="HA pair $pair"
X	else
X		monitor_application="$pri_short controller"
X	fi
Xfi
Xif [ -z "$monitor_tier" ] ; then
X	monitor_tier="App Server"
Xfi
Xif [ -z "$monitor_access_key" ] ; then
X	if [ "$monitor" != "$internal_vip" ] ; then
X		fatal 10 "monitoring access key must be specified for external host"
X	fi
Xfi
X
Xif [ -z "$monitor_access_key" ] ; then
X	monitor_access_key=`sql localhost "select access_key from account where name = '$monitor_account'" | get access_key`
X	if [ -z "$monitor_access_key" ] ; then
X		fatal 11 "could not fetch access key for $monitor_account"
X	fi
Xfi
X
X# if explicit monitor details not given then use -i <internal_vip> 
X# e.g.scheme://host:port/path provided instead
X# else if no -i <internal_vip> then just leave to defaults below
Xif (( "${#cmargs[*]}" == 0 )) && [[ -n "$internal_vip" ]] ; then
X	monitor_host=$internal_vip_host
X	monitor_protocol=$internal_vip_protocol
X	monitor_port=$internal_vip_port
Xfi
X
X#
X# worst case defaults
X#
Xmonitor_host=${monitor_host:-localhost}
Xmonitor_protocol=${monitor_protocol:-http}
Xmonitor_port=${monitor_port:-8090}
Xif [ "$monitor_protocol" == "https" ] ; then
X	monitor_ssl=true
Xelse
X	monitor_ssl=false
Xfi
X
Xmessage "monitoring host: $monitor_host"
Xmessage "monitoring protocol: $monitor_protocol"
Xmessage "monitoring port: $monitor_port"
Xmessage "monitoring account: $monitor_account"
Xmessage "monitoring application: $monitor_application"
Xmessage "monitoring tier: $monitor_tier"
Xmessage "monitoring access key: $monitor_access_key"
X
Xcontroller_infos=(`find $ma_conf \
X	$APPD_ROOT/appserver/glassfish/domains/domain1/appagent -name controller-info.xml -print`)
X
Xcredfile=
Xcredpass=
X
Xif echo $monitor_access_key | grep -q -s "^-001" ; then
X	message "key appears to require decryption"
X	need_secure_cred_store=true
X
X	# let's load up the credential store params from the first nonblank
X	for info in ${controller_infos[*]} ; do
X		if [ -f "$info" ] ; then
X			xcredfile=$(controller_info_get $info credential-store-filename | head -1)
X			if [[ -z "$credfile" && -n "$xcredfile" ]] ; then
X				credfile=$xcredfile
X			fi
X			xcredpass=$(controller_info_get $info credential-store-password | head -1)
X			if [[ -z "$credpass" && -n "$xcredpass" ]] ; then
X				credpass=$xcredpass
X			fi
X		fi
X	done
Xfi
X
X#
X# plug the various communications endpoints into domain.xml
X#
Xdomain_set_jvm_option appdynamics.controller.hostName $monitor_host
Xdomain_set_jvm_option appdynamics.controller.port $monitor_port
Xdomain_set_jvm_option appdynamics.controller.ssl.enabled $monitor_ssl
Xdomain_set_jvm_option appdynamics.agent.accountName "$monitor_account"
Xdomain_set_jvm_option appdynamics.agent.accountAccessKey "$monitor_access_key"
Xdomain_set_jvm_option appdynamics.agent.applicationName "$monitor_application"
X
X#
X# make sure all controller-info.xml's are set up properly
X# this means the machine agent as well as the appagent
X#
Xfor info in ${controller_infos[*]} ; do
X	if [ -f $info ] ; then
X		message "modify $info"
X
X		controller_info_set $info controller-host $monitor_host
X		controller_info_set $info controller-port $monitor_port
X		controller_info_set $info application-name "$monitor_application"
X		controller_info_set $info tier-name "$monitor_tier"
X		controller_info_set $info account-name "$monitor_account"
X		controller_info_set $info account-access-key "$monitor_access_key"
X		controller_info_set $info controller-ssl-enabled "$monitor_ssl"
X		controller_info_set $info node-name $pri_short
X
X		if $need_secure_cred_store ; then
X			controller_info_set $info use-encrypted-credentials true
X    		controller_info_set $info credential-store-filename $credfile
X    		controller_info_set $info credential-store-password $credpass
X		else
X			controller_info_set $info use-encrypted-credentials false
X    		controller_info_unset $info credential-store-filename
X    		controller_info_unset $info credential-store-password
X		fi
X
X	# todo: gracefully handle
X    # use-ssl-client-auth
X    # asymmetric-keystore-filename
X    # asymmetric-keystore-password
X    # asymmetric-key-password
X
X		ex -s $info <<- SETMACHINE
X			%s/\(<controller-host>\)[^<]*/\1$monitor_host/
X			%s/\(<controller-port>\)[^<]*/\1$monitor_port/
X			%s/\(<application-name>\)[^<]*/\1$monitor_application/
X			%s/\(<tier-name>\)[^<]*/\1$monitor_tier/
X			%s/\(<account-name>\)[^<]*/\1$monitor_account/
X			%s/\(<account-access-key>\)[^<]*/\1$monitor_access_key/
X			wq
X		SETMACHINE
X	fi
X	if [ -n "$secondary" ] ; then
X		ci_tmp=/tmp/ci.$$.xml
X		rm -f $ci_tmp
X		message "copy $info to secondary"
X		cp $info $ci_tmp
X		controller_info_set $ci_tmp node-name $sec_short
X		$SCP -q $ci_tmp $secondary:$info
X		rm -f $ci_tmp
X	fi
Xdone
X
X#
X# send the edited domain.xml
X#
Xif [ -n "$secondary" ] ; then
X	message "copy domain.xml to secondary"
X	$SCP -q -p $APPD_ROOT/appserver/glassfish/domains/domain1/config/domain.xml $secondary:$APPD_ROOT/appserver/glassfish/domains/domain1/config/domain.xml
X	if [ -f MONITOR ] ; then
X		message "copy MONITOR to secondary"
X		$SCP -q -p $APPD_ROOT/HA/MONITOR $secondary:$APPD_ROOT/HA/MONITOR
X	fi
Xfi
X
X
END-of-setmonitor.sh
echo x - appdcontroller.sh
sed 's/^X//' >appdcontroller.sh << 'END-of-appdcontroller.sh'
X#!/bin/bash
X### BEGIN INIT INFO
X# Provides:          appdcontroller
X# Required-Start:    $remote_fs $syslog appdcontroller-db
X# Required-Stop:     $remote_fs $syslog appdcontroller-db
X# Default-Start:     2 3 4 5
X# Default-Stop:      0 1 6
X# Short-Description: AppDynamics Controller
X# Description:       This script starts and stops the AppDynamics Controller
X#                    Database, appserver, and HA components.
X### END INIT INFO
X#
X# $Id: appdcontroller.sh 3.26 2017-10-21 00:45:29 rob.navarro $
X# 
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# HA Aware Init file for AppDynamics Controller 
X# 
X# chkconfig: 2345 60 25 
X# description: Controller for AppDynamics
X#
X# assumes that the appdynamics controller and database run as the user 
X# specified in the db.cnf file
X#
X# edit this manually if it hasn't been automatically set by the install-init.sh
X# script
X#
X
X# Setting PATH to just a few trusted directories is an **important security** requirement
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
XNAME=$(basename $(readlink -e $0))
X
XAPPD_ROOT=/opt/AppDynamics/Controller
XRUNUSER=root
X
X# source script config
X[ -f /etc/sysconfig/appdcontroller ] && . /etc/sysconfig/appdcontroller
X[ -f /etc/default/appdcontroller ] && . /etc/default/appdcontroller
X
Xif [ -f $APPD_ROOT/HA/INITDEBUG ] ; then
X	logfile=/tmp/$NAME.out
X	rm -f $logfile
X	exec 2> $logfile
X	chown $RUNUSER $logfile
X	set -x
Xfi
X
XOPEN_FD_LIMIT=65536
X
X# pathname for log output - insisting on output to /tmp
XLOGFNAME="/tmp/$(T=${0##*/}; echo ${T%.*}).log"
X
X# For security reasons, locally embed/include function library at HA.shar build time
X
X###################### Start of embedded file: lib/log.sh
X#!/bin/bash
X#
X# $Id: lib/log.sh 3.5 2017-11-21 10:21:04 rob.navarro $
X#
X# logging code for the HA toolkit - include this first
X#
X# all use the global LOGFNAME
X# 
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X#
X
X# this function should have no external dependencies and so should be callable
X# from anywhere...returning 0 for success or non-zero for failure
X# Call as:
X#  APPD_ROOT=$(get_appd_root) || exit 1
Xfunction get_appd_root {
X	local cwd=$(pwd -P || readlink -e .)
X	if [[ "${cwd##*/}" != "HA" ]] ; then
X		echo "ERROR: ${FUNCNAME[0]}: must be run within 'HA' sub-directory of controller install directory" >&2
X		return 1
X	fi
X	echo $(readlink -e ..)
X}
X
Xif [ -z "$APPD_ROOT" ] ; then
X	# let's also check that whoever is calling us has cd'd to the HA directory
X	APPD_ROOT=$(get_appd_root) || exit 1
Xfi
X
Xif [[ -z "$LOGFNAME" ]] ; then
X   echo "ERROR: ${FUNCNAME[0]}: LOGFNAME variable is not set. This is a coding bug!" >&2
X   exit 1
Xfi
X
X#
X# function to mask passwords
X#
Xfunction pwmask {
X	sed -u -e 's/--password=[^ ]*/--password=/'
X}
X
X# Init processes at startup should not log into $APPD_ROOT as generally that is
X# reserved for $RUNUSER EUID processes. Instead will send output elsewhere by
X# assigning full path instead of just filename to LOGFNAME
Xif [[ "${LOGFNAME:0:1}" != "/" ]] ; then
X	LOGFILE=$APPD_ROOT/logs/$LOGFNAME	# caller needs path adding
Xelse
X	LOGFILE=$LOGFNAME			# assume caller wants specific path
Xfi
X
Xfunction log {
X	if [[ -t 1 ]] ; then
X		pwmask | tee -a $LOGFILE
X	else
X		pwmask >> $LOGFILE
X	fi
X}
X
Xfunction logonly {
X	pwmask >> $LOGFILE
X}
X
X# output to STDERR and to log file
Xfunction warn {
X	echo "$@" >&2
X	logmsg "$@"
X}
X
X# output to STDERR only - no log file entry
Xfunction gripe {
X	echo "$@" >&2
X}
X
Xfunction logmsg {
X	echo "  -- " "$@" >> $LOGFILE
X}
X
Xfunction message {
X	if [[ -t 1 ]] ; then
X		echo "  -- " "$@"
X	fi
X
X	logmsg "$@"
X}
X
X#
X# this indicates a coding error, so let's print a useful backtrace
X# as in guten abend
X#
Xfunction abend {
X	local lines=($((LINENO-1)) ${BASH_LINENO[*]})
X	local level=0
X
X	gripe "$@"
X	logmsg "$@"
X	echo "exit code $exitcode" | log
X	echo "backtrace: " | log
X	for func in ${FUNCNAME[*]} ; do
X		echo "${FUNCNAME[$level]}() ${BASH_SOURCE[$level]}:${lines[$level]}" | log
X		level=$((level+1))
X	done
X	kill -INT $$
X}
X
X#
X# this is a runtime failure
X#
Xfunction fatal {
X	local exitcode=$1
X	shift
X	gripe "$@"
X	logmsg "$@"
X	gripe "exit code $exitcode"
X	kill -INT $$
X	exit $exitcode
X}
X
X#
X# rename the log
X#
Xfunction log_rename {
X	if [ -e $LOGFILE ] ; then
X		message "log renamed" `date`
X		mv $LOGFILE $LOGFILE.`date +%F.%T`
X	fi
X}
X
Xfunction debug
X{
X   while read -p '?dbg> ' L ; do
X      eval "$L"
X   done < /dev/stdin
X}
X###################### End of embedded file: lib/log.sh
X
X
X###################### Start of embedded file: lib/password.sh
X#!/bin/bash
X#
X# $Id: lib/password.sh 3.13 2018-02-16 20:00:37 rob.navarro $
X#
X# passwordfunctions.sh
X# contains common code used by the HA toolkit
X#
X# policy:
X# intended to be minimalized for inclusion into the init functions
X# 
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# Collection of routines to deal with MySQL root password
X#
X
Xif [ "`uname`" == "Linux" ] ; then
X	BASE64_NO_WRAP="-w 0"
Xelse
X	BASE64_NO_WRAP=""
Xfi
X
X#
X# prerequisites - die immediately if not present
X#
Xwhich tr >& /dev/null || fatal 2 "needs \'tr\'"
Xwhich base64 >& /dev/null || fatal 3 "needs \'base64\'"
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  ofa1 <obfuscated value of input parameter>
X#
X# Call as:
X#  obf_ofa1 <data>
Xfunction obf_ofa1 {
X	local thisfn=${FUNCNAME[0]} step1 obf
X	(( $# == 1 )) || abend "Usage: $thisfn <clear_data>"
X
X	step1=$(tr '\!-~' 'P-~\!-O' < <(echo -n $1)) || exit 1
X	[[ -n "$step1" ]] || fatal 2 "produced empty step1 obfuscation"
X	obf=$(base64 $BASE64_NO_WRAP < <(echo -n $step1)) || exit 1
X	[[ -n "$obf" ]] || fatal 3 "produced empty obfuscation"
X
X	# use part of function name after last '_' as obfuscator type
X	echo "${thisfn##*_} "$obf
X}
Xexport -f obf_ofa1
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  <deobfuscated value of input parameter>\n
X# Call as:
X#  deobf_ofa1 <data>
Xfunction deobf_ofa1 {
X	local step1 clear
X	(( $# == 1 )) || abend "Usage: ${FUNCNAME[0]} <obf_data>"
X
X	step1=$(base64 --decode $BASE64_NO_WRAP < <(echo -n $1)) || exit 1
X	[[ -n "$step1" ]] || fatal 2 "produced empty step1 deobfuscation"
X	clear=$(tr '\!-~' 'P-~\!-O' < <(echo -n $step1)) || exit 1
X	[[ -n "$clear" ]] || fatal 3 "produced empty cleartext"
X
X	echo $clear
X}
Xexport deobf_ofa1
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  ofa2 <obfuscated value of input parameter>
X#
X# Call as:
X#  obf_ofa2 <data>
Xfunction obf_ofa2 {
X	local thisfn=${FUNCNAME[0]} step1 otype obf
X	(( $# == 1 )) || abend "Usage: $thisfn <clear_data>"
X
X	obf=$(tr 'A-Za-z' 'N-ZA-Mn-za-m' < <(echo -n $1)) || exit 1
X	[[ -n "$obf" ]] || fatal 2 "produced empty obfuscation"
X
X	# use part of function name after last '_' as obfuscator type
X	echo "${thisfn##*_} "$obf
X}
Xexport -f obf_ofa2
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  <deobfuscated value of input parameter>\n
X# Call as:
X#  deobf_ofa2 <data>
Xfunction deobf_ofa2 {
X	local step1 clear
X	(( $# == 1 )) || abend "Usage: ${FUNCNAME[0]} <obf_data>"
X
X	clear=$(tr 'A-Za-z' 'N-ZA-Mn-za-m' < <(echo -n $1)) || exit 1
X	[[ -n "$clear" ]] || fatal 2 "produced empty cleartext"
X
X	echo $clear
X}
Xexport -f deobf_ofa2
X
X# overall wrapper function for obfuscation 
X# Call as
X#  obfuscate <obf type> <data>
X# or
X#  obfuscate <data>
Xfunction obfuscate {
X	local data otype
X	(( $# == 1 || $# == 2 )) || abend "Usage: ${FUNCNAME[0]} [<obf type>] <data>"
X
X	if (( $# == 2 )) ; then
X		otype=$1
X		data=$2
X	else
X		otype=''
X		data=$1
X	fi
X	case $otype in
X		ofa1 | '' )	obf_ofa1 "$data" ;;	# default case
X		ofa2)		obf_ofa2 "$data" ;;
X		*)		abend "unknown obfuscation type \"$otype\"" ;;
X	esac
X}
Xexport -f obfuscate
X
X# overall wrapper for various de-obfuscator functions
X# Call as:
X#  deobfuscate <otype> <obf_data>
Xfunction deobfuscate {
X	local otype=$1 data=$2
X	(( $# == 2 )) || abend "Usage: ${FUNCNAME[0]} <obf type> <obf_data>"
X
X	case $otype in
X		ofa1)	deobf_ofa1 "$data" ;;
X		ofa2)	deobf_ofa2 "$data" ;;
X		*)	abend "unknown obfuscation type \"$otype\"" ;;
X	esac
X}
Xexport -f deobfuscate
X
X###
X# get MySQL root password in a variety of ways.
X# 1. respect MYSQL_ROOT_PASSWD if present; please pass down to sub-scripts. 
X#    Do NOT persist to disk.
X# 2. respect $APPD_ROOT/db/.rootpw if present
X# 3. respect $APPD_ROOT/db/.rootpw.obf if present
X# 4. respect $APPD_ROOT/db/.mylogin.cnf if present and MYSQL_TEST_LOGIN_FILE defined
X# 5. gripe, letting them know how to persist a password
X#
X# Call as:
X#  dbpasswd=`get_mysql_passwd`
Xfunction get_mysql_passwd {
X	local clear obf otype inpw2=' '
X	local rootpw="$APPD_ROOT/db/.rootpw" rootpw_obf="$APPD_ROOT/db/.rootpw.obf"
X	local mysqlpw="$APPD_ROOT/db/.mylogin.cnf"
X
X	if [[ -n "$MYSQL_ROOT_PASSWD" ]] ; then
X		echo $MYSQL_ROOT_PASSWD
X	elif [[ -s $rootpw && -r $rootpw ]] ; then 
X		echo $(<$rootpw)
X	elif [[ -s $rootpw_obf ]] ; then
X		IFS=$' ' read -r otype obf < $rootpw_obf
X		[[ -n "$otype" && -n "$obf" ]] || \
X			fatal 1 "unable to read obfuscated passwd from $rootpw_obf"
X		clear=$(deobfuscate $otype $obf)
X		[[ -n "$clear" ]] || \
X			fatal 2 "unable to deobfuscate passwd from $rootpw_obf"
X		echo $clear
X	elif [[ -s $mysqlpw && -n "$MYSQL_TEST_LOGIN_FILE" ]] ; then
X		clear=$(awk -F= '$1 ~ "word" {print $2}' <<< "$(../db/bin/my_print_defaults -s client)")
X		[[ -n "$clear" ]] || fatal 3 "unable to get passwd from $mysqlpw"
X		echo $clear
X	else
X		fatal 3 "no password in MYSQL_ROOT_PASSWORD, db/.rootpw, db/.rootpw.obf or db/.mylogin.cnf please run save_mysql_passwd.sh"
X	fi
X}
Xexport -f get_mysql_passwd
X
X# sneaky way to get MySQL toot: mysql_config_editor to write its encrypted .mylogin.cnf
X# to a place that is guaranteed to exist. Some clients have no writeable user home 
X# directory !
Xexport MYSQL_TEST_LOGIN_FILE=$APPD_ROOT/db/.mylogin.cnf
X
X###################### End of embedded file: lib/password.sh
X
X
X###################### Start of embedded file: lib/runuser.sh
X#!/bin/bash
X#
X# $Id: lib/runuser.sh 3.35 2018-07-06 22:51:53 cmayer $
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X
X####
X# Contains definition of RUNUSER (effective user) as well as the
X# family of utility functions to wrap commands that sometimes need 
X# to be run as the current user and sometime as the effective user of
X# AppD.
X#
X# Generally the rule is if current effective UID != to the MySQL user
X# then cause all filesystem accesses to run with the effective UID
X# of the MySQL user.
X#
X# These wrapper functions are needed to:
X# 1.  prevent processes started as root from making files that 
X#     non-root users can then later not read.
X# 2.  enable root started processes from accessing NFS mounted filestore
X#
X# This file needs to be included or embedded prior to any use of the
X# the runuser, bg_runuser wrapper functions
X####
X
X#
X# This function has only 2 external dependencies:
X# 1. APPD_ROOT is set
X# 2. $APPD_ROOT/db/db.cnf is readable by current user
X#
X# Returns the username referenced by MySQL's db/db.cnf as the single
X# most reliable record of which effective user AppD should run as.
X#
X# Avoids unpleasant cyclic dependency by just ASSUMING $APPD_ROOT/db/db.cnf
X# is readable. Otherwise using runuser() functions assume the existence of
X# $RUNUSER... which has not yet been determined.
X#
X# Remember that when called by Init script RUNUSER will already have
X# been set.
X# Call as:
X#  RUNUSER=$(get_runuser) || exit 1
Xfunction get_runuser {
X	if [[ -z "$APPD_ROOT" ]] ; then
X		echo "ERROR: ${FUNCNAME[0]}: APPD_ROOT is not set. This is a coding bug! " >&2
X		exit 1
X	fi
X	if ! [ -f $APPD_ROOT/db/db.cnf ] ; then
X		echo "ERROR: ${FUNCNAME[0]}: $APPD_ROOT/db.cnf not readable" >&2
X		exit 1
X	fi
X	local euser RETC
X	euser=$(awk -F= '$1 ~ /^[[:space:]]*user$/ {print $2}' $APPD_ROOT/db/db.cnf)
X	RETC=$?
X
X	if (( $RETC != 0 )) ; then
X		echo "ERROR: ${FUNCNAME[0]}: APPD_ROOT is not set correctly." >&2
X		exit 1
X	fi
X	if [[ -z "$euser" ]] ; then
X		if grep -q user=  $APPD_ROOT/db/db.cnf &>/dev/null; then
X			echo "ERROR: ${FUNCNAME[0]}: your awk version needs upgrading. Please install gawk." >&2
X		else
X			echo "ERROR: ${FUNCNAME[0]}: $APPD_ROOT/db/db.cnf is not valid MySQL config - missing user=... option." >&2
X		fi
X		exit 1
X	fi
X	echo $euser
X}
X
Xif [[ -z "$RUNUSER" ]] ; then
X	RUNUSER=$(get_runuser) || exit 1
Xfi
X
X#
X# runuser quoting is a definite PITA.  the way to stay sane is to note
X# exactly when you want $ to be expanded and make that explicit, passing
X# escaped $ signs when you want the expansion deferred
X#
X# finally, the bg_runuser function should return the pid
X#
Xif [[ `id -un` == "$RUNUSER" ]] ; then
X        function bg_runuser {
X#               echo "$* >/dev/null 2>&1 & echo \$! ; disown" | bash &
X		bash -c "$* &>> ${logfile:-/dev/null} </dev/null & echo \$! ; disown"
X        }
X        function run_mysql {
X                $MYSQLCLIENT
X        }
X        function runuser {
X#               echo "$*" | bash
X                bash -c "$*"
X        }
Xelse
X        function bg_runuser {
X#               echo "$* >/dev/null & echo \$! ; disown" | su -s /bin/bash $RUNUSER
X		su -s /bin/bash ${RUNUSER:-unset_runuser} -c "$* &>> ${logfile:-/dev/null} </dev/null & echo \$! ; disown"
X        }
X        function run_mysql {
X#               su -s $MYSQLCLIENT $RUNUSER
X                su -s /bin/bash ${RUNUSER:-unset_runuser} -c $MYSQLCLIENT
X        }
X        function runuser {
X#               echo "$*" | su -s /bin/bash $RUNUSER
X                su -s /bin/bash ${RUNUSER:-unset_runuser} -c "$*"
X        }
Xfi
Xexport -f runuser bg_runuser run_mysql
X###################### End of embedded file: lib/runuser.sh
X
X
X###################### Start of embedded file: lib/init.sh
X#!/bin/bash
X#
X# $Id: lib/init.sh 3.24 2017-10-21 00:47:23 rob.navarro $
X#
X# init.sh
X# contains functions to change user and run processes
X# 
X# also, common code for the init scripts.
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X
X# enable Debian systems to work also
Xfunction service {
X    if [[ -z "$service_bin" ]] ; then
X        if [[ -f /sbin/service ]] ; then
X                service_bin=/sbin/service
X        elif [[ -f /usr/sbin/service ]] ; then
X                service_bin=/usr/sbin/service
X        else
X            echo service not found in /sbin or /usr/sbin - exiting
X            exit 13
X        fi
X        $service_bin "$@"
X    else
X        $service_bin "$@"
X    fi
X}
X
Xfunction require_root {
X    if [ `id -un` != "root" ] ; then
X        echo "service changes must be run as root"
X        exit 1
X    fi
X}
X
X#
X# trivial sanity check
X#
Xfunction check_sanity {
X	if runuser [ ! -f $APPD_ROOT/db/db.cnf ] ; then
X		echo appd controller not installed in $APPD_ROOT
X		exit 1
X	fi
X	if runuser [ ! -x $APPD_ROOT/bin/controller.sh ] ; then
X		echo controller disabled on this host
X		exit 1
X	fi
X}
X
X###################### End of embedded file: lib/init.sh
X
X
X###################### Start of embedded file: lib/conf.sh
X#!/bin/bash
X#
X# $Id: lib/conf.sh 3.35 2018-07-06 22:51:53 cmayer $
X#
X# contains common code used to extract and set information in the
X# config files.
X#
X# there is some hair here having to do with permissions,
X# and we invoke runuser to do file access as the appropriate user
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X# all the configuration file names and locations
X#
X
Xif ! declare -f runuser &> /dev/null ; then
X        echo "ERROR: ${BASH_SOURCE[0]}: lib/runuser.sh not included. This is a coding error! " >&2
X        exit 1
Xfi
X
Xlockfile=/var/lock/subsys/$NAME
X
XDB_CONF=$APPD_ROOT/db/db.cnf
XAPPSERVER_DISABLE=$APPD_ROOT/HA/APPSERVER_DISABLE
XSHUTDOWN_FAILOVER=$APPD_ROOT/HA/SHUTDOWN_FAILOVER
XWATCHDOG_ENABLE=$APPD_ROOT/HA/WATCHDOG_ENABLE
XWATCHDOG_SETTINGS=$APPD_ROOT/HA/watchdog.settings
XASSASSIN_PIDFILE=$APPD_ROOT/HA/appd_assassin.pid
XWATCHDOG_PIDFILE=$APPD_ROOT/HA/appd_watchdog.pid
XWATCHDOG_STATUS=$APPD_ROOT/logs/watchdog.status
XWATCHDOG_ERROR=$APPD_ROOT/logs/watchdog.error
XDOMAIN_XML=$APPD_ROOT/appserver/glassfish/domains/domain1/config/domain.xml
XCONTROLLER_SH=$APPD_ROOT/bin/controller.sh
XMYSQLCLIENT=$APPD_ROOT/HA/mysqlclient.sh
X
X# must have accessible db.cnf
Xif ! [ -f $DB_CONF ] ; then
X	echo $DB_CONF not readable
X	exit 1
Xfi
X
X
X# requires gnu sed
Xif ! sed --version >/dev/null 2>&1 ; then
X	echo gnu sed required
X	exit 1
Xfi
X
X# the context for xml manipulation
Xxml_context="/<config name=\\\"server-config\\\">/,/<\/config>/"
X
X#
X# lose trailing and leading white space
X#
Xfunction strip_white() {
X	sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
X}
X
X#
X# get possible multiple values from named XML file and element, one per row
X# Call as:
X#  runuser get_xml_element_value $DOMAIN $property
X#
Xfunction get_xml_element_value {
X	local thisfn=${FUNCNAME[0]}
X	(( $# == 2 )) || abend "Usage: $thisfn <xml file> <node name>"
X	local xml=$1
X 	local property=$2
X
X	[[ -r $xml ]] || abend "$thisfn: unable to read $xml"
X	[[ -n $property ]] || abend "$thisfn: needs non-empty property name"
X	awk '$0 !~ /^\/ >|^ -/ {print}' < <(xmllint --shell $1 <<< "cat //$2/text()")
X}
Xexport -f get_xml_element_value
X
X#
X# count how many nodes of given name in supplied XML file
X#
X# This is helpful because no/0 elements of given name imply a insert
X# where as 1 or more, whether empty or not, imply an update
X#
Xfunction count_xml_element {
X	local thisfn=${FUNCNAME[0]}
X	(( $# == 2 )) || abend "Usage: $thisfn <xml file> <node name>"
X	local xml=$1
X 	local property=$2
X
X	[[ -r $xml ]] || abend "$thisfn: unable to read $xml"
X	[[ -n $property ]] || abend "$thisfn: needs non-empty property name"
X	awk '$0 ~ /is a number/ {print $NF}' < <(xmllint --shell $xml <<< "xpath count(//$property)")
X#	awk '	$0 ~ /^\/ > .{2} > $/ 		{print $3} 
X#		$0 ~ /^\/\/.*Node Set$/ 	{print $(NF-2)} 
X#		$0 ~ /^\/ > '$property' > $/ 	{print "1"}' < <(xmllint --shell $xml <<< "cd //$property" 2>&1)
X}
Xexport -f count_xml_element
X
X#
X# get a property from a controller_info file
X#
X# Need to differentiate between <x></x> existing but with no contained value
X# and between simple absence of <x>.*</x>
X#
Xfunction controller_info_get() {
X	local xml=$1
X	local property=$2
X
X	runuser get_xml_element_value $xml $property
X}
Xexport -f controller_info_get
X
X#
X# set a property into a controller_info file
X#
Xfunction controller_info_set() {
X	local xml=$1
X	local property=$2
X	local value=$3
X
X	if (( $(count_xml_element $xml $property) == 0 )) ; then
X		tmpfile=/tmp/cinfo_set.$$ ; rm -f $tmpfile
X		echo "<$property>$value</$property>" > $tmpfile
X		chmod 755 $tmpfile
X		runuser sed -i.$(date +%s) -e "\"/<controller-info>/r $tmpfile\"" $xml
X		rm -f $tmpfile
X	else
X		runuser sed -i.$(date +%s) -e "\"s,\(<$property>\).*\(</$property>\),\1$value\2,\"" $xml
X	fi
X}
Xexport -f controller_info_set
X
X#
X# unset a property in a controller_info file
X#
Xfunction controller_info_unset() {
X	local xml=$1
X	local property=$2
X
X	runuser sed -i.$(date +%s) -e "\"s/<$property>.*<\/$property>//\"" $xml
X}
X
X#
X# simplifies processing jvm options from domain.xml
X#
X# different types of jvm_options are settable, unsettable, and gettable
X# they are denoted by a prefix character
X# -Xmx		prefix character X
X# -XX:+foo	prefix character +|-	we can ask for either sense
X# -XX:-foo
X# -Dfoo		no prefix
X
X#
X# extract a specific jvm option value from a stream
X#
X# get_jvm_option <property>
X#
Xfunction get_jvm_option
X{
X	local property=$1
X
X	awk -F= "/^-XX:$property=/ { print \$2 }
X		/^-XX:\+$property/ { print \"+\" }
X		/^-XX:-$property/ { print \"-\" }
X		/^-D$property=/ { print \$2 }
X		/^-$property/ { sub(\"-$property\",\"\"); print }"
X}
X
X#
X# domain_get_jvm_option <property>
X#
Xfunction domain_get_jvm_option {
X	local property=$1
X	local selector
X	local xpath
X	local base
X	local stripper
X
X	case $property in
X
X	# like -Xmx34g
X	X*)
X		selector="<jvm-options>-$property"
X		stripper=(-e s/-$property//)
X		;;
X
X	# like -XX:+foo or -XX:-foo
X	+*|-*) 
X		base=${property:1}
X		stripper=(-e "s/-XX:\([+-]\)$base/\1/")
X		selector="<jvm-options>-XX:[+-]$base"
X		;;
X
X	# like -Dfoo and -Dfoo=77
X	*)
X		selector="<jvm-options>-D$property"
X		stripper=(-e s/-D$property$/true/ -e s/-D$property=//)
X		;;
X	esac
X
X	val=$(runuser cat $DOMAIN_XML | sed -e "$xml_context!d" | \
X		grep $selector | sed -e 's,</*jvm-options>,,g' ${stripper[@]} | strip_white)
X	if [ -z "$val" ] ; then
X		echo "unset"
X	else
X		echo "$val"
X	fi
X}
X
X#
X# function to unset a domain.xml property
X#
Xfunction domain_unset_jvm_option {
X	local property=$1
X	local selector
X	local base
X	local xpath
X
X	case $property in
X
X	# like -Xmx34g
X	X*)
X		selector="-$property"
X		# selector="starts-with(.,'-$property')"
X		;;
X
X	# like -XX:+foo or -XX:-foo
X	+*|-*)
X		base=${property:1}
X		# selector="string(.)='-XX:-$base' or string(.)='-XX:+$base'"
X		selector="-XX:[+-]$base"
X		;;
X
X	# like -Dfoo and -Dfoo=77
X	*)
X		# selector="starts-with(.,'-D$property=') or (string(.)='-D$property')"
X		selector="-D$property[=]*"
X		;;
X	esac
X
X	runuser sed -i.$(date +%s) -e "\"$xml_context{/$selector/d}\"" $DOMAIN_XML
X}
X
X#
X# domain_set_jvm_option <property> [<value>]
X# 
Xfunction domain_set_jvm_option {
X	local property=$1
X	local value="$2"
X	local base
X	local selector
X	local xpath
X
X	case $property in
X
X	# like -Xmx34g
X	X*)
X		valueset="-$property$value"
X		propmatch="-$property.*"
X		;;
X
X	# like -XX:+foo or -XX:-foo
X	+*|-*)
X		valueset="-XX:$property"
X		propmatch="-XX:[+-]${property:1}"
X		;;
X
X	# like -Dfoo and -Dfoo=77
X	*)
X		if [ -n "$value" ] ; then
X			value="=$value"
X		fi
X		valueset="-D$property$value"
X		propmatch="-D$property=*.*"
X		;;
X	esac
X
X	setter="/<\/java-config>/s,</java-config>,<jvm-options>$valueset</jvm-options>\n&,"
X	changer="s,\(<jvm-options>\)$propmatch\(</jvm-options>\),\1$valueset\2,"
X
X	if [ "$(domain_get_jvm_option $property)" != "unset" ] ; then
X		setter="$changer"
X	fi
X	sed -i.$(date +%s) -e "$xml_context{$setter}" $DOMAIN_XML
X}
X
X# set a property into the db.cnf file
X# if the property is already there, edit it, else append it
X# if remotehost clear, do it locally
Xfunction dbcnf_set {
X	local property=$1
X	local value="$2"
X	local remotehost=$3
X	local IN=/tmp/db.cnf.in.$$
X	local OUT=/tmp/db.cnf.out.$$
X	
X	rm -f $IN $OUT
X
X	if [ -z "$remotehost" ] ; then
X		DBCNF=$DB_CONF
X		CP="cp"
X	else
X		DBCNF=$remotehost:$DB_CONF
X		CP="$SCP -q"
X	fi
X	runuser $CP $DBCNF $IN
X	cp $IN $OUT
X
X	# patch odd failure case when file does not end with newline
X	# (idea from http://backreference.org/2010/05/23/sanitizing-files-with-no-trailing-newline/)
X	tail -c1 $OUT | read -r _ || echo >> $OUT
X
X	if grep -q "^[[:space:]]*$property\(=\|$\)" $IN ; then
X		if ! [ -z "$value" ] ; then
X			sed -i.$(date +%s) "s,\(^[[:space:]]*$property=\).*$,\1$value," $OUT >/dev/null
X		fi
X	else
X		if [ -z "$value" ] ; then
X			echo "$property" >> $OUT
X		else
X			echo "$property=$value" >> $OUT
X		fi
X	fi
X
X	if ! cmp -s $IN $OUT ; then
X		runuser $CP $OUT $DBCNF
X	fi
X	rm -f $IN $OUT
X}
X
X#
X# remove a property setting from the db.cnf file
X#
Xfunction dbcnf_unset {
X	local property=$1
X	local remotehost=$2
X	local IN=/tmp/db.cnf.in.$$
X	local OUT=/tmp/db.cnf.out.$$
X
X	rm -f $IN $OUT
X
X	if [ -z "$remotehost" ] ; then
X		DBCNF=$DB_CONF
X		CP=cp
X	else
X		DBCNF=$remotehost:$DB_CONF
X		CP="$SCP -q"
X	fi
X	runuser $CP $DBCNF $IN
X	cp $IN $OUT
X
X	sed -i.$(date +%s) "/^[[:space:]]*$property\b/d" $OUT >/dev/null
X
X	if ! cmp -s $IN $OUT ; then
X		$CP $OUT $DBCNF
X	fi
X	rm -f $IN $OUT
X}
X
X#
X# read the db.cnf file and extract an attribute
X#
Xfunction dbcnf_get {
X	local property=$1
X
X	val=`runuser grep "\"^[[:space:]]*$property=\"" $DB_CONF | awk -F= '{print $2}'`
X	if [ -n "$val" ] ; then
X		echo $val
X	else
X		echo unset
X	fi
X}
X
X#
X# look in the domain.xml to see if any privileged ports are in use
X# return success if they are
X#
Xfunction use_privileged_ports {
X	runuser xmllint --xpath "\"//*[@port<1024]\"" $DOMAIN_XML 2>/dev/null | grep -q -s port
X}
X
X#
X# scale a size by a suffix [KkMmGg] if present
X# also, add some fluff if specified
X#
X# input on stdin
Xfunction scale {
X	local fluff=1
X	if [ $# = 1 ] ; then fluff=$1 ; fi
X
X	awk "{
X		if(sub(/[Kk]/,\"\",\$1) == 1){
X			BYTES=\$1*1024
X		}
X		else if(sub(/[Mm]/,\"\",\$1)==1){
X			BYTES=\$1*1048576
X		}
X		else if(sub(/[Gg]/,\"\",\$1)==1){
X			BYTES=\$1*1073741824
X		} else {
X			gsub(/[^0-9]/,\"\",\$1)
X			BYTES=\$1
X		}
X		printf(\"%.0f\n\", BYTES * $fluff)
X		exit;
X	}"
X}
X
X#
X# read some things from the db.cnf
X#
XDB_PID_FILE=`dbcnf_get pid-file`
XDB_DATA_DIR=`dbcnf_get datadir`
XFILE_RUNUSER=$(dbcnf_get user)
X
X#
X# a trivial sanity check - if runuser is defined, it better be what is in
X# the database config file
X#
Xif [ -n "$RUNUSER" ] ; then
X	if [ $FILE_RUNUSER != $RUNUSER ] ; then
X		echo "runuser inconsistent: sysconfig: $RUNUSER db.cnf: $FILE_RUNUSER"
X	fi
Xfi
XRUNUSER=$FILE_RUNUSER
X
X#
X# given a name and url, crack the url and set the 3 variables:
X# $name_host, $name_port, $name_protocol
X#
Xfunction parse_vip()
X{
X        local vip_name=$1
X        local vip_def=$2
X
X        [[ -z "$vip_def" ]] && return
X
X        echo $vip_def | awk -F: -v vip_name=$vip_name '
X                BEGIN {
X                        host="";
X                        protocol="http";
X                        port="8090";
X                }
X                /http[s]*:/ {protocol=$1; host=$2; port=$3;next}
X                /:/ {host=$1; port=$2;next}
X                {host=$1}
X                END {
X                        if (port == "") {
X                                port = (protocol=="https")?443:8090;
X                        }
X                        gsub("^//","",host);
X                        gsub("/.*$","",host);   # drop any trailing /controller
X                        gsub("[^0-9]*$","",port);
X                        printf("%s_host=%s\n", vip_name, host);
X                        printf("%s_port=%s\n", vip_name, port);
X                        printf("%s_protocol=%s\n", vip_name, protocol);
X                }
X        '
X}
X###################### End of embedded file: lib/conf.sh
X
X
X###################### Start of embedded file: lib/status.sh
X#!/bin/bash
X#
X# $Id: status.sh 3.30 2018-05-01 12:39:50 cmayer $
X#
X# common code to interrogate the status of various functions
X#
X# can be included by init or other scripts
X# Copyright 2016 AppDynamics, Inc
X#
X#	Licensed under the Apache License, Version 2.0 (the "License");
X#	you may not use this file except in compliance with the License.
X#	You may obtain a copy of the License at
X#
X#		http://www.apache.org/licenses/LICENSE-2.0
X#
X#	Unless required by applicable law or agreed to in writing, software
X#	distributed under the License is distributed on an "AS IS" BASIS,
X#	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#	See the License for the specific language governing permissions and
X#	limitations under the License.
X#
X
Xfunction watchdog_running {
X	if runuser [ -f "$WATCHDOG_PIDFILE" ] ; then
X		watchdog_pid=`runuser cat $WATCHDOG_PIDFILE`
X		if [ ! -z "$watchdog_pid" ] ; then
X			if [ -d /proc/$watchdog_pid ] ; then
X				return 0
X			fi
X		fi
X	fi
X	rm -f $WATCHDOG_PIDFILE
X	return 1
X}
X
Xfunction assassin_running {
X	if runuser [ -f "$ASSASSIN_PIDFILE" ] ; then
X		assassin_pid=`runuser cat $ASSASSIN_PIDFILE`
X		if [ ! -z "$assassin_pid" ] ; then
X			if [ -d /proc/$assassin_pid ] ; then
X				return 0
X			fi
X		fi
X	fi
X	rm -f $ASSASSIN_PIDFILE
X	return 1
X}
X
Xfunction replication_disabled {
X	if [ $(dbcnf_get skip-slave-start) = true ] ; then
X		return 0
X	else
X		return 1
X	fi
X}
X
Xfunction db_running {
X    if [ "$DB_PID_FILE" = "unset" ] ; then
X        DB_PID_FILE="$DB_DATA_DIR/$(hostname).pid"
X    fi
X    if runuser [ -f $DB_PID_FILE ] ; then
X        DB_PID=`runuser cat $DB_PID_FILE 2>/dev/null`
X    fi
X    if [ -z "$DB_PID" ] ; then
X        return 1
X    fi   
X    if [ -d /proc/$DB_PID ] ; then
X        return 0;
X    fi 
X    return 1
X}
X
Xfunction get {
X	local key=$1
X	awk "/$key:/ {print \$2}"
X}
X
Xfunction controller_mode {
X	echo "select value from global_configuration_local \
X		where name='appserver.mode'" | run_mysql | get value
X}
X
Xfunction controllerrunning {
X	if pgrep -f -u $RUNUSER "java -jar ./../modules/admin-cli.jar" >/dev/null ; then
X		return 1
X	fi
X	if runuser "$APPD_ROOT/appserver/glassfish/bin/asadmin" list-domains | \
X		grep -q "domain1 running" ; then
X		return 0
X	fi
X	if pgrep -f -u $RUNUSER "$APPD_ROOT/appserver/glassfish/domains/domain1" >/dev/null ; then
X		return 2
X	fi
X	return 3
X}
X
Xfunction events_running {
X	if ps -f -u $RUNUSER | grep "java" | grep "$APPD_ROOT/events_service" >/dev/null ; then
X		return 0
X	fi
X	return 1
X}
X
Xfunction reporting_running {
X	if pgrep -f -u $RUNUSER "$APPD_ROOT/reporting_service/nodejs/bin/node" >/dev/null ; then
X		return 0
X	fi
X	return 1
X}
X
Xfunction machine_agent_running {
X	if pgrep -f -u $RUNUSER machineagent.jar > /dev/null; then
X		return 0
X	else
X		return 1
X	fi
X}
X
X#
X# find java
X#
Xfunction find_java {
X    if [ -f $APPD_ROOT/appserver/glassfish/config/asenv.conf ] ; then
X        AS_JAVA=$(grep ^AS_JAVA= $APPD_ROOT/appserver/glassfish/config/asenv.conf |
X        awk -F= '{print $2}' | sed -e 's/^"//' -e 's/"$//')
X    fi
X    unset JAVA
X    for java in $AS_JAVA $APPD_ROOT/jre ; do
X        if [ -x $java/bin/java ] ; then
X            export JAVA=$java/bin/java
X            break;
X        fi
X    done
X    if [ -z "$JAVA" ] ; then
X        return 1
X    fi
X    echo $JAVA
X    return 0
X}
X
X###################### End of embedded file: lib/status.sh
X
X
X# find the java
Xif ! export JAVA=$(find_java) ; then
X	echo cannot find java
X    exit 2
Xfi
X
Xcheck_sanity
X
Xif [ -f "$APPD_ROOT/HA/LARGE_PAGES_ENABLE" ] ; then
X	ENABLE_HUGE_PAGES="true"
Xfi
X
Xcase "$1" in
Xstart)  
X	require_root
X	if runuser [ -f $APPSERVER_DISABLE ] ; then
X		echo appdcontroller disabled - incomplete replica:w
X		exit 1
X	fi
X	service appdcontroller-db start
X	if [[ `id -u $RUNUSER` != "0" ]] && use_privileged_ports ; then
X		#trying to bind java to a privileged port as an unpriviliged user
X		setcap cap_net_bind_service=+ep "$JAVA"
X		echo "${JAVA%/bin/java}/lib/$(uname -m | sed -e 's/x86_64/amd64/')/jli" > \
X			/etc/ld.so.conf.d/appdynamics.conf
X		ldconfig            
X	fi
X	if [ "`controller_mode`" == "active" ] ; then
X		bg_runuser $CONTROLLER_SH start-appserver >/dev/null
X		if replication_disabled ; then
X			if assassin_running ; then
X				echo assassin already running
X			else
X				echo starting assassin 
X				bg_runuser "$APPD_ROOT/HA/assassin.sh" >/dev/null
X			fi
X		fi
X	# if the events service directory exists, do events stuff.
X	# an full scale HA should rename this directory
X		if runuser [ -d "$APPD_ROOT/events_service" ] ; then
X			if ! events_running ; then
X				bg_runuser $CONTROLLER_SH start-events-service >/dev/null
X			fi
X		fi
X		if runuser [ -d "$APPD_ROOT/reporting_service" ] ; then
X			if ! reporting_running ; then
X				bg_runuser HOME=~$RUNUSER $CONTROLLER_SH start-reporting-service >/dev/null
X			fi
X		fi
X	else
X		if replication_disabled ; then
X			echo passive node - appd replication disabled
X			exit 1
X		fi
X		echo skipping appserver start - HA passive
X		if runuser [ -f $WATCHDOG_ENABLE ] ; then
X			if watchdog_running ; then
X				echo appd watchdog already running 
X			else
X				echo starting appd watchdog
X				bg_runuser "$APPD_ROOT/HA/watchdog.sh" >/dev/null
X				pid=$!
X				# wait for the pidfile to be created or the process to die
X				while [ -d /proc/$pid ] ; do
X					if [ -f $WATCHDOG_PIDFILE ] ; then
X						break
X					fi
X					sleep 1
X				done
X			fi
X		else
X			echo watchdog disabled
X		fi
X	fi
X	rm -f $lockfile	
X	touch $lockfile	
X;;  
X  
Xstop)
X	require_root
X	if watchdog_running ; then
X		kill -9 $watchdog_pid && ( echo appd watchdog killed; \
X			runuser "echo `date` appd watchdog killed \ 
X				>> $APPD_ROOT/logs/watchdog.log" )
X	fi
X	runuser rm -f $WATCHDOG_PIDFILE
X	if assassin_running ; then
X		kill -9 $assassin_pid && ( echo appd assassin killed; \
X		runuser "echo `date` appd assassin killed \
X			>> $APPD_ROOT/logs/assassin.log" )		
X	fi
X	runuser rm -f $ASSASSIN_PIDFILE
X	# if the events service directory exists, do events stuff.
X	# an full scale HA should rename this directory
X	if runuser [ -d "$APPD_ROOT/events_service" ] ; then
X		runuser $CONTROLLER_SH stop-events-service
X	fi
X	if runuser [ -d "$APPD_ROOT/reporting_service" ] ; then
X		runuser HOME=~$RUNUSER $CONTROLLER_SH stop-reporting-service
X	fi
X	# The default controller shutdown timeout is 45 minutes 
X	# That is a long time to be stuck with a hung appserver on the way down.
X	# Thankfully, we can set an environment variable to override that:
X	export AD_SHUTDOWN_TIMEOUT_IN_MIN=10
X    runuser $CONTROLLER_SH stop-appserver
X	controllerrunning
X	if [ $? -lt 3 ] ; then
X		echo "forcibly killing appserver"
X		pkill -9 -f "$APPD_ROOT/appserver/glassfish/domains/domain1"
X		echo "truncate ejb__timer__tbl;" | run_mysql
X	fi
X	#
X	# an interesting case is if we are the active node, and replication is up,
X	# and HA/SHUTDOWN_FAILOVER exists, we will make tell the secondary to start
X	# an appserver
X	#
X	if [ -f $SHUTDOWN_FAILOVER -a "`controller_mode`" == active ] ; then
X		secondary=`echo "show slave status\G" | run_mysql | \
X			awk '/Master_Host:/ {print $2}'`
X        echo 'update global_configuration_local set value="passive" \
X			where name="appserver.mode"' | run_mysql
X        echo 'update global_configuration_local set value="secondary" \
X			where name="ha.controller.type"' | run_mysql
X		runuser ssh $secondary "$APPD_ROOT/HA/failover.sh" \
X			-n primary_has_been_set_passive_and_stopped >/dev/null
X	fi
X
X	if [ -e "$APPD_ROOT/logs/server.log.lck" ] ; then
X		runuser rm -f "$APPD_ROOT/logs/server.log.lck"
X	fi
X	rm -f $lockfile
X;;
X
Xrestart)  
X	$0 stop  
X	$0 start  
X;;  
X  
Xstatus)  
X	retcode=0
X	service appdcontroller-db status
X	if watchdog_running ; then
X		echo watchdog running
X		if [ -f $WATCHDOG_STATUS ] ; then
X			cat $WATCHDOG_STATUS
X		fi
X	else
X		echo watchdog not running
X	fi
X	if assassin_running ; then
X		echo assassin running
X	else
X		echo assassin not running
X	fi
X	controllerrunning
X	case $? in
X	0)
X		echo "controller running"
X		;;
X	1)
X		echo "controller started - not up"
X		retcode=1
X		;;
X	*)
X		echo "controller not running"
X		retcode=1
X		;;
X	esac
X	events_running
X	case $? in
X	0)
X		echo "events service running"
X		;;
X	*)
X		echo "events service not running"
X		;;
X	esac
X	reporting_running
X	case $? in
X	0)
X		echo "reporting service running"
X		;;
X	*)
X		echo "reporting service not running"
X		;;
X	esac
X	if [ -f /etc/init.d/appdynamics-machine-agent ] ; then
X		service appdynamics-machine-agent status
X	fi
X	exit $retcode
X;;
X
X*)  
X        echo "Usage: $0 {start|stop|restart|status}"  
X        exit 1  
Xesac
Xexit 0 
END-of-appdcontroller.sh
echo x - appdcontroller-db.sh
sed 's/^X//' >appdcontroller-db.sh << 'END-of-appdcontroller-db.sh'
X#!/bin/bash
X### BEGIN INIT INFO
X# Provides:          appdcontroller-db
X# Required-Start:    $remote_fs $syslog
X# Required-Stop:     $remote_fs $syslog
X# Should-Start:      zfs
X# Should-Stop:       zfs
X# Default-Start:     2 3 4 5
X# Default-Stop:      0 1 6
X# Short-Description: AppDynamics Controller
X# Description:       This script starts and stops the AppDynamics Controller
X#                    Database, appserver, and HA components.
X### END INIT INFO
X#
X# $Id: appdcontroller-db.sh 3.20 2017-10-21 00:45:29 rob.navarro $
X# 
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# HA Aware Init file for AppDynamics Controller 
X# 
X# chkconfig: 2345 60 25 
X# description: Controller for AppDynamics
X#
X# assumes that the appdynamics controller and database run as the user 
X# specified in the db.cnf file
X#
X# edit this manually if it hasn't been automatically set by the install-init.sh
X# script
X#
X# Setting PATH to just a few trusted directories is an **important security** requirement
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
XNAME=$(basename $(readlink -e $0))
X
XAPPD_ROOT=/opt/AppDynamics/Controller
XRUNUSER=root
X
X# source script config
X[ -f /etc/sysconfig/appdcontroller-db ] && . /etc/sysconfig/appdcontroller-db
X[ -f /etc/default/appdcontroller-db ] && . /etc/default/appdcontroller-db
X
Xif [ -f $APPD_ROOT/HA/INITDEBUG ] ; then
X	logfile=/tmp/$NAME.out
X	rm -f $logfile
X	exec 2> $logfile
X	chown $RUNUSER $logfile
X	set -x
Xfi
X
XEVENTS_VMOPTIONS_FILE=$APPD_ROOT/events_service/conf/events-service.vmoptions
Xif [ ! -f $EVENTS_VMOPTIONS_FILE ] ; then
X	EVENTS_VMOPTIONS_FILE=$APPD_ROOT/events_service/analytics-processor/conf/analytics-processor.vmoptions
Xfi
XLIMITS=/etc/security/limits.d/appdynamics.conf
X
X# pathname for log output - insisting on output to /tmp
XLOGFNAME="/tmp/$(T=${0##*/}; echo ${T%.*}).log"
X
X# For security reasons, locally embed/include function library at HA.shar build time
X
X###################### Start of embedded file: lib/log.sh
X#!/bin/bash
X#
X# $Id: lib/log.sh 3.5 2017-11-21 10:21:04 rob.navarro $
X#
X# logging code for the HA toolkit - include this first
X#
X# all use the global LOGFNAME
X# 
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X#
X
X# this function should have no external dependencies and so should be callable
X# from anywhere...returning 0 for success or non-zero for failure
X# Call as:
X#  APPD_ROOT=$(get_appd_root) || exit 1
Xfunction get_appd_root {
X	local cwd=$(pwd -P || readlink -e .)
X	if [[ "${cwd##*/}" != "HA" ]] ; then
X		echo "ERROR: ${FUNCNAME[0]}: must be run within 'HA' sub-directory of controller install directory" >&2
X		return 1
X	fi
X	echo $(readlink -e ..)
X}
X
Xif [ -z "$APPD_ROOT" ] ; then
X	# let's also check that whoever is calling us has cd'd to the HA directory
X	APPD_ROOT=$(get_appd_root) || exit 1
Xfi
X
Xif [[ -z "$LOGFNAME" ]] ; then
X   echo "ERROR: ${FUNCNAME[0]}: LOGFNAME variable is not set. This is a coding bug!" >&2
X   exit 1
Xfi
X
X#
X# function to mask passwords
X#
Xfunction pwmask {
X	sed -u -e 's/--password=[^ ]*/--password=/'
X}
X
X# Init processes at startup should not log into $APPD_ROOT as generally that is
X# reserved for $RUNUSER EUID processes. Instead will send output elsewhere by
X# assigning full path instead of just filename to LOGFNAME
Xif [[ "${LOGFNAME:0:1}" != "/" ]] ; then
X	LOGFILE=$APPD_ROOT/logs/$LOGFNAME	# caller needs path adding
Xelse
X	LOGFILE=$LOGFNAME			# assume caller wants specific path
Xfi
X
Xfunction log {
X	if [[ -t 1 ]] ; then
X		pwmask | tee -a $LOGFILE
X	else
X		pwmask >> $LOGFILE
X	fi
X}
X
Xfunction logonly {
X	pwmask >> $LOGFILE
X}
X
X# output to STDERR and to log file
Xfunction warn {
X	echo "$@" >&2
X	logmsg "$@"
X}
X
X# output to STDERR only - no log file entry
Xfunction gripe {
X	echo "$@" >&2
X}
X
Xfunction logmsg {
X	echo "  -- " "$@" >> $LOGFILE
X}
X
Xfunction message {
X	if [[ -t 1 ]] ; then
X		echo "  -- " "$@"
X	fi
X
X	logmsg "$@"
X}
X
X#
X# this indicates a coding error, so let's print a useful backtrace
X# as in guten abend
X#
Xfunction abend {
X	local lines=($((LINENO-1)) ${BASH_LINENO[*]})
X	local level=0
X
X	gripe "$@"
X	logmsg "$@"
X	echo "exit code $exitcode" | log
X	echo "backtrace: " | log
X	for func in ${FUNCNAME[*]} ; do
X		echo "${FUNCNAME[$level]}() ${BASH_SOURCE[$level]}:${lines[$level]}" | log
X		level=$((level+1))
X	done
X	kill -INT $$
X}
X
X#
X# this is a runtime failure
X#
Xfunction fatal {
X	local exitcode=$1
X	shift
X	gripe "$@"
X	logmsg "$@"
X	gripe "exit code $exitcode"
X	kill -INT $$
X	exit $exitcode
X}
X
X#
X# rename the log
X#
Xfunction log_rename {
X	if [ -e $LOGFILE ] ; then
X		message "log renamed" `date`
X		mv $LOGFILE $LOGFILE.`date +%F.%T`
X	fi
X}
X
Xfunction debug
X{
X   while read -p '?dbg> ' L ; do
X      eval "$L"
X   done < /dev/stdin
X}
X###################### End of embedded file: lib/log.sh
X
X
X###################### Start of embedded file: lib/password.sh
X#!/bin/bash
X#
X# $Id: lib/password.sh 3.13 2018-02-16 20:00:37 rob.navarro $
X#
X# passwordfunctions.sh
X# contains common code used by the HA toolkit
X#
X# policy:
X# intended to be minimalized for inclusion into the init functions
X# 
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# Collection of routines to deal with MySQL root password
X#
X
Xif [ "`uname`" == "Linux" ] ; then
X	BASE64_NO_WRAP="-w 0"
Xelse
X	BASE64_NO_WRAP=""
Xfi
X
X#
X# prerequisites - die immediately if not present
X#
Xwhich tr >& /dev/null || fatal 2 "needs \'tr\'"
Xwhich base64 >& /dev/null || fatal 3 "needs \'base64\'"
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  ofa1 <obfuscated value of input parameter>
X#
X# Call as:
X#  obf_ofa1 <data>
Xfunction obf_ofa1 {
X	local thisfn=${FUNCNAME[0]} step1 obf
X	(( $# == 1 )) || abend "Usage: $thisfn <clear_data>"
X
X	step1=$(tr '\!-~' 'P-~\!-O' < <(echo -n $1)) || exit 1
X	[[ -n "$step1" ]] || fatal 2 "produced empty step1 obfuscation"
X	obf=$(base64 $BASE64_NO_WRAP < <(echo -n $step1)) || exit 1
X	[[ -n "$obf" ]] || fatal 3 "produced empty obfuscation"
X
X	# use part of function name after last '_' as obfuscator type
X	echo "${thisfn##*_} "$obf
X}
Xexport -f obf_ofa1
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  <deobfuscated value of input parameter>\n
X# Call as:
X#  deobf_ofa1 <data>
Xfunction deobf_ofa1 {
X	local step1 clear
X	(( $# == 1 )) || abend "Usage: ${FUNCNAME[0]} <obf_data>"
X
X	step1=$(base64 --decode $BASE64_NO_WRAP < <(echo -n $1)) || exit 1
X	[[ -n "$step1" ]] || fatal 2 "produced empty step1 deobfuscation"
X	clear=$(tr '\!-~' 'P-~\!-O' < <(echo -n $step1)) || exit 1
X	[[ -n "$clear" ]] || fatal 3 "produced empty cleartext"
X
X	echo $clear
X}
Xexport deobf_ofa1
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  ofa2 <obfuscated value of input parameter>
X#
X# Call as:
X#  obf_ofa2 <data>
Xfunction obf_ofa2 {
X	local thisfn=${FUNCNAME[0]} step1 otype obf
X	(( $# == 1 )) || abend "Usage: $thisfn <clear_data>"
X
X	obf=$(tr 'A-Za-z' 'N-ZA-Mn-za-m' < <(echo -n $1)) || exit 1
X	[[ -n "$obf" ]] || fatal 2 "produced empty obfuscation"
X
X	# use part of function name after last '_' as obfuscator type
X	echo "${thisfn##*_} "$obf
X}
Xexport -f obf_ofa2
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  <deobfuscated value of input parameter>\n
X# Call as:
X#  deobf_ofa2 <data>
Xfunction deobf_ofa2 {
X	local step1 clear
X	(( $# == 1 )) || abend "Usage: ${FUNCNAME[0]} <obf_data>"
X
X	clear=$(tr 'A-Za-z' 'N-ZA-Mn-za-m' < <(echo -n $1)) || exit 1
X	[[ -n "$clear" ]] || fatal 2 "produced empty cleartext"
X
X	echo $clear
X}
Xexport -f deobf_ofa2
X
X# overall wrapper function for obfuscation 
X# Call as
X#  obfuscate <obf type> <data>
X# or
X#  obfuscate <data>
Xfunction obfuscate {
X	local data otype
X	(( $# == 1 || $# == 2 )) || abend "Usage: ${FUNCNAME[0]} [<obf type>] <data>"
X
X	if (( $# == 2 )) ; then
X		otype=$1
X		data=$2
X	else
X		otype=''
X		data=$1
X	fi
X	case $otype in
X		ofa1 | '' )	obf_ofa1 "$data" ;;	# default case
X		ofa2)		obf_ofa2 "$data" ;;
X		*)		abend "unknown obfuscation type \"$otype\"" ;;
X	esac
X}
Xexport -f obfuscate
X
X# overall wrapper for various de-obfuscator functions
X# Call as:
X#  deobfuscate <otype> <obf_data>
Xfunction deobfuscate {
X	local otype=$1 data=$2
X	(( $# == 2 )) || abend "Usage: ${FUNCNAME[0]} <obf type> <obf_data>"
X
X	case $otype in
X		ofa1)	deobf_ofa1 "$data" ;;
X		ofa2)	deobf_ofa2 "$data" ;;
X		*)	abend "unknown obfuscation type \"$otype\"" ;;
X	esac
X}
Xexport -f deobfuscate
X
X###
X# get MySQL root password in a variety of ways.
X# 1. respect MYSQL_ROOT_PASSWD if present; please pass down to sub-scripts. 
X#    Do NOT persist to disk.
X# 2. respect $APPD_ROOT/db/.rootpw if present
X# 3. respect $APPD_ROOT/db/.rootpw.obf if present
X# 4. respect $APPD_ROOT/db/.mylogin.cnf if present and MYSQL_TEST_LOGIN_FILE defined
X# 5. gripe, letting them know how to persist a password
X#
X# Call as:
X#  dbpasswd=`get_mysql_passwd`
Xfunction get_mysql_passwd {
X	local clear obf otype inpw2=' '
X	local rootpw="$APPD_ROOT/db/.rootpw" rootpw_obf="$APPD_ROOT/db/.rootpw.obf"
X	local mysqlpw="$APPD_ROOT/db/.mylogin.cnf"
X
X	if [[ -n "$MYSQL_ROOT_PASSWD" ]] ; then
X		echo $MYSQL_ROOT_PASSWD
X	elif [[ -s $rootpw && -r $rootpw ]] ; then 
X		echo $(<$rootpw)
X	elif [[ -s $rootpw_obf ]] ; then
X		IFS=$' ' read -r otype obf < $rootpw_obf
X		[[ -n "$otype" && -n "$obf" ]] || \
X			fatal 1 "unable to read obfuscated passwd from $rootpw_obf"
X		clear=$(deobfuscate $otype $obf)
X		[[ -n "$clear" ]] || \
X			fatal 2 "unable to deobfuscate passwd from $rootpw_obf"
X		echo $clear
X	elif [[ -s $mysqlpw && -n "$MYSQL_TEST_LOGIN_FILE" ]] ; then
X		clear=$(awk -F= '$1 ~ "word" {print $2}' <<< "$(../db/bin/my_print_defaults -s client)")
X		[[ -n "$clear" ]] || fatal 3 "unable to get passwd from $mysqlpw"
X		echo $clear
X	else
X		fatal 3 "no password in MYSQL_ROOT_PASSWORD, db/.rootpw, db/.rootpw.obf or db/.mylogin.cnf please run save_mysql_passwd.sh"
X	fi
X}
Xexport -f get_mysql_passwd
X
X# sneaky way to get MySQL toot: mysql_config_editor to write its encrypted .mylogin.cnf
X# to a place that is guaranteed to exist. Some clients have no writeable user home 
X# directory !
Xexport MYSQL_TEST_LOGIN_FILE=$APPD_ROOT/db/.mylogin.cnf
X
X###################### End of embedded file: lib/password.sh
X
X
X###################### Start of embedded file: lib/runuser.sh
X#!/bin/bash
X#
X# $Id: lib/runuser.sh 3.35 2018-07-06 22:51:53 cmayer $
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X
X####
X# Contains definition of RUNUSER (effective user) as well as the
X# family of utility functions to wrap commands that sometimes need 
X# to be run as the current user and sometime as the effective user of
X# AppD.
X#
X# Generally the rule is if current effective UID != to the MySQL user
X# then cause all filesystem accesses to run with the effective UID
X# of the MySQL user.
X#
X# These wrapper functions are needed to:
X# 1.  prevent processes started as root from making files that 
X#     non-root users can then later not read.
X# 2.  enable root started processes from accessing NFS mounted filestore
X#
X# This file needs to be included or embedded prior to any use of the
X# the runuser, bg_runuser wrapper functions
X####
X
X#
X# This function has only 2 external dependencies:
X# 1. APPD_ROOT is set
X# 2. $APPD_ROOT/db/db.cnf is readable by current user
X#
X# Returns the username referenced by MySQL's db/db.cnf as the single
X# most reliable record of which effective user AppD should run as.
X#
X# Avoids unpleasant cyclic dependency by just ASSUMING $APPD_ROOT/db/db.cnf
X# is readable. Otherwise using runuser() functions assume the existence of
X# $RUNUSER... which has not yet been determined.
X#
X# Remember that when called by Init script RUNUSER will already have
X# been set.
X# Call as:
X#  RUNUSER=$(get_runuser) || exit 1
Xfunction get_runuser {
X	if [[ -z "$APPD_ROOT" ]] ; then
X		echo "ERROR: ${FUNCNAME[0]}: APPD_ROOT is not set. This is a coding bug! " >&2
X		exit 1
X	fi
X	if ! [ -f $APPD_ROOT/db/db.cnf ] ; then
X		echo "ERROR: ${FUNCNAME[0]}: $APPD_ROOT/db.cnf not readable" >&2
X		exit 1
X	fi
X	local euser RETC
X	euser=$(awk -F= '$1 ~ /^[[:space:]]*user$/ {print $2}' $APPD_ROOT/db/db.cnf)
X	RETC=$?
X
X	if (( $RETC != 0 )) ; then
X		echo "ERROR: ${FUNCNAME[0]}: APPD_ROOT is not set correctly." >&2
X		exit 1
X	fi
X	if [[ -z "$euser" ]] ; then
X		if grep -q user=  $APPD_ROOT/db/db.cnf &>/dev/null; then
X			echo "ERROR: ${FUNCNAME[0]}: your awk version needs upgrading. Please install gawk." >&2
X		else
X			echo "ERROR: ${FUNCNAME[0]}: $APPD_ROOT/db/db.cnf is not valid MySQL config - missing user=... option." >&2
X		fi
X		exit 1
X	fi
X	echo $euser
X}
X
Xif [[ -z "$RUNUSER" ]] ; then
X	RUNUSER=$(get_runuser) || exit 1
Xfi
X
X#
X# runuser quoting is a definite PITA.  the way to stay sane is to note
X# exactly when you want $ to be expanded and make that explicit, passing
X# escaped $ signs when you want the expansion deferred
X#
X# finally, the bg_runuser function should return the pid
X#
Xif [[ `id -un` == "$RUNUSER" ]] ; then
X        function bg_runuser {
X#               echo "$* >/dev/null 2>&1 & echo \$! ; disown" | bash &
X		bash -c "$* &>> ${logfile:-/dev/null} </dev/null & echo \$! ; disown"
X        }
X        function run_mysql {
X                $MYSQLCLIENT
X        }
X        function runuser {
X#               echo "$*" | bash
X                bash -c "$*"
X        }
Xelse
X        function bg_runuser {
X#               echo "$* >/dev/null & echo \$! ; disown" | su -s /bin/bash $RUNUSER
X		su -s /bin/bash ${RUNUSER:-unset_runuser} -c "$* &>> ${logfile:-/dev/null} </dev/null & echo \$! ; disown"
X        }
X        function run_mysql {
X#               su -s $MYSQLCLIENT $RUNUSER
X                su -s /bin/bash ${RUNUSER:-unset_runuser} -c $MYSQLCLIENT
X        }
X        function runuser {
X#               echo "$*" | su -s /bin/bash $RUNUSER
X                su -s /bin/bash ${RUNUSER:-unset_runuser} -c "$*"
X        }
Xfi
Xexport -f runuser bg_runuser run_mysql
X###################### End of embedded file: lib/runuser.sh
X
X
X###################### Start of embedded file: lib/init.sh
X#!/bin/bash
X#
X# $Id: lib/init.sh 3.24 2017-10-21 00:47:23 rob.navarro $
X#
X# init.sh
X# contains functions to change user and run processes
X# 
X# also, common code for the init scripts.
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X
X# enable Debian systems to work also
Xfunction service {
X    if [[ -z "$service_bin" ]] ; then
X        if [[ -f /sbin/service ]] ; then
X                service_bin=/sbin/service
X        elif [[ -f /usr/sbin/service ]] ; then
X                service_bin=/usr/sbin/service
X        else
X            echo service not found in /sbin or /usr/sbin - exiting
X            exit 13
X        fi
X        $service_bin "$@"
X    else
X        $service_bin "$@"
X    fi
X}
X
Xfunction require_root {
X    if [ `id -un` != "root" ] ; then
X        echo "service changes must be run as root"
X        exit 1
X    fi
X}
X
X#
X# trivial sanity check
X#
Xfunction check_sanity {
X	if runuser [ ! -f $APPD_ROOT/db/db.cnf ] ; then
X		echo appd controller not installed in $APPD_ROOT
X		exit 1
X	fi
X	if runuser [ ! -x $APPD_ROOT/bin/controller.sh ] ; then
X		echo controller disabled on this host
X		exit 1
X	fi
X}
X
X###################### End of embedded file: lib/init.sh
X
X
X###################### Start of embedded file: lib/conf.sh
X#!/bin/bash
X#
X# $Id: lib/conf.sh 3.35 2018-07-06 22:51:53 cmayer $
X#
X# contains common code used to extract and set information in the
X# config files.
X#
X# there is some hair here having to do with permissions,
X# and we invoke runuser to do file access as the appropriate user
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X# all the configuration file names and locations
X#
X
Xif ! declare -f runuser &> /dev/null ; then
X        echo "ERROR: ${BASH_SOURCE[0]}: lib/runuser.sh not included. This is a coding error! " >&2
X        exit 1
Xfi
X
Xlockfile=/var/lock/subsys/$NAME
X
XDB_CONF=$APPD_ROOT/db/db.cnf
XAPPSERVER_DISABLE=$APPD_ROOT/HA/APPSERVER_DISABLE
XSHUTDOWN_FAILOVER=$APPD_ROOT/HA/SHUTDOWN_FAILOVER
XWATCHDOG_ENABLE=$APPD_ROOT/HA/WATCHDOG_ENABLE
XWATCHDOG_SETTINGS=$APPD_ROOT/HA/watchdog.settings
XASSASSIN_PIDFILE=$APPD_ROOT/HA/appd_assassin.pid
XWATCHDOG_PIDFILE=$APPD_ROOT/HA/appd_watchdog.pid
XWATCHDOG_STATUS=$APPD_ROOT/logs/watchdog.status
XWATCHDOG_ERROR=$APPD_ROOT/logs/watchdog.error
XDOMAIN_XML=$APPD_ROOT/appserver/glassfish/domains/domain1/config/domain.xml
XCONTROLLER_SH=$APPD_ROOT/bin/controller.sh
XMYSQLCLIENT=$APPD_ROOT/HA/mysqlclient.sh
X
X# must have accessible db.cnf
Xif ! [ -f $DB_CONF ] ; then
X	echo $DB_CONF not readable
X	exit 1
Xfi
X
X
X# requires gnu sed
Xif ! sed --version >/dev/null 2>&1 ; then
X	echo gnu sed required
X	exit 1
Xfi
X
X# the context for xml manipulation
Xxml_context="/<config name=\\\"server-config\\\">/,/<\/config>/"
X
X#
X# lose trailing and leading white space
X#
Xfunction strip_white() {
X	sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
X}
X
X#
X# get possible multiple values from named XML file and element, one per row
X# Call as:
X#  runuser get_xml_element_value $DOMAIN $property
X#
Xfunction get_xml_element_value {
X	local thisfn=${FUNCNAME[0]}
X	(( $# == 2 )) || abend "Usage: $thisfn <xml file> <node name>"
X	local xml=$1
X 	local property=$2
X
X	[[ -r $xml ]] || abend "$thisfn: unable to read $xml"
X	[[ -n $property ]] || abend "$thisfn: needs non-empty property name"
X	awk '$0 !~ /^\/ >|^ -/ {print}' < <(xmllint --shell $1 <<< "cat //$2/text()")
X}
Xexport -f get_xml_element_value
X
X#
X# count how many nodes of given name in supplied XML file
X#
X# This is helpful because no/0 elements of given name imply a insert
X# where as 1 or more, whether empty or not, imply an update
X#
Xfunction count_xml_element {
X	local thisfn=${FUNCNAME[0]}
X	(( $# == 2 )) || abend "Usage: $thisfn <xml file> <node name>"
X	local xml=$1
X 	local property=$2
X
X	[[ -r $xml ]] || abend "$thisfn: unable to read $xml"
X	[[ -n $property ]] || abend "$thisfn: needs non-empty property name"
X	awk '$0 ~ /is a number/ {print $NF}' < <(xmllint --shell $xml <<< "xpath count(//$property)")
X#	awk '	$0 ~ /^\/ > .{2} > $/ 		{print $3} 
X#		$0 ~ /^\/\/.*Node Set$/ 	{print $(NF-2)} 
X#		$0 ~ /^\/ > '$property' > $/ 	{print "1"}' < <(xmllint --shell $xml <<< "cd //$property" 2>&1)
X}
Xexport -f count_xml_element
X
X#
X# get a property from a controller_info file
X#
X# Need to differentiate between <x></x> existing but with no contained value
X# and between simple absence of <x>.*</x>
X#
Xfunction controller_info_get() {
X	local xml=$1
X	local property=$2
X
X	runuser get_xml_element_value $xml $property
X}
Xexport -f controller_info_get
X
X#
X# set a property into a controller_info file
X#
Xfunction controller_info_set() {
X	local xml=$1
X	local property=$2
X	local value=$3
X
X	if (( $(count_xml_element $xml $property) == 0 )) ; then
X		tmpfile=/tmp/cinfo_set.$$ ; rm -f $tmpfile
X		echo "<$property>$value</$property>" > $tmpfile
X		chmod 755 $tmpfile
X		runuser sed -i.$(date +%s) -e "\"/<controller-info>/r $tmpfile\"" $xml
X		rm -f $tmpfile
X	else
X		runuser sed -i.$(date +%s) -e "\"s,\(<$property>\).*\(</$property>\),\1$value\2,\"" $xml
X	fi
X}
Xexport -f controller_info_set
X
X#
X# unset a property in a controller_info file
X#
Xfunction controller_info_unset() {
X	local xml=$1
X	local property=$2
X
X	runuser sed -i.$(date +%s) -e "\"s/<$property>.*<\/$property>//\"" $xml
X}
X
X#
X# simplifies processing jvm options from domain.xml
X#
X# different types of jvm_options are settable, unsettable, and gettable
X# they are denoted by a prefix character
X# -Xmx		prefix character X
X# -XX:+foo	prefix character +|-	we can ask for either sense
X# -XX:-foo
X# -Dfoo		no prefix
X
X#
X# extract a specific jvm option value from a stream
X#
X# get_jvm_option <property>
X#
Xfunction get_jvm_option
X{
X	local property=$1
X
X	awk -F= "/^-XX:$property=/ { print \$2 }
X		/^-XX:\+$property/ { print \"+\" }
X		/^-XX:-$property/ { print \"-\" }
X		/^-D$property=/ { print \$2 }
X		/^-$property/ { sub(\"-$property\",\"\"); print }"
X}
X
X#
X# domain_get_jvm_option <property>
X#
Xfunction domain_get_jvm_option {
X	local property=$1
X	local selector
X	local xpath
X	local base
X	local stripper
X
X	case $property in
X
X	# like -Xmx34g
X	X*)
X		selector="<jvm-options>-$property"
X		stripper=(-e s/-$property//)
X		;;
X
X	# like -XX:+foo or -XX:-foo
X	+*|-*) 
X		base=${property:1}
X		stripper=(-e "s/-XX:\([+-]\)$base/\1/")
X		selector="<jvm-options>-XX:[+-]$base"
X		;;
X
X	# like -Dfoo and -Dfoo=77
X	*)
X		selector="<jvm-options>-D$property"
X		stripper=(-e s/-D$property$/true/ -e s/-D$property=//)
X		;;
X	esac
X
X	val=$(runuser cat $DOMAIN_XML | sed -e "$xml_context!d" | \
X		grep $selector | sed -e 's,</*jvm-options>,,g' ${stripper[@]} | strip_white)
X	if [ -z "$val" ] ; then
X		echo "unset"
X	else
X		echo "$val"
X	fi
X}
X
X#
X# function to unset a domain.xml property
X#
Xfunction domain_unset_jvm_option {
X	local property=$1
X	local selector
X	local base
X	local xpath
X
X	case $property in
X
X	# like -Xmx34g
X	X*)
X		selector="-$property"
X		# selector="starts-with(.,'-$property')"
X		;;
X
X	# like -XX:+foo or -XX:-foo
X	+*|-*)
X		base=${property:1}
X		# selector="string(.)='-XX:-$base' or string(.)='-XX:+$base'"
X		selector="-XX:[+-]$base"
X		;;
X
X	# like -Dfoo and -Dfoo=77
X	*)
X		# selector="starts-with(.,'-D$property=') or (string(.)='-D$property')"
X		selector="-D$property[=]*"
X		;;
X	esac
X
X	runuser sed -i.$(date +%s) -e "\"$xml_context{/$selector/d}\"" $DOMAIN_XML
X}
X
X#
X# domain_set_jvm_option <property> [<value>]
X# 
Xfunction domain_set_jvm_option {
X	local property=$1
X	local value="$2"
X	local base
X	local selector
X	local xpath
X
X	case $property in
X
X	# like -Xmx34g
X	X*)
X		valueset="-$property$value"
X		propmatch="-$property.*"
X		;;
X
X	# like -XX:+foo or -XX:-foo
X	+*|-*)
X		valueset="-XX:$property"
X		propmatch="-XX:[+-]${property:1}"
X		;;
X
X	# like -Dfoo and -Dfoo=77
X	*)
X		if [ -n "$value" ] ; then
X			value="=$value"
X		fi
X		valueset="-D$property$value"
X		propmatch="-D$property=*.*"
X		;;
X	esac
X
X	setter="/<\/java-config>/s,</java-config>,<jvm-options>$valueset</jvm-options>\n&,"
X	changer="s,\(<jvm-options>\)$propmatch\(</jvm-options>\),\1$valueset\2,"
X
X	if [ "$(domain_get_jvm_option $property)" != "unset" ] ; then
X		setter="$changer"
X	fi
X	sed -i.$(date +%s) -e "$xml_context{$setter}" $DOMAIN_XML
X}
X
X# set a property into the db.cnf file
X# if the property is already there, edit it, else append it
X# if remotehost clear, do it locally
Xfunction dbcnf_set {
X	local property=$1
X	local value="$2"
X	local remotehost=$3
X	local IN=/tmp/db.cnf.in.$$
X	local OUT=/tmp/db.cnf.out.$$
X	
X	rm -f $IN $OUT
X
X	if [ -z "$remotehost" ] ; then
X		DBCNF=$DB_CONF
X		CP="cp"
X	else
X		DBCNF=$remotehost:$DB_CONF
X		CP="$SCP -q"
X	fi
X	runuser $CP $DBCNF $IN
X	cp $IN $OUT
X
X	# patch odd failure case when file does not end with newline
X	# (idea from http://backreference.org/2010/05/23/sanitizing-files-with-no-trailing-newline/)
X	tail -c1 $OUT | read -r _ || echo >> $OUT
X
X	if grep -q "^[[:space:]]*$property\(=\|$\)" $IN ; then
X		if ! [ -z "$value" ] ; then
X			sed -i.$(date +%s) "s,\(^[[:space:]]*$property=\).*$,\1$value," $OUT >/dev/null
X		fi
X	else
X		if [ -z "$value" ] ; then
X			echo "$property" >> $OUT
X		else
X			echo "$property=$value" >> $OUT
X		fi
X	fi
X
X	if ! cmp -s $IN $OUT ; then
X		runuser $CP $OUT $DBCNF
X	fi
X	rm -f $IN $OUT
X}
X
X#
X# remove a property setting from the db.cnf file
X#
Xfunction dbcnf_unset {
X	local property=$1
X	local remotehost=$2
X	local IN=/tmp/db.cnf.in.$$
X	local OUT=/tmp/db.cnf.out.$$
X
X	rm -f $IN $OUT
X
X	if [ -z "$remotehost" ] ; then
X		DBCNF=$DB_CONF
X		CP=cp
X	else
X		DBCNF=$remotehost:$DB_CONF
X		CP="$SCP -q"
X	fi
X	runuser $CP $DBCNF $IN
X	cp $IN $OUT
X
X	sed -i.$(date +%s) "/^[[:space:]]*$property\b/d" $OUT >/dev/null
X
X	if ! cmp -s $IN $OUT ; then
X		$CP $OUT $DBCNF
X	fi
X	rm -f $IN $OUT
X}
X
X#
X# read the db.cnf file and extract an attribute
X#
Xfunction dbcnf_get {
X	local property=$1
X
X	val=`runuser grep "\"^[[:space:]]*$property=\"" $DB_CONF | awk -F= '{print $2}'`
X	if [ -n "$val" ] ; then
X		echo $val
X	else
X		echo unset
X	fi
X}
X
X#
X# look in the domain.xml to see if any privileged ports are in use
X# return success if they are
X#
Xfunction use_privileged_ports {
X	runuser xmllint --xpath "\"//*[@port<1024]\"" $DOMAIN_XML 2>/dev/null | grep -q -s port
X}
X
X#
X# scale a size by a suffix [KkMmGg] if present
X# also, add some fluff if specified
X#
X# input on stdin
Xfunction scale {
X	local fluff=1
X	if [ $# = 1 ] ; then fluff=$1 ; fi
X
X	awk "{
X		if(sub(/[Kk]/,\"\",\$1) == 1){
X			BYTES=\$1*1024
X		}
X		else if(sub(/[Mm]/,\"\",\$1)==1){
X			BYTES=\$1*1048576
X		}
X		else if(sub(/[Gg]/,\"\",\$1)==1){
X			BYTES=\$1*1073741824
X		} else {
X			gsub(/[^0-9]/,\"\",\$1)
X			BYTES=\$1
X		}
X		printf(\"%.0f\n\", BYTES * $fluff)
X		exit;
X	}"
X}
X
X#
X# read some things from the db.cnf
X#
XDB_PID_FILE=`dbcnf_get pid-file`
XDB_DATA_DIR=`dbcnf_get datadir`
XFILE_RUNUSER=$(dbcnf_get user)
X
X#
X# a trivial sanity check - if runuser is defined, it better be what is in
X# the database config file
X#
Xif [ -n "$RUNUSER" ] ; then
X	if [ $FILE_RUNUSER != $RUNUSER ] ; then
X		echo "runuser inconsistent: sysconfig: $RUNUSER db.cnf: $FILE_RUNUSER"
X	fi
Xfi
XRUNUSER=$FILE_RUNUSER
X
X#
X# given a name and url, crack the url and set the 3 variables:
X# $name_host, $name_port, $name_protocol
X#
Xfunction parse_vip()
X{
X        local vip_name=$1
X        local vip_def=$2
X
X        [[ -z "$vip_def" ]] && return
X
X        echo $vip_def | awk -F: -v vip_name=$vip_name '
X                BEGIN {
X                        host="";
X                        protocol="http";
X                        port="8090";
X                }
X                /http[s]*:/ {protocol=$1; host=$2; port=$3;next}
X                /:/ {host=$1; port=$2;next}
X                {host=$1}
X                END {
X                        if (port == "") {
X                                port = (protocol=="https")?443:8090;
X                        }
X                        gsub("^//","",host);
X                        gsub("/.*$","",host);   # drop any trailing /controller
X                        gsub("[^0-9]*$","",port);
X                        printf("%s_host=%s\n", vip_name, host);
X                        printf("%s_port=%s\n", vip_name, port);
X                        printf("%s_protocol=%s\n", vip_name, protocol);
X                }
X        '
X}
X###################### End of embedded file: lib/conf.sh
X
X
X###################### Start of embedded file: lib/status.sh
X#!/bin/bash
X#
X# $Id: status.sh 3.30 2018-05-01 12:39:50 cmayer $
X#
X# common code to interrogate the status of various functions
X#
X# can be included by init or other scripts
X# Copyright 2016 AppDynamics, Inc
X#
X#	Licensed under the Apache License, Version 2.0 (the "License");
X#	you may not use this file except in compliance with the License.
X#	You may obtain a copy of the License at
X#
X#		http://www.apache.org/licenses/LICENSE-2.0
X#
X#	Unless required by applicable law or agreed to in writing, software
X#	distributed under the License is distributed on an "AS IS" BASIS,
X#	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#	See the License for the specific language governing permissions and
X#	limitations under the License.
X#
X
Xfunction watchdog_running {
X	if runuser [ -f "$WATCHDOG_PIDFILE" ] ; then
X		watchdog_pid=`runuser cat $WATCHDOG_PIDFILE`
X		if [ ! -z "$watchdog_pid" ] ; then
X			if [ -d /proc/$watchdog_pid ] ; then
X				return 0
X			fi
X		fi
X	fi
X	rm -f $WATCHDOG_PIDFILE
X	return 1
X}
X
Xfunction assassin_running {
X	if runuser [ -f "$ASSASSIN_PIDFILE" ] ; then
X		assassin_pid=`runuser cat $ASSASSIN_PIDFILE`
X		if [ ! -z "$assassin_pid" ] ; then
X			if [ -d /proc/$assassin_pid ] ; then
X				return 0
X			fi
X		fi
X	fi
X	rm -f $ASSASSIN_PIDFILE
X	return 1
X}
X
Xfunction replication_disabled {
X	if [ $(dbcnf_get skip-slave-start) = true ] ; then
X		return 0
X	else
X		return 1
X	fi
X}
X
Xfunction db_running {
X    if [ "$DB_PID_FILE" = "unset" ] ; then
X        DB_PID_FILE="$DB_DATA_DIR/$(hostname).pid"
X    fi
X    if runuser [ -f $DB_PID_FILE ] ; then
X        DB_PID=`runuser cat $DB_PID_FILE 2>/dev/null`
X    fi
X    if [ -z "$DB_PID" ] ; then
X        return 1
X    fi   
X    if [ -d /proc/$DB_PID ] ; then
X        return 0;
X    fi 
X    return 1
X}
X
Xfunction get {
X	local key=$1
X	awk "/$key:/ {print \$2}"
X}
X
Xfunction controller_mode {
X	echo "select value from global_configuration_local \
X		where name='appserver.mode'" | run_mysql | get value
X}
X
Xfunction controllerrunning {
X	if pgrep -f -u $RUNUSER "java -jar ./../modules/admin-cli.jar" >/dev/null ; then
X		return 1
X	fi
X	if runuser "$APPD_ROOT/appserver/glassfish/bin/asadmin" list-domains | \
X		grep -q "domain1 running" ; then
X		return 0
X	fi
X	if pgrep -f -u $RUNUSER "$APPD_ROOT/appserver/glassfish/domains/domain1" >/dev/null ; then
X		return 2
X	fi
X	return 3
X}
X
Xfunction events_running {
X	if ps -f -u $RUNUSER | grep "java" | grep "$APPD_ROOT/events_service" >/dev/null ; then
X		return 0
X	fi
X	return 1
X}
X
Xfunction reporting_running {
X	if pgrep -f -u $RUNUSER "$APPD_ROOT/reporting_service/nodejs/bin/node" >/dev/null ; then
X		return 0
X	fi
X	return 1
X}
X
Xfunction machine_agent_running {
X	if pgrep -f -u $RUNUSER machineagent.jar > /dev/null; then
X		return 0
X	else
X		return 1
X	fi
X}
X
X#
X# find java
X#
Xfunction find_java {
X    if [ -f $APPD_ROOT/appserver/glassfish/config/asenv.conf ] ; then
X        AS_JAVA=$(grep ^AS_JAVA= $APPD_ROOT/appserver/glassfish/config/asenv.conf |
X        awk -F= '{print $2}' | sed -e 's/^"//' -e 's/"$//')
X    fi
X    unset JAVA
X    for java in $AS_JAVA $APPD_ROOT/jre ; do
X        if [ -x $java/bin/java ] ; then
X            export JAVA=$java/bin/java
X            break;
X        fi
X    done
X    if [ -z "$JAVA" ] ; then
X        return 1
X    fi
X    echo $JAVA
X    return 0
X}
X
X###################### End of embedded file: lib/status.sh
X
X
Xcheck_sanity
X
Xif runuser [ ! -f $APPD_ROOT/db/db.cnf ] ; then
X	echo appd controller not installed in $APPD_ROOT
X	exit 1
Xfi
X
X#
X# if the numa settings file exists, then disable transparent huge pages
X#
Xfunction do_numa_settings {
X	if [ ! -f $APPD_ROOT/HA/numa.settings ] ; then
X		return
X	fi
X
X	for dir in /sys/kernel/mm/transparent_hugepage \
X		/sys/kernel/mm/redhat_transparent_hugepage ; do
X		if [ -f $dir/enabled ] ; then
X			echo "never" > $dir/enabled
X		fi
X		if [ -f $dir/defrag ] ; then
X			echo "never" > $dir/defrag
X		fi
X	done
X}
X
X#
X# Create (touch) a file called LARGE_PAGES_ENABLE in $APPD_ROOT/HA
X# to enable explicit huge pages support for mysqld and java.
X#
X# If other programs on this system are also using huge pages,
X# Please add the appdynamics runtime user to the group specified by
X# /proc/sys/vm/hugetlb_shm_group
X#
X# If AppDynamics is the only application on this host using huge pages,
X# /proc/sys/vm/hugetlb_shm_group will be updated automatically.
X# See https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt
X# for more information.
X#
XENABLE_HUGE_PAGES="false"
XHUGE_PAGE_SIZE_BYTES=`awk '/Hugepagesize:/{print $2*1024}' /proc/meminfo`
X
Xif [ -f $APPD_ROOT/HA/LARGE_PAGES_ENABLE -a -n "$HUGE_PAGE_SIZE_BYTES" ] ; then
X	ENABLE_HUGE_PAGES="true"
Xfi
X
Xlockfile=/var/lock/subsys/$NAME
X[ -d /var/lock/subsys ] || mkdir /var/lock/subsys
X
X#
X# set appropriate limits for the appd user
X#
Xfunction set_limits {
X
X	FD_LIMIT=`dbcnf_get open_files_limit`
X	if [ "$FD_LIMIT" -lt 65536 ]; then
X		FD_LIMIT=65536
X	fi
X
X	if [ "$RUNUSER" == "root" ] ; then
X		if [ `ulimit -S -n` -lt $FD_LIMIT ] ; then
X			ulimit -n $FD_LIMIT
X		fi
X		if $ENABLE_HUGE_PAGES ; then
X			ulimit -l unlimited
X		fi
X		return
X	fi
X
X	if [ `runuser ulimit -S -n` -lt "$FD_LIMIT" ] ; then
X		echo "$RUNUSER  soft  nofile $FD_LIMIT" > $LIMITS
X		echo "$RUNUSER  hard  nofile $FD_LIMIT" >> $LIMITS
X	fi
X
X	if $ENABLE_HUGE_PAGES && [ `runuser ulimit -l` != "unlimited" ] ; then
X		echo "$RUNUSER  soft  memlock  unlimited" >> $LIMITS
X		echo "$RUNUSER  hard  memlock  unlimited" >> $LIMITS
X	fi
X
X	for pam in /etc/pam.d/common-session /etc/pam.d/system-auth ; do
X		if [ ! -f $pam ] ; then 
X			continue
X		fi
X		if ! grep -Eq "^\s*session\s+required\s+pam_limits\.so" $pam ; then
X			echo "session required	pam_limits.so" >> $pam
X			break
X		fi
X	done
X}
X
X#
X# if the lockfile is older than uptime, we crashed
X#
Xfunction host_crash {
X	local lockfile_age=$(($(date +%s)-$(ls -l --time-style=+%s $lockfile | cut -d \  -f 6)))
X	local uptime=$(printf '%.0f\n' $(cat /proc/uptime | cut -d \  -f 1))
X	[ "$lockfile_age" -gt "$uptime" ]
X}
X
X#
X# calculate a bunch of memory footprints and set global variables accordingly
X# 
Xfunction calculate_memory {
X	# multiply by 1.05 and round to account for extra 2% headroom
X	CONTROLLER_HEAP=`domain_get_jvm_option Xmx | scale 1.04`
X		
X	# Parse controller JVM OPTIONS to get MaxPermSize
X	CONTROLLER_MAXPERMSIZE=`domain_get_jvm_option MaxPermSize | scale`
X
X	# multiplying by 1.1 and rounding in awk to account for the extra
X	# memory MySQL allocates arround the InnoDB buffer pool.
X	INNODB_BUFFER_POOL=`dbcnf_get innodb_buffer_pool_size | scale 1.1`
X	INNODB_ADDITIONAL_MEM=`dbcnf_get innodb_additional_mem_pool_size | scale`
X	
X	# multiply by 1.05 and round to account for extra 2% headroom
X	EVENTS_HEAP=`runuser cat $APPD_ROOT/bin/controller.sh | \
X		awk -F= '/^\s*EVENTS_HEAP_SETTINGS=/ { print \$2 }' | \
X		sed -e 's/ /\n/g' | get_jvm_option Xmx | scale 1.05`
X	
X	if [ -z "$EVENTS_HEAP" -a -f $EVENTS_VMOPTIONS_FILE ] ; then
X		EVENTS_HEAP=`runuser cat $EVENTS_VMOPTIONS_FILE \
X			| get_jvm_option Xmx | scale 1.05`
X	fi
X	if [ -z "$EVENTS_HEAP" ] ; then
X		EVENTS_HEAP=0
X	fi
X		
X	# Parse events service JVM options for MaxPermSize.  
X	# Default to 64M if not set
X	if [ -f $EVENTS_VMOPTIONS_FILE ] ; then
X		EVENTS_MAXPERMSIZE=`runuser cat $EVENTS_VMOPTIONS_FILE | \
X			get_jvm_option MaxPermSize | scale 1.05`
X	fi
X	
X	if [ -z "$EVENTS_MAXPERMSIZE" ] || [ "$EVENTS_MAXPERMSIZE" -lt 1 ] ; then
X		# Java permsize defaults to 64MiB
X		EVENTS_MAXPERMSIZE=67108864
X	fi
X	
X	(( APPD_TOTAL_RESERVED_BYTES = \
X		CONTROLLER_HEAP + \
X		CONTROLLER_MAXPERMSIZE + \
X		INNODB_BUFFER_POOL + \
X		INNODB_ADDITIONAL_MEM + \
X		EVENTS_HEAP + \
X		EVENTS_MAXPERMSIZE ))
X	
X	(( APPD_HUGE_PAGES = APPD_TOTAL_RESERVED_BYTES / HUGE_PAGE_SIZE_BYTES ))
X	# Round up
X	if [ $(( APPD_TOTAL_RESERVED_BYTES % HUGE_PAGE_SIZE_BYTES )) -gt 0 ] ; then
X		(( APPD_HUGE_PAGES++ ))
X	fi
X	
X	PAGE_SIZE_BYTES=`getconf PAGE_SIZE`
X
X	#
X	# If zfs is running on this host
X	# Carve room for controller heap, innodb_buffer_pool_size and
X	# innodb_additional_mem_pool_size.  Leave 20% system RAM uncommitted.
X	#
X	TOTAL_RESERVABLE_MEM=`free -b | awk '/Mem:/ { printf("%.0f\n", $2 * 0.8)}'`
X
X	(( REQ_ZFS_ARC_MAX = TOTAL_RESERVABLE_MEM - APPD_TOTAL_RESERVED_BYTES ))
X}
X
X#
X# change a memory allocation
X#
Xfunction increment {
X	local resourcefile=$1
X	local amount=$2
X	echo `cat $resourcefile` + $APPD_HUGE_PAGES | bc > $resourcefile
X}
X
X#
X# Explicitly reserve memory for major controller components
X#
Xfunction reserve_memory {
X	echo 1 > /proc/sys/vm/swappiness
X	
X	calculate_memory
X
X	# warn if heap plus innodb_buffer_pool_size is greater than available RAM
X	if [ "$REQ_ZFS_ARC_MAX" -lt "0" ] ; then
X		echo "$NAME: Warning!  controller memory $APPD_TOTAL_RESERVED_BYTES \
X			exceeds available memory $TOTAL_RESERVABLE_MEM"
X	else
X		if zpool list >/dev/null 2>&1 ; then 
X			ZFS_ARC_MAX=`cat /sys/module/zfs/parameters/zfs_arc_max`
X			if [ "$ZFS_ARC_MAX" -eq "0" -o "$ZFS_ARC_MAX" -gt "$REQ_ZFS_ARC_MAX" ] ; then
X				echo $REQ_ZFS_ARC_MAX > /sys/module/zfs/parameters/zfs_arc_max
X			fi
X		fi
X	fi
X	
X	#
X	# unconditionally disable controller MySQL and Java huge page support
X	# we re-enable it below.   much cleaner code
X	#
X	dbcnf_unset large-pages
X	domain_unset_jvm_option +UseLargePages
X	domain_unset_jvm_option LargePageSizeInBytes
X
X	# remove events service large pages config from controller.sh
X	if [ -f $EVENTS_VMOPTIONS_FILE ] ; then
X		runuser sed -i -e '/+UseLargePages/d' -e '/LargePageSizeInBytes/d' $EVENTS_VMOPTIONS_FILE
X	fi
X
X	#
X	# If huge pages are supported and enabled,
X	# Explicitly allocate and enable huge pages 
X	# for the controller's java and mysql processes
X	#
X	if ! $ENABLE_HUGE_PAGES ; then
X		return
X	fi
X	
X	increment /proc/sys/vm/nr_hugepages $APPD_HUGE_PAGES
X
X	# Allow the AppDynamics user to access the huge pages we're allocating.
X	if ! id -G $RUNUSER | grep -wq /proc/sys/vm/hugetlb_shm_group ; then
X		echo $(id -g $RUNUSER) > /proc/sys/vm/hugetlb_shm_group
X	fi
X		
X	# this code will break if we try to allocate 2 ^ 64 memory. let it.
X	(( APPD_SHMMAX = APPD_HUGE_PAGES * HUGE_PAGE_SIZE_BYTES))
X
X	increment /proc/sys/kernel/shmmax $APPD_SHMMAX
X	increment /proc/sys/kernel/shmall $APPD_SHMMAX
X
X	dbcnf_set large_pages ""
X		
X	domain_set_jvm_option +UseLargePages
X	domain_set_jvm_option LargePageSizeInBytes $HUGE_PAGE_SIZE_BYTES
X		
X	if [ -f $EVENTS_VMOPTIONS_FILE ] ; then
X		runuser ex -s $EVENTS_VMOPTIONS_FILE <<- EVENTS_LARGE_PAGES
X			a
X			-XX:+UseLargePages 
X			-XX:LargePageSizeInBytes=$HUGE_PAGE_SIZE_BYTES
X			.
X			wq
X		EVENTS_LARGE_PAGES
X	fi
X}
X
Xfunction unreserve_memory {
X	if ! $ENABLE_HUGE_PAGES ; then
X		return
X	fi
X	calculate_memory
X	increment /proc/sys/vm/nr_hugepages -$APPD_HUGE_PAGES
X	increment /proc/sys/kernel/shmmax -$APPD_SHMMAX
X	increment /proc/sys/kernel/shmall -$APPD_SHMMAX
X}
X
Xcase "$1" in  
Xstart)  
X	require_root
X
X	do_numa_settings
X	set_limits
X
X	#
X	# we only run reserve_memory
X	# if no lockfile or stale lockfile precedes last startup (crash?)
X	# we do not reserve memory if
X	# a) mysql crashed or shut down outside of init: 
X	# b) stale lockfile that is younger than last boot
X	# c) mysql already running
X	#
X	if ! db_running ; then
X		if ! [ -f $lockfile ] || host_crash ; then
X			reserve_memory
X		fi
X		runuser $CONTROLLER_SH start-db
X	fi
X	rm -f $lockfile	
X	touch $lockfile	
X;;  
X  
Xstop)
X	require_root
X	service appdcontroller stop
X	# The default controller shutdown timeout is 45 minutes 
X	# That is a long time to be stuck with a hung appserver on the way down.
X	# Thankfully, we can set an environment variable to override that:
X	export AD_SHUTDOWN_TIMEOUT_IN_MIN=10
X	# call separately because if _stopControllerAppServer can "exit 1"
X	# which will leave the database still running
X	runuser $CONTROLLER_SH stop-db
X	unreserve_memory
X	rm -f $lockfile
X;;  
X
Xrestart)  
X	$0 stop  
X	$0 start  
X;;  
X  
Xstatus)  
X	if db_running ; then
Xcontrollerversion=`echo "select value from global_configuration_cluster where name='schema.version'" | run_mysql | get value`
X	if [ ! -z "$controllerversion" ] ; then
X		echo version: $controllerversion
X	fi
X		echo -n "db running as $RUNUSER - "
X		if [ "`controller_mode`" == "active" ] ; then
X			echo "active"
X		else
X			echo "passive"
X			if replication_disabled ; then
X				echo replication disabled
X			fi
X		fi
X		case `echo "select value from global_configuration_local where name='ha.controller.type'" | run_mysql | get value` in
X		primary) 
X			echo primary
X			;;
X		secondary)
X			echo secondary
X			;;
X		notapplicable)
X			echo HA not installed
X			;;
X		*)
X			echo unknown HA type
X			;;
X		esac
X		
X		echo "SHOW SLAVE STATUS" | \
X			( run_mysql ) | awk \
X			'/Slave_IO_State/ {print}
X			/Seconds_Behind_Master/ {print} 
X			/Master_Server_Id/ {print}
X			/Master_Host/ {print}'
X		echo "SHOW SLAVE STATUS" | ( run_mysql ) | awk '
X			/Master_SSL_Allowed/ { if ($2 == "Yes") {print "Using SSL Replication" }}'
X	else
X		echo "db not running"
X	fi
X	if replication_disabled ; then
X		echo "replication persistently broken"
X	fi
X;;
X
X*)  
X        echo "Usage: $0 {start|stop|restart|status}"  
X        exit 1  
Xesac
Xexit 0 
END-of-appdcontroller-db.sh
echo x - appdynamics-machine-agent.sysconfig.template
sed 's/^X//' >appdynamics-machine-agent.sysconfig.template << 'END-of-appdynamics-machine-agent.sysconfig.template'
X#
X# $Id: appdynamics-machine-agent.sysconfig.template 3.4 2016-09-20 23:31:12 cmayer $
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
XAPPD_ROOT=/opt/AppDynamics/Controller
XMACHINE_AGENT_HOME=/opt/appdynamics/machine-agent
XRUNUSER=root
XJAVA_OPTS="-Xmx512m -Xms512m -Dappdynamics.agent.nodeName=`hostname` -Dappdynamics.agent.maxMetrics=500"
END-of-appdynamics-machine-agent.sysconfig.template
echo x - appdcontroller.sysconfig.template
sed 's/^X//' >appdcontroller.sysconfig.template << 'END-of-appdcontroller.sysconfig.template'
X#
X# $Id: appdcontroller.sysconfig.template 3.4 2016-09-20 23:31:12 cmayer $
X# 
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# system config settings for appdynamics appserver
X# the source file for this is installed in HA/appdcontroller.sysconfig
X#
X# this file is automatically installed by install-init.sh and uninstalled 
X# by uninstall-init.sh
X#
X# the install-init.sh script edits these settings to reflect reality
X#
XAPPD_ROOT=/opt/AppDynamics/Controller
XRUNUSER=root
END-of-appdcontroller.sysconfig.template
echo x - appdcontroller-db.sysconfig.template
sed 's/^X//' >appdcontroller-db.sysconfig.template << 'END-of-appdcontroller-db.sysconfig.template'
X#
X# $Id: appdcontroller-db.sysconfig.template 3.4 2016-09-20 23:31:12 cmayer $
X# 
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# system config settings for appdynamics database
X# the source file for this is installed in HA/appdcontroller-db.sysconfig
X#
X# this file is automatically installed by install-init.sh 
X# and uninstalled by uninstall-init.sh
X#
X# the install-init.sh script edits these settings to reflect reality
X#
XAPPD_ROOT=/opt/AppDynamics/Controller
XRUNUSER=root
END-of-appdcontroller-db.sysconfig.template
echo x - numa.settings.template
sed 's/^X//' >numa.settings.template << 'END-of-numa.settings.template'
X#
X# this file contains the NUMA node assignments for the java processes and mysqld
X# $Id: numa.settings.template 3.11 2017-03-03 01:37:53 cmayer $
X#
X# copy this file to numa.settings if on a numa machine and we want to statically
X# bind java and mysql to different nodes
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
XNUMA_MYSQL_NODES=1
XNUMA_JAVA_NODES=0
X
XNUMA_MYSQL="numactl --cpunodebind=$NUMA_MYSQL_NODES --membind=$NUMA_MYSQL_NODES"
XNUMA_JAVA="numactl --cpunodebind=$NUMA_JAVA_NODES --membind=$NUMA_JAVA_NODES"
END-of-numa.settings.template
echo x - numa-patch-controller.sh
sed 's/^X//' >numa-patch-controller.sh << 'END-of-numa-patch-controller.sh'
X#!/bin/bash
X#
X# $Id: numa-patch-controller.sh 3.34 2018-06-01 15:50:06 cmayer $
X#
X# patch the controller.sh script to enable numa support
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xcd $(dirname $0)
X
XCONTR_SH=../bin/controller.sh
XCONTR_TMP=../bin/controller.sh.patch_tmp
XCONTR_SAVE=../bin/controller.sh.pre-numa
X
Xerr=0
X
X# first, make a copy
Xcp $CONTR_SH $CONTR_TMP
X
X#
X# check if controller.sh has inclusion of NUMA settings
X#
Xif ! grep -q "HA/numa.settings" $CONTR_TMP ; then
X	ex -s $CONTR_TMP <<- ADDINCLUDE
X/^INSTALL_DIR/
Xa
X
X#### added by numa-patch-controller.sh ###
XNUMA_MYSQL=
XNUMA_JAVA=
Xif [ -f \$INSTALL_DIR/HA/numa.settings ] ; then
X	. \$INSTALL_DIR/HA/numa.settings
Xfi
X#### end addition ####
X
X.
Xw
Xq
XADDINCLUDE
Xerr=$?
Xfi
X
X#
X# check if controller.sh has mysqld_safe numa-ized
X#
Xwhile grep -q "^[[:space:]]*bin/mysqld_safe" $CONTR_TMP;  do
X	ex -s $CONTR_TMP <<- ADDMYSQL
X	/^[[:space:]]*bin\/mysqld_safe
X	i
X	#### edited by numa-patch-controller.sh ####
X	.
X	+
X	s,\(^[[:space:]]*\)\(bin/mysqld_safe\),\1\$NUMA_MYSQL \2,
X	a
X	#### end edit ####
X	.
X	w
X	q
XADDMYSQL
X	err=$?
Xdone
X
X#
X# check if controller.sh has start-domain numa-ized
X#
Xif grep "start-domain" $CONTR_TMP | grep -qv NUMA_JAVA ; then
X	ex -s $CONTR_TMP <<- ADDSTARTDOMAIN
X	/start-domain/
X	i
X	#### edited by numa-patch-controller.sh ####
X	.
X	+
X	s,./asadmin start-domain,\$NUMA_JAVA ./asadmin start-domain,
X	a
X	#### end edit ####
X	.
X	w
X	q
XADDSTARTDOMAIN
X	err=$?
Xfi
X
X#
X# check if controller.sh has reporting service numa-ized
X#
Xif grep "reports-service.sh start" $CONTR_TMP | grep -qv NUMA_JAVA ; then
X	ex -s $CONTR_TMP <<- ADDSTARTREPT
X	/reports-service.sh start/
X	i
X	#### edited by numa-patch-controller.sh ####
X	.
X	+
X	s,^,\$NUMA_JAVA,
X	a
X	#### end edit ####
X	.
X	w
X	q
XADDSTARTREPT
X	err=$?
Xfi
X
X#
X# check if controller.sh has events service numa-ized
X#
Xif grep "events-service.sh start" $CONTR_TMP | grep -qv NUMA_JAVA ; then
X	ex -s $CONTR_TMP <<- ADDSTARTEVT
X	/events-service.sh start/
X	i
X	#### edited by numa-patch-controller.sh ####
X	.
X	+
X	s,nohup,nohup \$NUMA_JAVA,
X	a
X	#### end edit ####
X	.
X	w
X	q
XADDSTARTEVT
X	err=$?
Xfi
X
Xif cmp -s $CONTR_SH $CONTR_TMP ; then
X	echo controller.sh already patched
X	rm $CONTR_TMP
Xelse
X	echo controller.sh patched for numa
X	mv $CONTR_SH $CONTR_SAVE
X	mv $CONTR_TMP $CONTR_SH
Xfi
END-of-numa-patch-controller.sh
echo x - userid-patch-controller.sh
sed 's/^X//' >userid-patch-controller.sh << 'END-of-userid-patch-controller.sh'
X#!/bin/bash
X#
X# $Id: userid-patch-controller.sh 3.1 2017-10-21 17:04:25 rob.navarro $
X#
X# patch the controller.sh script to:
X#   1. reduce failures around unexpected/root file ownership
X#
X# Copyright 2017 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xcd $(dirname $0)
X
XCONTR_SH=../bin/controller.sh
XCONTR_TMP=../bin/controller.sh.userid-patch-tmp
XCONTR_SAVE=../bin/controller.sh.pre-userid-patch
X
X###########################################################
X# Main body
X###########################################################
X
X# first, make a copy
Xcp $CONTR_SH $CONTR_TMP
X
X#
X# check if controller.sh already includes userID patches
X#
Xif ! grep -q "added by userid-patch-controller.sh" $CONTR_TMP ; then
X	ex -s $CONTR_TMP <<- 'ENDOFTEXT'
X/^#######################/
Xa
X
X#### added by userid-patch-controller.sh ####
X
X###################### Start of embedded file: check_for_root_files.sh
X#!/bin/bash
X#
X# $Id: check_for_root_files.sh 3.1 2017-10-21 17:04:25 rob.navarro $
X#
X# Functions used to patch controller.sh by userid-patch-controller.sh
X#
X# starting Glassfish as root when it was previously installed and operated as a non-root
X# user is a common reason for subsequent Glassfish startups to fail with almost no traceable
X# logs. The later non-root startup fails to be able to write to now root-owned files.
X# It is currently seen as unacceptable to prevent Glassfish startup as root when not 
X# usually started as root and so we take the gentler approach of warning and providing 
X# clean up instructions
X#
X# Copyright 2017 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X
X# assume intended effective user name is that which was set during installation and
X# saved away within the ${INSTALL_DIR}/db/db.cnf file under the "user" option
XINSTALL_USER=$(awk -F= '$1 ~ /^\s*user/ {print $2}' ${INSTALL_DIR}/db/db.cnf)
Xif [ -z "${INSTALL_USER}" ] ; then  
X   INSTALL_USER=UNKNOWN_APPD_USER
Xfi
X
X# group id of ${INSTALL_DIR}/appserver directory never seems to be wrongly set inadvertently, 
X# assume it is now as it was at install time
XINSTALL_GROUP=$(ls -dg ${INSTALL_DIR}/appserver | awk '{print $3}')
Xif [ -z "${INSTALL_GROUP}" ] ; then
X   INSTALL_GROUP=UNKNOWN_APPD_GROUP
Xfi
X
XuserIdCleanupSteps ()
X{
X   echo "To repair an installation with inconsistent file permissions:
X1. become root user
X2. cd ${INSTALL_DIR}
X3. stop all AppDynamics processes # e.g. bin/controller.sh stop
X4. chown -R ${INSTALL_USER}:${INSTALL_GROUP} ${INSTALL_DIR:-<APPD_INSTALL_DIR>} ${MYSQL_DATADIR:-<MYSQL_DATADIR>}
X5. exit root user and become user \"${INSTALL_USER}\"
X6. start all AppDynamics processes as usual # e.g. bin/controller.sh start"
X}
X
X# Only a problem if Controller is started with a different effective user ID than when installed.
X# Three different failing possibilities:
X# 1. installed as root and now started as non-root - will fail
X# 2. installed as non-root and now started as different non-root - will fail
X# 3. installed as non-root and now started as root - will fail in future when started as non-root
XwarnIfDifferentEUID ()
X{
X   local CMD
X   if [ `id -u -n` != "${INSTALL_USER}" ] ; then
X      CMD="Your AppDynamics Controller was installed to use Linux user \"${INSTALL_USER}\" however you are now starting it with user \"$(id -u -n)\"."
X      if [ "${INSTALL_USER}" = "root" ] || [ `id -u -n` != "root" ] ; then
X         CMD="${CMD} The Controller will likely fail to start successfully."
X      else
X         CMD="${CMD} This will cause future Controller startups as user \"${INSTALL_USER}\" to fail. $(userIdCleanupSteps)"
X      fi
X      printf "\n${CMD}\n" >&2
X      logger -p user.err -t "AppDynamics:$(basename $0):ERROR" <<< "$CMD"
X   fi
X}
X
X# in case file permissions were wrongly set before a controller upgrade or by external action
X# check some important directories for incorrect file ownership and report to user & syslog
XwarnIfBadFileOwnership ()
X{
X   # limit checked files to avoid false positives i.e. useless warnings
X   local tosearch="logs/server.log logs/startAS.log appserver/glassfish/domains/domain1"
X   local files=$(cd ${INSTALL_DIR}; find $tosearch -not -user ${INSTALL_USER})
X   
X   if [ -n "$files" ] ; then
X      local not_writable=$(cd ${INSTALL_DIR}; find $tosearch -not -user ${INSTALL_USER} -not -writable)
X      local certainty="may in future"
X
X      # if any of those Glassfish files are not writable
X      if [ `id -u -n` != "${INSTALL_USER}" ] && [ -n "$not_writable" ] ; then
X         certainty=will
X      fi
X
X      local MSG="The following $(wc -l <<< "$files") file(s) are not owned by the Linux \"${INSTALL_USER}\" user and $certainty prevent successful Controller startup.
X      $files
X
X      $(userIdCleanupSteps)"
X      printf "\n${MSG}\n" >&2
X      logger -p user.warning -t "AppDynamics:$(basename $0):WARNING" <<< "$MSG"
X   fi
X}
X
X# if current user unable to stop Glassfish then report that
XcheckIfWrongUser ()
X{
X   local gf_pid=$(pgrep -f "s/glassfish.jar ")
X   [[ -z "$gf_pid" ]] && return			# skip test if no Glassfish running
X   local gf_user=$(ps -o user= -p $gf_pid)
X
X   # if can send signal 0 then allowed to send real signal
X   if ! kill -s 0 -- $gf_pid &> /dev/null ; then
X      local MSG="***** the running Controller application server must be shutdown as user \"${gf_user}\" *****";
X
X      printf "\n${MSG}\n" >&2
X      logger -p user.err -t "AppDynamics:$(basename $0):ERROR" <<< "$MSG"
X      return 1
X   fi
X}
X
X############
X#_stopControllerAppServer ()
X#{
X## stop early if insufficient permissions to stop Glassfish
X#checkIfWrongUser || exit 1
X#
X#
X#_startControllerAppServer ()
X#{
X#warnIfBadFileOwnership
X#warnIfDifferentEUID
X#
X############
X###################### End of embedded file: check_for_root_files.sh
X
X#### end addition ####
X
X.
X/^_stopControllerAppServer/
X+
Xa
X#### edited by userid-patch-controller.sh ####
X# stop early if insufficient permissions to stop Glassfish
XcheckIfWrongUser || exit 1
X#### end edit ####
X
X.
X/^_startControllerAppServer/
X+
Xa
X#### edited by userid-patch-controller.sh ####
XwarnIfBadFileOwnership
XwarnIfDifferentEUID
X#### end edit ####
X
X.
Xw
Xq
XENDOFTEXT
Xerr=$?
Xfi
X
X
Xif cmp -s $CONTR_SH $CONTR_TMP ; then
X	echo controller.sh already patched for userid issues
X	rm $CONTR_TMP
Xelse
X	echo controller.sh patched for userid issues
X	mv $CONTR_SH $CONTR_SAVE
X	mv $CONTR_TMP $CONTR_SH
Xfi
END-of-userid-patch-controller.sh
echo x - check_for_root_files.sh
sed 's/^X//' >check_for_root_files.sh << 'END-of-check_for_root_files.sh'
X#!/bin/bash
X#
X# $Id: check_for_root_files.sh 3.1 2017-10-21 17:04:25 rob.navarro $
X#
X# Functions used to patch controller.sh by userid-patch-controller.sh
X#
X# starting Glassfish as root when it was previously installed and operated as a non-root
X# user is a common reason for subsequent Glassfish startups to fail with almost no traceable
X# logs. The later non-root startup fails to be able to write to now root-owned files.
X# It is currently seen as unacceptable to prevent Glassfish startup as root when not 
X# usually started as root and so we take the gentler approach of warning and providing 
X# clean up instructions
X#
X# Copyright 2017 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X
X# assume intended effective user name is that which was set during installation and
X# saved away within the ${INSTALL_DIR}/db/db.cnf file under the "user" option
XINSTALL_USER=$(awk -F= '$1 ~ /^\s*user/ {print $2}' ${INSTALL_DIR}/db/db.cnf)
Xif [ -z "${INSTALL_USER}" ] ; then  
X   INSTALL_USER=UNKNOWN_APPD_USER
Xfi
X
X# group id of ${INSTALL_DIR}/appserver directory never seems to be wrongly set inadvertently, 
X# assume it is now as it was at install time
XINSTALL_GROUP=$(ls -dg ${INSTALL_DIR}/appserver | awk '{print $3}')
Xif [ -z "${INSTALL_GROUP}" ] ; then
X   INSTALL_GROUP=UNKNOWN_APPD_GROUP
Xfi
X
XuserIdCleanupSteps ()
X{
X   echo "To repair an installation with inconsistent file permissions:
X1. become root user
X2. cd ${INSTALL_DIR}
X3. stop all AppDynamics processes # e.g. bin/controller.sh stop
X4. chown -R ${INSTALL_USER}:${INSTALL_GROUP} ${INSTALL_DIR:-<APPD_INSTALL_DIR>} ${MYSQL_DATADIR:-<MYSQL_DATADIR>}
X5. exit root user and become user \"${INSTALL_USER}\"
X6. start all AppDynamics processes as usual # e.g. bin/controller.sh start"
X}
X
X# Only a problem if Controller is started with a different effective user ID than when installed.
X# Three different failing possibilities:
X# 1. installed as root and now started as non-root - will fail
X# 2. installed as non-root and now started as different non-root - will fail
X# 3. installed as non-root and now started as root - will fail in future when started as non-root
XwarnIfDifferentEUID ()
X{
X   local CMD
X   if [ `id -u -n` != "${INSTALL_USER}" ] ; then
X      CMD="Your AppDynamics Controller was installed to use Linux user \"${INSTALL_USER}\" however you are now starting it with user \"$(id -u -n)\"."
X      if [ "${INSTALL_USER}" = "root" ] || [ `id -u -n` != "root" ] ; then
X         CMD="${CMD} The Controller will likely fail to start successfully."
X      else
X         CMD="${CMD} This will cause future Controller startups as user \"${INSTALL_USER}\" to fail. $(userIdCleanupSteps)"
X      fi
X      printf "\n${CMD}\n" >&2
X      logger -p user.err -t "AppDynamics:$(basename $0):ERROR" <<< "$CMD"
X   fi
X}
X
X# in case file permissions were wrongly set before a controller upgrade or by external action
X# check some important directories for incorrect file ownership and report to user & syslog
XwarnIfBadFileOwnership ()
X{
X   # limit checked files to avoid false positives i.e. useless warnings
X   local tosearch="logs/server.log logs/startAS.log appserver/glassfish/domains/domain1"
X   local files=$(cd ${INSTALL_DIR}; find $tosearch -not -user ${INSTALL_USER})
X   
X   if [ -n "$files" ] ; then
X      local not_writable=$(cd ${INSTALL_DIR}; find $tosearch -not -user ${INSTALL_USER} -not -writable)
X      local certainty="may in future"
X
X      # if any of those Glassfish files are not writable
X      if [ `id -u -n` != "${INSTALL_USER}" ] && [ -n "$not_writable" ] ; then
X         certainty=will
X      fi
X
X      local MSG="The following $(wc -l <<< "$files") file(s) are not owned by the Linux \"${INSTALL_USER}\" user and $certainty prevent successful Controller startup.
X      $files
X
X      $(userIdCleanupSteps)"
X      printf "\n${MSG}\n" >&2
X      logger -p user.warning -t "AppDynamics:$(basename $0):WARNING" <<< "$MSG"
X   fi
X}
X
X# if current user unable to stop Glassfish then report that
XcheckIfWrongUser ()
X{
X   local gf_pid=$(pgrep -f "s/glassfish.jar ")
X   [[ -z "$gf_pid" ]] && return			# skip test if no Glassfish running
X   local gf_user=$(ps -o user= -p $gf_pid)
X
X   # if can send signal 0 then allowed to send real signal
X   if ! kill -s 0 -- $gf_pid &> /dev/null ; then
X      local MSG="***** the running Controller application server must be shutdown as user \"${gf_user}\" *****";
X
X      printf "\n${MSG}\n" >&2
X      logger -p user.err -t "AppDynamics:$(basename $0):ERROR" <<< "$MSG"
X      return 1
X   fi
X}
X
X############
X#_stopControllerAppServer ()
X#{
X## stop early if insufficient permissions to stop Glassfish
X#checkIfWrongUser || exit 1
X#
X#
X#_startControllerAppServer ()
X#{
X#warnIfBadFileOwnership
X#warnIfDifferentEUID
X#
X############
END-of-check_for_root_files.sh
echo x - save_mysql_passwd.sh
sed 's/^X//' >save_mysql_passwd.sh << 'END-of-save_mysql_passwd.sh'
X#!/bin/bash
X#
X# $Id: save_mysql_passwd.sh 3.13 2017-10-21 00:47:23 rob.navarro $
X#
X# a simple wrapper around the obfuscated password saver function
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
Xexport PATH=/bin:/usr/bin:/sbin:/usr/sbin
X
Xcd $(dirname $0)
X
XLOGFNAME=save_mysql_passwd.log
X
X. lib/log.sh
X. lib/ha.sh
X. lib/password.sh
X
Xif [ -x $APPD_ROOT/db/bin/mysql_config_editor ] ; then
X	$APPD_ROOT/db/bin/mysql_config_editor reset
X	$APPD_ROOT/db/bin/mysql_config_editor set --user=root -p
Xelse
X	save_mysql_passwd $APPD_ROOT
Xfi
END-of-save_mysql_passwd.sh
echo x - rsyncd.conf
sed 's/^X//' >rsyncd.conf << 'END-of-rsyncd.conf'
Xpid file = /tmp/replicate.rsync.pid
Xlog file = /tmp/rsyncd.log
X
X[default]
X	path=/
X	use chroot = no
X	read only = no
END-of-rsyncd.conf
echo x - lib/password.sh
sed 's/^X//' >lib/password.sh << 'END-of-lib/password.sh'
X#!/bin/bash
X#
X# $Id: lib/password.sh 3.13 2018-02-16 20:00:37 rob.navarro $
X#
X# passwordfunctions.sh
X# contains common code used by the HA toolkit
X#
X# policy:
X# intended to be minimalized for inclusion into the init functions
X# 
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X# Collection of routines to deal with MySQL root password
X#
X
Xif [ "`uname`" == "Linux" ] ; then
X	BASE64_NO_WRAP="-w 0"
Xelse
X	BASE64_NO_WRAP=""
Xfi
X
X#
X# prerequisites - die immediately if not present
X#
Xwhich tr >& /dev/null || fatal 2 "needs \'tr\'"
Xwhich base64 >& /dev/null || fatal 3 "needs \'base64\'"
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  ofa1 <obfuscated value of input parameter>
X#
X# Call as:
X#  obf_ofa1 <data>
Xfunction obf_ofa1 {
X	local thisfn=${FUNCNAME[0]} step1 obf
X	(( $# == 1 )) || abend "Usage: $thisfn <clear_data>"
X
X	step1=$(tr '\!-~' 'P-~\!-O' < <(echo -n $1)) || exit 1
X	[[ -n "$step1" ]] || fatal 2 "produced empty step1 obfuscation"
X	obf=$(base64 $BASE64_NO_WRAP < <(echo -n $step1)) || exit 1
X	[[ -n "$obf" ]] || fatal 3 "produced empty obfuscation"
X
X	# use part of function name after last '_' as obfuscator type
X	echo "${thisfn##*_} "$obf
X}
Xexport -f obf_ofa1
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  <deobfuscated value of input parameter>\n
X# Call as:
X#  deobf_ofa1 <data>
Xfunction deobf_ofa1 {
X	local step1 clear
X	(( $# == 1 )) || abend "Usage: ${FUNCNAME[0]} <obf_data>"
X
X	step1=$(base64 --decode $BASE64_NO_WRAP < <(echo -n $1)) || exit 1
X	[[ -n "$step1" ]] || fatal 2 "produced empty step1 deobfuscation"
X	clear=$(tr '\!-~' 'P-~\!-O' < <(echo -n $step1)) || exit 1
X	[[ -n "$clear" ]] || fatal 3 "produced empty cleartext"
X
X	echo $clear
X}
Xexport deobf_ofa1
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  ofa2 <obfuscated value of input parameter>
X#
X# Call as:
X#  obf_ofa2 <data>
Xfunction obf_ofa2 {
X	local thisfn=${FUNCNAME[0]} step1 otype obf
X	(( $# == 1 )) || abend "Usage: $thisfn <clear_data>"
X
X	obf=$(tr 'A-Za-z' 'N-ZA-Mn-za-m' < <(echo -n $1)) || exit 1
X	[[ -n "$obf" ]] || fatal 2 "produced empty obfuscation"
X
X	# use part of function name after last '_' as obfuscator type
X	echo "${thisfn##*_} "$obf
X}
Xexport -f obf_ofa2
X
X# one of pair of low level functions {obf,deobf}_<some extention>
X# Expected to output to STDOUT:
X#  <deobfuscated value of input parameter>\n
X# Call as:
X#  deobf_ofa2 <data>
Xfunction deobf_ofa2 {
X	local step1 clear
X	(( $# == 1 )) || abend "Usage: ${FUNCNAME[0]} <obf_data>"
X
X	clear=$(tr 'A-Za-z' 'N-ZA-Mn-za-m' < <(echo -n $1)) || exit 1
X	[[ -n "$clear" ]] || fatal 2 "produced empty cleartext"
X
X	echo $clear
X}
Xexport -f deobf_ofa2
X
X# overall wrapper function for obfuscation 
X# Call as
X#  obfuscate <obf type> <data>
X# or
X#  obfuscate <data>
Xfunction obfuscate {
X	local data otype
X	(( $# == 1 || $# == 2 )) || abend "Usage: ${FUNCNAME[0]} [<obf type>] <data>"
X
X	if (( $# == 2 )) ; then
X		otype=$1
X		data=$2
X	else
X		otype=''
X		data=$1
X	fi
X	case $otype in
X		ofa1 | '' )	obf_ofa1 "$data" ;;	# default case
X		ofa2)		obf_ofa2 "$data" ;;
X		*)		abend "unknown obfuscation type \"$otype\"" ;;
X	esac
X}
Xexport -f obfuscate
X
X# overall wrapper for various de-obfuscator functions
X# Call as:
X#  deobfuscate <otype> <obf_data>
Xfunction deobfuscate {
X	local otype=$1 data=$2
X	(( $# == 2 )) || abend "Usage: ${FUNCNAME[0]} <obf type> <obf_data>"
X
X	case $otype in
X		ofa1)	deobf_ofa1 "$data" ;;
X		ofa2)	deobf_ofa2 "$data" ;;
X		*)	abend "unknown obfuscation type \"$otype\"" ;;
X	esac
X}
Xexport -f deobfuscate
X
X###
X# get MySQL root password in a variety of ways.
X# 1. respect MYSQL_ROOT_PASSWD if present; please pass down to sub-scripts. 
X#    Do NOT persist to disk.
X# 2. respect $APPD_ROOT/db/.rootpw if present
X# 3. respect $APPD_ROOT/db/.rootpw.obf if present
X# 4. respect $APPD_ROOT/db/.mylogin.cnf if present and MYSQL_TEST_LOGIN_FILE defined
X# 5. gripe, letting them know how to persist a password
X#
X# Call as:
X#  dbpasswd=`get_mysql_passwd`
Xfunction get_mysql_passwd {
X	local clear obf otype inpw2=' '
X	local rootpw="$APPD_ROOT/db/.rootpw" rootpw_obf="$APPD_ROOT/db/.rootpw.obf"
X	local mysqlpw="$APPD_ROOT/db/.mylogin.cnf"
X
X	if [[ -n "$MYSQL_ROOT_PASSWD" ]] ; then
X		echo $MYSQL_ROOT_PASSWD
X	elif [[ -s $rootpw && -r $rootpw ]] ; then 
X		echo $(<$rootpw)
X	elif [[ -s $rootpw_obf ]] ; then
X		IFS=$' ' read -r otype obf < $rootpw_obf
X		[[ -n "$otype" && -n "$obf" ]] || \
X			fatal 1 "unable to read obfuscated passwd from $rootpw_obf"
X		clear=$(deobfuscate $otype $obf)
X		[[ -n "$clear" ]] || \
X			fatal 2 "unable to deobfuscate passwd from $rootpw_obf"
X		echo $clear
X	elif [[ -s $mysqlpw && -n "$MYSQL_TEST_LOGIN_FILE" ]] ; then
X		clear=$(awk -F= '$1 ~ "word" {print $2}' <<< "$(../db/bin/my_print_defaults -s client)")
X		[[ -n "$clear" ]] || fatal 3 "unable to get passwd from $mysqlpw"
X		echo $clear
X	else
X		fatal 3 "no password in MYSQL_ROOT_PASSWORD, db/.rootpw, db/.rootpw.obf or db/.mylogin.cnf please run save_mysql_passwd.sh"
X	fi
X}
Xexport -f get_mysql_passwd
X
X# sneaky way to get MySQL toot: mysql_config_editor to write its encrypted .mylogin.cnf
X# to a place that is guaranteed to exist. Some clients have no writeable user home 
X# directory !
Xexport MYSQL_TEST_LOGIN_FILE=$APPD_ROOT/db/.mylogin.cnf
X
END-of-lib/password.sh
echo x - lib/ha.sh
sed 's/^X//' >lib/ha.sh << 'END-of-lib/ha.sh'
X#!/bin/bash
X#
X# $Id: ha.sh 3.34 2018-08-02 12:28:23 cmayer $
X#
X# ha.sh
X# this file generally contains functions and definitions that are not included in the
X# init scripts. it is the closest to the generic subroutine library for the HA package.
X# as such, it is the natural place to put code that is shared by most of the HA functional
X# programs
X#
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X
X#
X# defaults that can be overridden
X#
XSSH=ssh
XSCP=scp
X
X#
X# if this file exists, source it to set any local customizations to the execution environment
X# specifically, if you have a local ssh, point to it in here
X#
Xif [ -s HA_ENVIRONMENT ] ; then
X. HA_ENVIRONMENT
Xfi
X
Xif ! declare -f abend &> /dev/null ; then
X	echo "ERROR: ${BASH_SOURCE[0]}: lib/log.sh not included. This is a coding error! " >&2
X	exit 1
Xfi
X
X# with help from:
X# http://stackoverflow.com/questions/1923435/how-do-i-echo-stars-when-reading-password-with-read
Xfunction getpw { 
X        (( $# == 1 )) || abend "Usage: ${FUNCNAME[0]} <variable name>"
X        local pwch inpw1 inpw2=' ' prompt; 
X        
X        ref=$1 
X	while [[ "$inpw1" != "$inpw2" ]] ; do
X		prompt="Enter MySQL root password: "
X		inpw1=''
X		while IFS= read -p "$prompt" -r -s -n1 pwch ; do 
X			if [[ -z "$pwch" ]]; then 
X				[[ -t 0 ]] && echo 
X				break 
X			else 
X				prompt='*'
X				inpw1+=$pwch 
X			fi 
X		done 
X
X		prompt="re-enter same password: "
X		inpw2=''
X		while IFS= read -p "$prompt" -r -s -n1 pwch ; do 
X			if [[ -z "$pwch" ]]; then 
X				[[ -t 0 ]] && echo
X				break 
X			else 
X				prompt='*'
X				inpw2+=$pwch 
X			fi 
X		done 
X	
X		[[ "$inpw1" == "$inpw2" ]] || echo "passwords unequal. Retry..." 1>&2
X	done
X
X	# indirect assignment (without local -n) needs eval. 
X	# This only works with global variables :-( Please use weird variable names to
X	# avoid namespace conflicts...
X        eval "${ref}=\$inpw1"            # assign passwd to parameter variable
X}
X
X# helper function to allow separate setting of passwd from command line.
X# Use this to persist an obfuscated version of the MySQL passwd to disk.
X# Call as:
X#  . hafunctions.sh
X#  save_mysql_passwd $APPD_ROOT
Xfunction save_mysql_passwd {
X	(( $# == 1 )) || abend "Usage: ${FUNCNAME[0]} <APPD_ROOT>"
X
X	local thisfn=${FUNCNAME[0]} APPD_ROOT=$1 
X	[[ -d $1 ]] || fatal "$thisfn: \"$1\" is not APPD_ROOT"
X	local rootpw_obf="$APPD_ROOT/db/.rootpw.obf"
X
X	getpw __inpw1 || exit 1		# updates __inpw1 *ONLY* if global variable
X	obf=$(obfuscate "$__inpw1") || exit 1
X	echo $obf > $rootpw_obf || fatal "$thisfn: failed to save obfuscated passwd to $rootpw_obf"
X	chmod 600 $rootpw_obf || warn "$thisfn: failed to make $rootpw_obf readonly"
X}
X
X#
X# find out which escalation method we are using
X#
Xif [ -f /sbin/service ] ; then
X    service_bin=/sbin/service
Xelif [ -f /usr/sbin/service ] ; then
X    service_bin=/usr/sbin/service
Xelse
X    fatal 1 "service not found in /sbin or /usr/sbin"
Xfi
X
X#
X# abstract out the privilege escalation at run time
X#
X# remservice <flags> <machine> <service> <verb>
X# service <service> <verb>
X#
Xif [[ `id -u` == 0 ]] ; then
X	function service {
X		$service_bin $1 $2
X	}   
X        
X	function remservice {
X		$SSH $1 $2 $service_bin $3 $4
X	}
Xelse
X	if [ -f $APPD_ROOT/HA/NOROOT ] ; then
X		function service {
X			$APPD_ROOT/HA/appdservice-noroot.sh $1 $2
X		}
X		function remservice {
X			$SSH $1 $2 $APPD_ROOT/HA/appdservice-noroot.sh $3 $4
X		}
X	elif [ -x /sbin/appdservice ] ; then
X		function service {
X			/sbin/appdservice $1 $2
X		}
X		function remservice {
X			$SSH $1 $2 /sbin/appdservice $3 $4
X		}
X	else
X		function service {
X			sudo $service_bin $1 $2
X		}
X		function remservice {
X			$SSH $1 $2 sudo -n $service_bin $3 $4
X		}
X    fi
Xfi
X
X#
X# we do a boatload of sanity checks, and if anything is unexpected, we
X# exit with a non-zero status and complain.
X#
Xfunction check_sanity {
X	if [ ! -d "$APPD_ROOT" ] ; then
X		fatal 1 "controller root $APPD_ROOT is not a directory"
X	fi
X	if [ ! -w "$DB_CONF" ] ; then
X		fatal 2 "db configuration $DB_CONF is not writable"
X	fi
X	if [ ! -x "$MYSQL" ] ; then
X		fatal 3 "controller root $MYSQL is not executable"
X	fi
X	if [ `id -un` != $RUNUSER ] ; then
X		fatal 4 "$0 must run as $RUNUSER"
X	fi
X}
X
X#
X# locate a machine agent install directory and print out it's path
X#
Xfunction find_machine_agent {
X	for ma_path in $(find ../.. .. -maxdepth 2 -type f -name machineagent.jar -print 2>/dev/null | sed "s,/[^/]*$,," | sort -u) ; do
X		readlink -e $ma_path
X	done
X}
X
X# output all the names and aliases on the input /etc/hosts file for the current
X# hostname which starts with current hostname e.g. for hostname = serv01 it will match
X# /etc/hosts entries for serv01.x.y or a.serv01.y.z or serv01
Xfunction get_names {
X   (( $# == 1 )) || abend "Usage: ${FUNCNAME[0]} <hostname>"
X   local host=$1
X
X   awk '
X   BEGIN	{ IGNORECASE = 1 }
X   $1 ~ /^[[:space:]]*#/ {next} 
X   $1 ~ /^127.0./ {next} 
X   $1 ~ /[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/ && $0 ~ /\y'$host'\y/ {for (i=2; i <= NF; ++i) print $i}'
X}
Xexport -f get_names
X
X#
X# Check for various problems that prevent passwordless ssh working from each
X# node to the other.
X# Checks all /etc/hosts names for $(hostname) calling ssh to all secondary's 
X# /etc/hosts entries and vice versa.
X# Return non-zero for caller to exit if required.
X# Requires:
X#  . lib/log.sh
X# Call as:
X#  check_ssh_setup $otherhostname || fatal "2-way passwordless ssh not setup"
X# 
X# e.g. if function running on primary then:
X#  check_ssh_setup $secondary
X#
Xfunction check_ssh_setup {
X   # this gross hack is for those systems that don't have the ability to have reasonable hosts files
X   # that depend on dns for everything.
X   if [ -f NO_SSH_CHECK ] ; then
X      return 0
X   fi
X
X   (( $# == 1 )) || abend "Usage: ${FUNCNAME[0]} <otherhostname>"
X   local myhost=$(hostname) otherhost=$1 i j OUT=/tmp/.out.$$ ERR=/tmp/.errs.$$
X
X   touch $OUT && [[ -w $OUT ]] || abend "${FUNCNAME[0]}: unable to write to $OUT"
X   touch $ERR && [[ -w $ERR ]] || abend "${FUNCNAME[0]}: unable to write to $ERR"
X
X   # suffers a slight chicken and egg problem as we need /etc/hosts of $otherhost
X   # but have not established that ssh to secondary works yet... hence initial
X   # test
X   timeout 9s bash -c "$SSH -o StrictHostKeyChecking=no $otherhost pwd" >$OUT 2>$ERR
X   retc=$?
X   if (( $retc != 0 )) ; then
X      gripe "ssh Test-0: $myhost unable to reach $otherhost: $(<$ERR)"
X      return 2
X   fi
X   local pattern='^/.*'
X   if [[ ! "$(<$OUT)" =~ $pattern ]] ; then
X       gripe "ssh Test-0: $myhost unable to run 'pwd' on $otherhost: $(<$ERR). Please fix and re-try"
X       return 3
X   fi
X   rm -f $OUT $ERR
X
X   local myhosts=$(< /etc/hosts)
X   if [[ -z "$myhosts" ]] ; then
X      gripe "ssh Test-0: $myhost unable to read /etc/hosts. Please fix and re-try"
X      return 4
X   fi
X
X   local mynames=$(get_names $myhost <<< "$myhosts" | sort -ur)
X   if [[ -z "$mynames" ]] ; then
X      gripe "ssh Test-0: $myhost unable to find any /etc/hosts entries for itself."
X      gripe "Please ensure both primary and secondary servers list both servers in their /etc/hosts files...Skipping test"
X      return 0
X   fi
X
X   local otherhosts=$($SSH -o StrictHostKeyChecking=no $otherhost cat /etc/hosts)
X   if [[ -z "$otherhosts" ]] ; then
X      gripe "ssh Test-0: $myhost unable to cat /etc/hosts on $otherhost. Please fix and re-try"
X      return 4
X   fi
X
X   local othernames=$(get_names $otherhost <<< "$otherhosts")
X   if [[ -z "$othernames" ]] ; then
X      gripe "ssh Test-0: $otherhost unable to find any /etc/hosts entries for itself."
X      gripe "Please ensure both primary and secondary servers list both servers in their /etc/hosts files...Skipping test"
X      return 0
X   fi
X
X   # now check that all names for current hostname can make passwordless ssh call to all names
X   # for $otherhost and vice-versa
X   for i in $(sort -u <<< "$(printf '%s\n' $mynames)") ; do
X      for j in $(sort -u <<< "$(printf '%s\n' $othernames)") ; do
X         do_check_ssh_setup $i $j || return $?
X      done
X   done
X}
X
X# Helper function for check_ssh_setup() that tests ssh between two named hosts.
X# Note that these tests will also add entries into the ~/.ssh/known_hosts
X# files of both hosts.
Xfunction do_check_ssh_setup {
X   (( $# == 2 )) || abend "Usage: ${FUNCNAME[0]} <myhostname> <otherhostname>"
X   local myhost=$1 otherhost=$2 retc OUT=/tmp/.out.$$ ERR=/tmp/.errs.$$
X
X   touch $OUT && [[ -w $OUT ]] || abend "${FUNCNAME[0]}: unable to write to $OUT"
X   touch $ERR && [[ -w $ERR ]] || abend "${FUNCNAME[0]}: unable to write to $ERR"
X
X   # Test-1: check whether possible to reach $otherhost with ssh - fingerprint known or not
X   timeout 9s bash -c "$SSH -o StrictHostKeyChecking=no $otherhost echo '$(id -un):$(id -gn)'" >$OUT 2>$ERR
X   retc=$?
X   if (( $retc != 0 )) ; then
X      message "ssh Test-1: $myhost unable to reach $otherhost: $(<$ERR)"
X      return 5
X   fi
X   if [[ "$(<$OUT)" != "$(id -un):$(id -gn)" ]] ; then
X       message "ssh Test-1: $myhost unable to determine username:groupname on $otherhost: $(<$ERR). Please ensure same username and groupname on both HA servers and re-try"
X       return 6
X   fi
X
X   # Test-3: check whether otherhost can reach me with ssh - fingerprint known or not
X   timeout 9s bash -c "$SSH $otherhost $SSH -o StrictHostKeyChecking=no $myhost id -un" &> $ERR
X   retc=$?
X   if (( $retc != 0 )) ; then
X      message "ssh Test-3: $otherhost unable to reach $myhost: $(<$ERR)"
X      return 8
X   fi
X
X   rm -f $OUT $ERR		# files are not deleted after unsuccessful earlier return
X   return 0
X}
X
END-of-lib/ha.sh
echo x - lib/sql.sh
sed 's/^X//' >lib/sql.sh << 'END-of-lib/sql.sh'
X#
X# $Id: lib/sql.sh 3.32 2018-05-16 21:15:14 cmayer $
X#
X# run sql statements
X# potentially logging, potentially with timeouts,
X# outputting rows as key-value pairs
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X
Xdbport=${dbport:-`dbcnf_get port`}
X
X#
X# these are derived, but should not need editing
X#
XMYSQL="$APPD_ROOT/db/bin/mysql"
XMYSQLADMIN="$APPD_ROOT/db/bin/mysqladmin"
XCONNECT=(--protocol=TCP --user=root --port=$dbport)
XACONNECT=(--host=localhost -p ${CONNECT[@]})		# mysqladmin specific without dbpasswd
X
Xif [ ! -f $APPD_ROOT/db/.mylogin.cnf ] ; then
X	dbpasswd=${dbpasswd:-`get_mysql_passwd`}
X	CONNECT+=("--password=$dbpasswd")
Xfi
X
X#
X# bunch of state variables
X#
Xsqlpid=0
Xsqlkiller=0
Xsqlkilled=0
XDELFILES=""
X
X#
X# alarm signal handler function for sql timer
X#
Xfunction sqltimeout {
X	echo "sqltimeout $sqlpid"
X	if [ $sqlpid -ne 0 ] ; then
X		echo "sql timed out: killing pid $sqlpid" | logonly
X		disown $sqlpid
X		kill -s SIGINT $sqlpid
X		sqlpid=0
X		sqlkiller=0
X		sqlkilled=1
X	fi
X}
X
X#
X# sql wrapper - knows about timeout - returns 0 on success, nonzero otherwise
X# args:  hostname command [ timeout ]
X#
X# side effects, is that it sends errors and sql to sqlerr
X# sets DELFILES
X#
Xfunction sql {
X	local tmpfile
X	local errfile
X	local mypid
X	local retval
X
X	mypid=$$
X	tmpfile=/tmp/sql_result.$mypid
X	errfile=/tmp/sql-err.$mypid
X	DELFILES="$tmpfile $errfile"
X	rm -f $DELFILES
X
X	if [ "$1" == localhost ] ; then
X		COMMAND=($MYSQL -BE --host=localhost "${CONNECT[@]}" controller)
X	else
X		COMMAND=($SSH $1 $APPD_ROOT/HA/mysqlclient.sh)
X	fi
X
X	if [ $# -lt 3 ] ; then
X		echo "$2" | "${COMMAND[@]}" > $tmpfile
X		if [ -f $APPD_ROOT/HA/LOG_SQL ] ; then
X			echo "${COMMAND[@]}" | logonly
X			echo "$2" | logonly
X			echo "result:" | logonly
X			cat $tmpfile | logonly
X		fi
X		cat $tmpfile
X	else
X		trap sqltimeout SIGALRM
X		# start time bomb
X		sqlkilled=0
X		(sleep $3 ; kill -SIGALRM $mypid) &
X		sqlkiller=$!
X		disown $sqlkiller
X
X		# issue sql
X		echo `date` "sql text: $2" >$errfile
X		echo "$2" | "${COMMAND[@]}" >$tmpfile 2>>$errfile &
X		sqlpid=$!
X		wait $sqlpid
X		retval=$?
X		if [ $sqlkiller -ne 0 ] ; then
X			kill -9 $sqlkiller >/dev/null 2>&1
X		fi
X		if [ $sqlkilled -ne 0 ] ; then
X			echo "sqlkilled: ret $retval" >> $errfile
X			retval=1
X		fi
X
X		if [ $retval == 0 ] ; then
X			cat $tmpfile
X        else
X			echo "output: " >> $errfile
X			cat $tmpfile >> $errfile
X			cat $errfile | logonly
X        fi
X		return $retval
X	fi
X	rm -f $DELFILES
X	DELFILES=""
X}
X
X#
X# read a column from sql return
X#
Xfunction get {
X	local key=$1
X	awk "/^[ \t]*$key:/ {print \$2}"
X}
X
Xfunction get_replication_master {
X    sql localhost "show slave status" 5 | get Master_Host
X}
X
Xfunction get_replication_type {
X	local host=$1
X	sql $host "select value from global_configuration_local where name = \
X		'ha.controller.type'" | get value
X}
X
Xfunction get_replication_mode {
X	local host=$1
X	sql $host "select value from global_configuration_local where name = \
X		'appserver.mode'" | get value
X}
X
Xfunction bounce_slave {
X    sql localhost "stop slave ; start slave ;"
X}
X
Xfunction get_slave_status {
X	slave_io=""
X	slave_sql=""
X	seconds_behind=""
X	primary=""
X
X	sql localhost "show slave status" | \
X	awk 'BEGIN { OFS="" }
X         /Slave_IO_Running:/ {print "slave_io=",$2}
X         /Slave_SQL_Running:/ {print "slave_sql=",$2}
X         /Seconds_Behind_Master:/ {print "seconds_behind=",$2}
X         /Master_Host:/ {print "primary=",$2}'
X}
X
END-of-lib/sql.sh
echo x - lib/log.sh
sed 's/^X//' >lib/log.sh << 'END-of-lib/log.sh'
X#!/bin/bash
X#
X# $Id: lib/log.sh 3.5 2017-11-21 10:21:04 rob.navarro $
X#
X# logging code for the HA toolkit - include this first
X#
X# all use the global LOGFNAME
X# 
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X#
X
X# this function should have no external dependencies and so should be callable
X# from anywhere...returning 0 for success or non-zero for failure
X# Call as:
X#  APPD_ROOT=$(get_appd_root) || exit 1
Xfunction get_appd_root {
X	local cwd=$(pwd -P || readlink -e .)
X	if [[ "${cwd##*/}" != "HA" ]] ; then
X		echo "ERROR: ${FUNCNAME[0]}: must be run within 'HA' sub-directory of controller install directory" >&2
X		return 1
X	fi
X	echo $(readlink -e ..)
X}
X
Xif [ -z "$APPD_ROOT" ] ; then
X	# let's also check that whoever is calling us has cd'd to the HA directory
X	APPD_ROOT=$(get_appd_root) || exit 1
Xfi
X
Xif [[ -z "$LOGFNAME" ]] ; then
X   echo "ERROR: ${FUNCNAME[0]}: LOGFNAME variable is not set. This is a coding bug!" >&2
X   exit 1
Xfi
X
X#
X# function to mask passwords
X#
Xfunction pwmask {
X	sed -u -e 's/--password=[^ ]*/--password=/'
X}
X
X# Init processes at startup should not log into $APPD_ROOT as generally that is
X# reserved for $RUNUSER EUID processes. Instead will send output elsewhere by
X# assigning full path instead of just filename to LOGFNAME
Xif [[ "${LOGFNAME:0:1}" != "/" ]] ; then
X	LOGFILE=$APPD_ROOT/logs/$LOGFNAME	# caller needs path adding
Xelse
X	LOGFILE=$LOGFNAME			# assume caller wants specific path
Xfi
X
Xfunction log {
X	if [[ -t 1 ]] ; then
X		pwmask | tee -a $LOGFILE
X	else
X		pwmask >> $LOGFILE
X	fi
X}
X
Xfunction logonly {
X	pwmask >> $LOGFILE
X}
X
X# output to STDERR and to log file
Xfunction warn {
X	echo "$@" >&2
X	logmsg "$@"
X}
X
X# output to STDERR only - no log file entry
Xfunction gripe {
X	echo "$@" >&2
X}
X
Xfunction logmsg {
X	echo "  -- " "$@" >> $LOGFILE
X}
X
Xfunction message {
X	if [[ -t 1 ]] ; then
X		echo "  -- " "$@"
X	fi
X
X	logmsg "$@"
X}
X
X#
X# this indicates a coding error, so let's print a useful backtrace
X# as in guten abend
X#
Xfunction abend {
X	local lines=($((LINENO-1)) ${BASH_LINENO[*]})
X	local level=0
X
X	gripe "$@"
X	logmsg "$@"
X	echo "exit code $exitcode" | log
X	echo "backtrace: " | log
X	for func in ${FUNCNAME[*]} ; do
X		echo "${FUNCNAME[$level]}() ${BASH_SOURCE[$level]}:${lines[$level]}" | log
X		level=$((level+1))
X	done
X	kill -INT $$
X}
X
X#
X# this is a runtime failure
X#
Xfunction fatal {
X	local exitcode=$1
X	shift
X	gripe "$@"
X	logmsg "$@"
X	gripe "exit code $exitcode"
X	kill -INT $$
X	exit $exitcode
X}
X
X#
X# rename the log
X#
Xfunction log_rename {
X	if [ -e $LOGFILE ] ; then
X		message "log renamed" `date`
X		mv $LOGFILE $LOGFILE.`date +%F.%T`
X	fi
X}
X
Xfunction debug
X{
X   while read -p '?dbg> ' L ; do
X      eval "$L"
X   done < /dev/stdin
X}
END-of-lib/log.sh
echo x - lib/conf.sh
sed 's/^X//' >lib/conf.sh << 'END-of-lib/conf.sh'
X#!/bin/bash
X#
X# $Id: lib/conf.sh 3.35 2018-07-06 22:51:53 cmayer $
X#
X# contains common code used to extract and set information in the
X# config files.
X#
X# there is some hair here having to do with permissions,
X# and we invoke runuser to do file access as the appropriate user
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X# all the configuration file names and locations
X#
X
Xif ! declare -f runuser &> /dev/null ; then
X        echo "ERROR: ${BASH_SOURCE[0]}: lib/runuser.sh not included. This is a coding error! " >&2
X        exit 1
Xfi
X
Xlockfile=/var/lock/subsys/$NAME
X
XDB_CONF=$APPD_ROOT/db/db.cnf
XAPPSERVER_DISABLE=$APPD_ROOT/HA/APPSERVER_DISABLE
XSHUTDOWN_FAILOVER=$APPD_ROOT/HA/SHUTDOWN_FAILOVER
XWATCHDOG_ENABLE=$APPD_ROOT/HA/WATCHDOG_ENABLE
XWATCHDOG_SETTINGS=$APPD_ROOT/HA/watchdog.settings
XASSASSIN_PIDFILE=$APPD_ROOT/HA/appd_assassin.pid
XWATCHDOG_PIDFILE=$APPD_ROOT/HA/appd_watchdog.pid
XWATCHDOG_STATUS=$APPD_ROOT/logs/watchdog.status
XWATCHDOG_ERROR=$APPD_ROOT/logs/watchdog.error
XDOMAIN_XML=$APPD_ROOT/appserver/glassfish/domains/domain1/config/domain.xml
XCONTROLLER_SH=$APPD_ROOT/bin/controller.sh
XMYSQLCLIENT=$APPD_ROOT/HA/mysqlclient.sh
X
X# must have accessible db.cnf
Xif ! [ -f $DB_CONF ] ; then
X	echo $DB_CONF not readable
X	exit 1
Xfi
X
X
X# requires gnu sed
Xif ! sed --version >/dev/null 2>&1 ; then
X	echo gnu sed required
X	exit 1
Xfi
X
X# the context for xml manipulation
Xxml_context="/<config name=\\\"server-config\\\">/,/<\/config>/"
X
X#
X# lose trailing and leading white space
X#
Xfunction strip_white() {
X	sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
X}
X
X#
X# get possible multiple values from named XML file and element, one per row
X# Call as:
X#  runuser get_xml_element_value $DOMAIN $property
X#
Xfunction get_xml_element_value {
X	local thisfn=${FUNCNAME[0]}
X	(( $# == 2 )) || abend "Usage: $thisfn <xml file> <node name>"
X	local xml=$1
X 	local property=$2
X
X	[[ -r $xml ]] || abend "$thisfn: unable to read $xml"
X	[[ -n $property ]] || abend "$thisfn: needs non-empty property name"
X	awk '$0 !~ /^\/ >|^ -/ {print}' < <(xmllint --shell $1 <<< "cat //$2/text()")
X}
Xexport -f get_xml_element_value
X
X#
X# count how many nodes of given name in supplied XML file
X#
X# This is helpful because no/0 elements of given name imply a insert
X# where as 1 or more, whether empty or not, imply an update
X#
Xfunction count_xml_element {
X	local thisfn=${FUNCNAME[0]}
X	(( $# == 2 )) || abend "Usage: $thisfn <xml file> <node name>"
X	local xml=$1
X 	local property=$2
X
X	[[ -r $xml ]] || abend "$thisfn: unable to read $xml"
X	[[ -n $property ]] || abend "$thisfn: needs non-empty property name"
X	awk '$0 ~ /is a number/ {print $NF}' < <(xmllint --shell $xml <<< "xpath count(//$property)")
X#	awk '	$0 ~ /^\/ > .{2} > $/ 		{print $3} 
X#		$0 ~ /^\/\/.*Node Set$/ 	{print $(NF-2)} 
X#		$0 ~ /^\/ > '$property' > $/ 	{print "1"}' < <(xmllint --shell $xml <<< "cd //$property" 2>&1)
X}
Xexport -f count_xml_element
X
X#
X# get a property from a controller_info file
X#
X# Need to differentiate between <x></x> existing but with no contained value
X# and between simple absence of <x>.*</x>
X#
Xfunction controller_info_get() {
X	local xml=$1
X	local property=$2
X
X	runuser get_xml_element_value $xml $property
X}
Xexport -f controller_info_get
X
X#
X# set a property into a controller_info file
X#
Xfunction controller_info_set() {
X	local xml=$1
X	local property=$2
X	local value=$3
X
X	if (( $(count_xml_element $xml $property) == 0 )) ; then
X		tmpfile=/tmp/cinfo_set.$$ ; rm -f $tmpfile
X		echo "<$property>$value</$property>" > $tmpfile
X		chmod 755 $tmpfile
X		runuser sed -i.$(date +%s) -e "\"/<controller-info>/r $tmpfile\"" $xml
X		rm -f $tmpfile
X	else
X		runuser sed -i.$(date +%s) -e "\"s,\(<$property>\).*\(</$property>\),\1$value\2,\"" $xml
X	fi
X}
Xexport -f controller_info_set
X
X#
X# unset a property in a controller_info file
X#
Xfunction controller_info_unset() {
X	local xml=$1
X	local property=$2
X
X	runuser sed -i.$(date +%s) -e "\"s/<$property>.*<\/$property>//\"" $xml
X}
X
X#
X# simplifies processing jvm options from domain.xml
X#
X# different types of jvm_options are settable, unsettable, and gettable
X# they are denoted by a prefix character
X# -Xmx		prefix character X
X# -XX:+foo	prefix character +|-	we can ask for either sense
X# -XX:-foo
X# -Dfoo		no prefix
X
X#
X# extract a specific jvm option value from a stream
X#
X# get_jvm_option <property>
X#
Xfunction get_jvm_option
X{
X	local property=$1
X
X	awk -F= "/^-XX:$property=/ { print \$2 }
X		/^-XX:\+$property/ { print \"+\" }
X		/^-XX:-$property/ { print \"-\" }
X		/^-D$property=/ { print \$2 }
X		/^-$property/ { sub(\"-$property\",\"\"); print }"
X}
X
X#
X# domain_get_jvm_option <property>
X#
Xfunction domain_get_jvm_option {
X	local property=$1
X	local selector
X	local xpath
X	local base
X	local stripper
X
X	case $property in
X
X	# like -Xmx34g
X	X*)
X		selector="<jvm-options>-$property"
X		stripper=(-e s/-$property//)
X		;;
X
X	# like -XX:+foo or -XX:-foo
X	+*|-*) 
X		base=${property:1}
X		stripper=(-e "s/-XX:\([+-]\)$base/\1/")
X		selector="<jvm-options>-XX:[+-]$base"
X		;;
X
X	# like -Dfoo and -Dfoo=77
X	*)
X		selector="<jvm-options>-D$property"
X		stripper=(-e s/-D$property$/true/ -e s/-D$property=//)
X		;;
X	esac
X
X	val=$(runuser cat $DOMAIN_XML | sed -e "$xml_context!d" | \
X		grep $selector | sed -e 's,</*jvm-options>,,g' ${stripper[@]} | strip_white)
X	if [ -z "$val" ] ; then
X		echo "unset"
X	else
X		echo "$val"
X	fi
X}
X
X#
X# function to unset a domain.xml property
X#
Xfunction domain_unset_jvm_option {
X	local property=$1
X	local selector
X	local base
X	local xpath
X
X	case $property in
X
X	# like -Xmx34g
X	X*)
X		selector="-$property"
X		# selector="starts-with(.,'-$property')"
X		;;
X
X	# like -XX:+foo or -XX:-foo
X	+*|-*)
X		base=${property:1}
X		# selector="string(.)='-XX:-$base' or string(.)='-XX:+$base'"
X		selector="-XX:[+-]$base"
X		;;
X
X	# like -Dfoo and -Dfoo=77
X	*)
X		# selector="starts-with(.,'-D$property=') or (string(.)='-D$property')"
X		selector="-D$property[=]*"
X		;;
X	esac
X
X	runuser sed -i.$(date +%s) -e "\"$xml_context{/$selector/d}\"" $DOMAIN_XML
X}
X
X#
X# domain_set_jvm_option <property> [<value>]
X# 
Xfunction domain_set_jvm_option {
X	local property=$1
X	local value="$2"
X	local base
X	local selector
X	local xpath
X
X	case $property in
X
X	# like -Xmx34g
X	X*)
X		valueset="-$property$value"
X		propmatch="-$property.*"
X		;;
X
X	# like -XX:+foo or -XX:-foo
X	+*|-*)
X		valueset="-XX:$property"
X		propmatch="-XX:[+-]${property:1}"
X		;;
X
X	# like -Dfoo and -Dfoo=77
X	*)
X		if [ -n "$value" ] ; then
X			value="=$value"
X		fi
X		valueset="-D$property$value"
X		propmatch="-D$property=*.*"
X		;;
X	esac
X
X	setter="/<\/java-config>/s,</java-config>,<jvm-options>$valueset</jvm-options>\n&,"
X	changer="s,\(<jvm-options>\)$propmatch\(</jvm-options>\),\1$valueset\2,"
X
X	if [ "$(domain_get_jvm_option $property)" != "unset" ] ; then
X		setter="$changer"
X	fi
X	sed -i.$(date +%s) -e "$xml_context{$setter}" $DOMAIN_XML
X}
X
X# set a property into the db.cnf file
X# if the property is already there, edit it, else append it
X# if remotehost clear, do it locally
Xfunction dbcnf_set {
X	local property=$1
X	local value="$2"
X	local remotehost=$3
X	local IN=/tmp/db.cnf.in.$$
X	local OUT=/tmp/db.cnf.out.$$
X	
X	rm -f $IN $OUT
X
X	if [ -z "$remotehost" ] ; then
X		DBCNF=$DB_CONF
X		CP="cp"
X	else
X		DBCNF=$remotehost:$DB_CONF
X		CP="$SCP -q"
X	fi
X	runuser $CP $DBCNF $IN
X	cp $IN $OUT
X
X	# patch odd failure case when file does not end with newline
X	# (idea from http://backreference.org/2010/05/23/sanitizing-files-with-no-trailing-newline/)
X	tail -c1 $OUT | read -r _ || echo >> $OUT
X
X	if grep -q "^[[:space:]]*$property\(=\|$\)" $IN ; then
X		if ! [ -z "$value" ] ; then
X			sed -i.$(date +%s) "s,\(^[[:space:]]*$property=\).*$,\1$value," $OUT >/dev/null
X		fi
X	else
X		if [ -z "$value" ] ; then
X			echo "$property" >> $OUT
X		else
X			echo "$property=$value" >> $OUT
X		fi
X	fi
X
X	if ! cmp -s $IN $OUT ; then
X		runuser $CP $OUT $DBCNF
X	fi
X	rm -f $IN $OUT
X}
X
X#
X# remove a property setting from the db.cnf file
X#
Xfunction dbcnf_unset {
X	local property=$1
X	local remotehost=$2
X	local IN=/tmp/db.cnf.in.$$
X	local OUT=/tmp/db.cnf.out.$$
X
X	rm -f $IN $OUT
X
X	if [ -z "$remotehost" ] ; then
X		DBCNF=$DB_CONF
X		CP=cp
X	else
X		DBCNF=$remotehost:$DB_CONF
X		CP="$SCP -q"
X	fi
X	runuser $CP $DBCNF $IN
X	cp $IN $OUT
X
X	sed -i.$(date +%s) "/^[[:space:]]*$property\b/d" $OUT >/dev/null
X
X	if ! cmp -s $IN $OUT ; then
X		$CP $OUT $DBCNF
X	fi
X	rm -f $IN $OUT
X}
X
X#
X# read the db.cnf file and extract an attribute
X#
Xfunction dbcnf_get {
X	local property=$1
X
X	val=`runuser grep "\"^[[:space:]]*$property=\"" $DB_CONF | awk -F= '{print $2}'`
X	if [ -n "$val" ] ; then
X		echo $val
X	else
X		echo unset
X	fi
X}
X
X#
X# look in the domain.xml to see if any privileged ports are in use
X# return success if they are
X#
Xfunction use_privileged_ports {
X	runuser xmllint --xpath "\"//*[@port<1024]\"" $DOMAIN_XML 2>/dev/null | grep -q -s port
X}
X
X#
X# scale a size by a suffix [KkMmGg] if present
X# also, add some fluff if specified
X#
X# input on stdin
Xfunction scale {
X	local fluff=1
X	if [ $# = 1 ] ; then fluff=$1 ; fi
X
X	awk "{
X		if(sub(/[Kk]/,\"\",\$1) == 1){
X			BYTES=\$1*1024
X		}
X		else if(sub(/[Mm]/,\"\",\$1)==1){
X			BYTES=\$1*1048576
X		}
X		else if(sub(/[Gg]/,\"\",\$1)==1){
X			BYTES=\$1*1073741824
X		} else {
X			gsub(/[^0-9]/,\"\",\$1)
X			BYTES=\$1
X		}
X		printf(\"%.0f\n\", BYTES * $fluff)
X		exit;
X	}"
X}
X
X#
X# read some things from the db.cnf
X#
XDB_PID_FILE=`dbcnf_get pid-file`
XDB_DATA_DIR=`dbcnf_get datadir`
XFILE_RUNUSER=$(dbcnf_get user)
X
X#
X# a trivial sanity check - if runuser is defined, it better be what is in
X# the database config file
X#
Xif [ -n "$RUNUSER" ] ; then
X	if [ $FILE_RUNUSER != $RUNUSER ] ; then
X		echo "runuser inconsistent: sysconfig: $RUNUSER db.cnf: $FILE_RUNUSER"
X	fi
Xfi
XRUNUSER=$FILE_RUNUSER
X
X#
X# given a name and url, crack the url and set the 3 variables:
X# $name_host, $name_port, $name_protocol
X#
Xfunction parse_vip()
X{
X        local vip_name=$1
X        local vip_def=$2
X
X        [[ -z "$vip_def" ]] && return
X
X        echo $vip_def | awk -F: -v vip_name=$vip_name '
X                BEGIN {
X                        host="";
X                        protocol="http";
X                        port="8090";
X                }
X                /http[s]*:/ {protocol=$1; host=$2; port=$3;next}
X                /:/ {host=$1; port=$2;next}
X                {host=$1}
X                END {
X                        if (port == "") {
X                                port = (protocol=="https")?443:8090;
X                        }
X                        gsub("^//","",host);
X                        gsub("/.*$","",host);   # drop any trailing /controller
X                        gsub("[^0-9]*$","",port);
X                        printf("%s_host=%s\n", vip_name, host);
X                        printf("%s_port=%s\n", vip_name, port);
X                        printf("%s_protocol=%s\n", vip_name, protocol);
X                }
X        '
X}
END-of-lib/conf.sh
echo x - lib/runuser.sh
sed 's/^X//' >lib/runuser.sh << 'END-of-lib/runuser.sh'
X#!/bin/bash
X#
X# $Id: lib/runuser.sh 3.35 2018-07-06 22:51:53 cmayer $
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X#
X
X####
X# Contains definition of RUNUSER (effective user) as well as the
X# family of utility functions to wrap commands that sometimes need 
X# to be run as the current user and sometime as the effective user of
X# AppD.
X#
X# Generally the rule is if current effective UID != to the MySQL user
X# then cause all filesystem accesses to run with the effective UID
X# of the MySQL user.
X#
X# These wrapper functions are needed to:
X# 1.  prevent processes started as root from making files that 
X#     non-root users can then later not read.
X# 2.  enable root started processes from accessing NFS mounted filestore
X#
X# This file needs to be included or embedded prior to any use of the
X# the runuser, bg_runuser wrapper functions
X####
X
X#
X# This function has only 2 external dependencies:
X# 1. APPD_ROOT is set
X# 2. $APPD_ROOT/db/db.cnf is readable by current user
X#
X# Returns the username referenced by MySQL's db/db.cnf as the single
X# most reliable record of which effective user AppD should run as.
X#
X# Avoids unpleasant cyclic dependency by just ASSUMING $APPD_ROOT/db/db.cnf
X# is readable. Otherwise using runuser() functions assume the existence of
X# $RUNUSER... which has not yet been determined.
X#
X# Remember that when called by Init script RUNUSER will already have
X# been set.
X# Call as:
X#  RUNUSER=$(get_runuser) || exit 1
Xfunction get_runuser {
X	if [[ -z "$APPD_ROOT" ]] ; then
X		echo "ERROR: ${FUNCNAME[0]}: APPD_ROOT is not set. This is a coding bug! " >&2
X		exit 1
X	fi
X	if ! [ -f $APPD_ROOT/db/db.cnf ] ; then
X		echo "ERROR: ${FUNCNAME[0]}: $APPD_ROOT/db.cnf not readable" >&2
X		exit 1
X	fi
X	local euser RETC
X	euser=$(awk -F= '$1 ~ /^[[:space:]]*user$/ {print $2}' $APPD_ROOT/db/db.cnf)
X	RETC=$?
X
X	if (( $RETC != 0 )) ; then
X		echo "ERROR: ${FUNCNAME[0]}: APPD_ROOT is not set correctly." >&2
X		exit 1
X	fi
X	if [[ -z "$euser" ]] ; then
X		if grep -q user=  $APPD_ROOT/db/db.cnf &>/dev/null; then
X			echo "ERROR: ${FUNCNAME[0]}: your awk version needs upgrading. Please install gawk." >&2
X		else
X			echo "ERROR: ${FUNCNAME[0]}: $APPD_ROOT/db/db.cnf is not valid MySQL config - missing user=... option." >&2
X		fi
X		exit 1
X	fi
X	echo $euser
X}
X
Xif [[ -z "$RUNUSER" ]] ; then
X	RUNUSER=$(get_runuser) || exit 1
Xfi
X
X#
X# runuser quoting is a definite PITA.  the way to stay sane is to note
X# exactly when you want $ to be expanded and make that explicit, passing
X# escaped $ signs when you want the expansion deferred
X#
X# finally, the bg_runuser function should return the pid
X#
Xif [[ `id -un` == "$RUNUSER" ]] ; then
X        function bg_runuser {
X#               echo "$* >/dev/null 2>&1 & echo \$! ; disown" | bash &
X		bash -c "$* &>> ${logfile:-/dev/null} </dev/null & echo \$! ; disown"
X        }
X        function run_mysql {
X                $MYSQLCLIENT
X        }
X        function runuser {
X#               echo "$*" | bash
X                bash -c "$*"
X        }
Xelse
X        function bg_runuser {
X#               echo "$* >/dev/null & echo \$! ; disown" | su -s /bin/bash $RUNUSER
X		su -s /bin/bash ${RUNUSER:-unset_runuser} -c "$* &>> ${logfile:-/dev/null} </dev/null & echo \$! ; disown"
X        }
X        function run_mysql {
X#               su -s $MYSQLCLIENT $RUNUSER
X                su -s /bin/bash ${RUNUSER:-unset_runuser} -c $MYSQLCLIENT
X        }
X        function runuser {
X#               echo "$*" | su -s /bin/bash $RUNUSER
X                su -s /bin/bash ${RUNUSER:-unset_runuser} -c "$*"
X        }
Xfi
Xexport -f runuser bg_runuser run_mysql
END-of-lib/runuser.sh
echo x - lib/init.sh
sed 's/^X//' >lib/init.sh << 'END-of-lib/init.sh'
X#!/bin/bash
X#
X# $Id: lib/init.sh 3.24 2017-10-21 00:47:23 rob.navarro $
X#
X# init.sh
X# contains functions to change user and run processes
X# 
X# also, common code for the init scripts.
X#
X# Copyright 2016 AppDynamics, Inc
X#
X#   Licensed under the Apache License, Version 2.0 (the "License");
X#   you may not use this file except in compliance with the License.
X#   You may obtain a copy of the License at
X#
X#       http://www.apache.org/licenses/LICENSE-2.0
X#
X#   Unless required by applicable law or agreed to in writing, software
X#   distributed under the License is distributed on an "AS IS" BASIS,
X#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#   See the License for the specific language governing permissions and
X#   limitations under the License.
X# 
X
X# enable Debian systems to work also
Xfunction service {
X    if [[ -z "$service_bin" ]] ; then
X        if [[ -f /sbin/service ]] ; then
X                service_bin=/sbin/service
X        elif [[ -f /usr/sbin/service ]] ; then
X                service_bin=/usr/sbin/service
X        else
X            echo service not found in /sbin or /usr/sbin - exiting
X            exit 13
X        fi
X        $service_bin "$@"
X    else
X        $service_bin "$@"
X    fi
X}
X
Xfunction require_root {
X    if [ `id -un` != "root" ] ; then
X        echo "service changes must be run as root"
X        exit 1
X    fi
X}
X
X#
X# trivial sanity check
X#
Xfunction check_sanity {
X	if runuser [ ! -f $APPD_ROOT/db/db.cnf ] ; then
X		echo appd controller not installed in $APPD_ROOT
X		exit 1
X	fi
X	if runuser [ ! -x $APPD_ROOT/bin/controller.sh ] ; then
X		echo controller disabled on this host
X		exit 1
X	fi
X}
X
END-of-lib/init.sh
echo x - lib/status.sh
sed 's/^X//' >lib/status.sh << 'END-of-lib/status.sh'
X#!/bin/bash
X#
X# $Id: status.sh 3.30 2018-05-01 12:39:50 cmayer $
X#
X# common code to interrogate the status of various functions
X#
X# can be included by init or other scripts
X# Copyright 2016 AppDynamics, Inc
X#
X#	Licensed under the Apache License, Version 2.0 (the "License");
X#	you may not use this file except in compliance with the License.
X#	You may obtain a copy of the License at
X#
X#		http://www.apache.org/licenses/LICENSE-2.0
X#
X#	Unless required by applicable law or agreed to in writing, software
X#	distributed under the License is distributed on an "AS IS" BASIS,
X#	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
X#	See the License for the specific language governing permissions and
X#	limitations under the License.
X#
X
Xfunction watchdog_running {
X	if runuser [ -f "$WATCHDOG_PIDFILE" ] ; then
X		watchdog_pid=`runuser cat $WATCHDOG_PIDFILE`
X		if [ ! -z "$watchdog_pid" ] ; then
X			if [ -d /proc/$watchdog_pid ] ; then
X				return 0
X			fi
X		fi
X	fi
X	rm -f $WATCHDOG_PIDFILE
X	return 1
X}
X
Xfunction assassin_running {
X	if runuser [ -f "$ASSASSIN_PIDFILE" ] ; then
X		assassin_pid=`runuser cat $ASSASSIN_PIDFILE`
X		if [ ! -z "$assassin_pid" ] ; then
X			if [ -d /proc/$assassin_pid ] ; then
X				return 0
X			fi
X		fi
X	fi
X	rm -f $ASSASSIN_PIDFILE
X	return 1
X}
X
Xfunction replication_disabled {
X	if [ $(dbcnf_get skip-slave-start) = true ] ; then
X		return 0
X	else
X		return 1
X	fi
X}
X
Xfunction db_running {
X    if [ "$DB_PID_FILE" = "unset" ] ; then
X        DB_PID_FILE="$DB_DATA_DIR/$(hostname).pid"
X    fi
X    if runuser [ -f $DB_PID_FILE ] ; then
X        DB_PID=`runuser cat $DB_PID_FILE 2>/dev/null`
X    fi
X    if [ -z "$DB_PID" ] ; then
X        return 1
X    fi   
X    if [ -d /proc/$DB_PID ] ; then
X        return 0;
X    fi 
X    return 1
X}
X
Xfunction get {
X	local key=$1
X	awk "/$key:/ {print \$2}"
X}
X
Xfunction controller_mode {
X	echo "select value from global_configuration_local \
X		where name='appserver.mode'" | run_mysql | get value
X}
X
Xfunction controllerrunning {
X	if pgrep -f -u $RUNUSER "java -jar ./../modules/admin-cli.jar" >/dev/null ; then
X		return 1
X	fi
X	if runuser "$APPD_ROOT/appserver/glassfish/bin/asadmin" list-domains | \
X		grep -q "domain1 running" ; then
X		return 0
X	fi
X	if pgrep -f -u $RUNUSER "$APPD_ROOT/appserver/glassfish/domains/domain1" >/dev/null ; then
X		return 2
X	fi
X	return 3
X}
X
Xfunction events_running {
X	if ps -f -u $RUNUSER | grep "java" | grep "$APPD_ROOT/events_service" >/dev/null ; then
X		return 0
X	fi
X	return 1
X}
X
Xfunction reporting_running {
X	if pgrep -f -u $RUNUSER "$APPD_ROOT/reporting_service/nodejs/bin/node" >/dev/null ; then
X		return 0
X	fi
X	return 1
X}
X
Xfunction machine_agent_running {
X	if pgrep -f -u $RUNUSER machineagent.jar > /dev/null; then
X		return 0
X	else
X		return 1
X	fi
X}
X
X#
X# find java
X#
Xfunction find_java {
X    if [ -f $APPD_ROOT/appserver/glassfish/config/asenv.conf ] ; then
X        AS_JAVA=$(grep ^AS_JAVA= $APPD_ROOT/appserver/glassfish/config/asenv.conf |
X        awk -F= '{print $2}' | sed -e 's/^"//' -e 's/"$//')
X    fi
X    unset JAVA
X    for java in $AS_JAVA $APPD_ROOT/jre ; do
X        if [ -x $java/bin/java ] ; then
X            export JAVA=$java/bin/java
X            break;
X        fi
X    done
X    if [ -z "$JAVA" ] ; then
X        return 1
X    fi
X    echo $JAVA
X    return 0
X}
X
END-of-lib/status.sh
chmod ugo+rx . .. ; find . -name \*.sh -print | xargs chmod ugo+rx; exit

